# -------------------------------------------------
# ICON.DEF
# -------------------------------------------------
#
# SMS suite definition file.
#
# This script is part of the ICON SMS suite
# Initial implementation: F. Prill, DWD (2012-05-07)
#
# Corresponding author:
#   Florian Prill, DWD, mailto:florian.prill@dwd.de
#
# Some parts of this definition file are based
# on the "bceps" SMS suite (H. Frank, DWD), cf.
# "ecgate:/home/ms/de/zde/BCeps"
#

# import environment variables:
setenv -i HOME
setenv -i USER
setenv -i HOST
setenv -i TMPDIR
set UID `id -u`

# global definitions:
set SUITE_NAME    "ICON_r2B06_10d"
set EXPNUM        "002"
set FIRST_DATE    20120601
set LAST_DATE     20120901

# HPC environment:
set SCHOST      c1a
set SCBASEDIR   /perm/ms/de/$USER
set SCTEMP      /$SCHOST/tmp/ms/de/$USER/sms
set SCLOGPORT   `expr 35000 + $UID `
set SCLOGDIR    $SCTEMP
set SCPERM      /perm/ms/de/$USER

# place where generated job scripts are stored
set SMSHOME     "$HOME/sms"

# place where suite and tasks are defined
set SMSFILES    "$HOME/$SUITE_NAME/def/smsfiles/icon"

# place where include files are stored
set SMSINCLUDE  "$HOME/$SUITE_NAME/def/include"

# place for SMS output
set SMSOUT      "$HOME/sms"

# no. of files to check for:
set MAXFILES     1

# no. of time steps (10x86400s/60s)
set NSTEPS       14400

# wait interval between file checks:
set WAITINTVL    10

# set no. of restarts for aborted tasks in SMS:
set SMSTRIES      1

# -------------------------------------------------
set ICONNODES        16
set ICONTASKSPERNODE 32
set ICONTHREADS       2
# -------------------------------------------------


define on_ecgate {
  label host "$HOST"
}

define on_hpc_parallel {
  label host "$SCHOST parallel"
  edit SMSCMD  "/usr/local/share/sms_submit %USER% %SCHOST% %SMSJOB%"
  edit SMSKILL "/usr/local/share/sms_kill %USER% %SCHOST% %SMSRID% %SMSJOB%"
  edit SMSSTATUSCMD "/usr/local/share/sms_status %USER% %SCHOST% %SMSRID% %SMSJOB%"
  edit SMSOUT     ${SCLOGDIR}
  edit SMSLOGHOST ${SCHOST}
  edit SMSLOGPORT ${SCLOGPORT}
  edit SCCPUS     1
  edit SCMEM      1550MB
}

define on_hpc_serial {
  edit SCJOBTYPE serial
  edit SCJOBCLASS ns
  edit SCTOTALTASKS 1
  on_hpc_parallel
  label host "$SCHOST serial"
}


# -------------------------------------------------

suite icon_${EXPNUM}

    # initial hour: could be cycled later
    edit INIHOUR 00

    # init local variables:
    set ENABLE_INIT               1
    set     ENABLE_GET_DATA       1
    set     ENABLE_INIT_DATA      1
    set     ENABLE_BUILD          0
    set         ENABLE_INIT_SVN   0
    set ENABLE_FORECAST           1
    set     ENABLE_DUMPSTATE      0
    set     ENABLE_MODEL          1
    set ENABLE_POST               1

    # enable this flag, if we do not perform a complete "svn export"
    # but simply an "svn update" and "gmake distclean":
    set  SVN_UPDATE           1
    edit SVN_UPDATE $SVN_UPDATE

    edit SUITE_NAME $SUITE_NAME

    edit SMSTRIES   $SMSTRIES
    edit SMSHOME    $SMSHOME
    edit SMSFILES   $SMSFILES
    edit SMSINCLUDE $SMSINCLUDE
    edit SMSOUT     $SMSOUT

    edit MAXFILES   $MAXFILES
    edit NSTEPS     $NSTEPS
    edit WAITINTVL  $WAITINTVL
    edit USER       $USER
    edit SCPERM     $SCPERM
    edit TMPDIR     $TMPDIR
    edit SCHOST     $SCHOST
    edit SCBASEDIR  $SCBASEDIR
    edit SCTEMP     $SCTEMP

    edit ICONNODES        $ICONNODES        
    edit ICONTASKSPERNODE $ICONTASKSPERNODE 
    edit ICONTHREADS      $ICONTHREADS      
    edit ENABLE_DUMPSTATE $ENABLE_DUMPSTATE


    # ONCE --------------------------------------------

    task once
       #complete (/icon_${EXPNUM}:YMD gt ${FIRST_DATE})
        on_hpc_serial
        edit SCWALLCLOCKLIMIT 00:02:00


    # DUMMY TASK (IFS TRIGGER) ------------------------
   #family ifs_fct
   #    task fct_ifs
   #        on_ecgate
   #        defstatus unknown
   #endfamily


    # INITIALIZATION ----------------------------------

    family init
        repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
        trigger (init:YMD le ( forecast:YMD + 1 )) and (once == complete)
        complete ($ENABLE_INIT == 0)

        task fct_ifs                                    # DUMMY TASK (IFS TRIGGER) 
            on_ecgate
            defstatus unknown

        task setup
            trigger (../init:YMD le /icon_${EXPNUM}:SMSDATE - 2 ) or \
                    (fct_ifs == complete)
            on_ecgate
            if ($ENABLE_INIT == 0) then
                label status "skipped"
            endif
           #label date "???"
            event enable_build
            event enable_dumpstate

        task get_data
            trigger (setup == complete) and (../once == complete)
            complete ($ENABLE_GET_DATA == 0)
            on_hpc_serial
            edit SCWALLCLOCKLIMIT 00:30:00
            if (($ENABLE_INIT == 0) or ($ENABLE_GET_DATA == 0)) then
                label status "skipped"
            endif

        task init_data
            trigger (get_data == complete)
            complete ($ENABLE_INIT_DATA == 0)
            on_hpc_serial
            edit SCWALLCLOCKLIMIT 00:60:00
            if (($ENABLE_INIT == 0) or ($ENABLE_INIT_DATA == 0)) then
                label status "skipped"
            endif
           #event change_dir
            event compute_weights
            event ifs2icon

        family build
            trigger (setup == complete) and (../once == complete)

            task init_svn 
                complete ($ENABLE_INIT_SVN == 0) or ($ENABLE_INIT == 0) or \
                  ($ENABLE_BUILD == 0) or not (../setup:enable_build)
                on_ecgate
                if (($ENABLE_INIT == 0) or ($ENABLE_BUILD == 0) or ($ENABLE_INIT_SVN == 0)) then
                    label status "skipped"
                endif
                event svn_update
                event make_distclean
                event change_dir
                event svn_export
                event tarfile
                event clear_directory

            task init_build
                trigger (init_svn == complete)
                complete ($ENABLE_INIT == 0) or ($ENABLE_BUILD == 0) or not (../setup:enable_build)
                on_hpc_parallel
                edit SCJOBTYPE parallel
                edit SCJOBCLASS np
                edit SCTOTALTASKS 4
                edit SCCPUS       4
                edit SCMEM        6200MB
                edit SCWALLCLOCKLIMIT 05:00:00
                if (($ENABLE_INIT == 0) or ($ENABLE_BUILD == 0)) then
                    label status "skipped"
                endif
                event change_dir
                event uncompress
                event configure
                event make

            task init_cp_binary
                trigger (init_build == complete) 
                complete (../../init:YMD gt ${FIRST_DATE}) and ($ENABLE_BUILD == 0)
                on_hpc_serial
                edit SCWALLCLOCKLIMIT 00:02:00

        endfamily

    endfamily


    # FORECAST ----------------------------------------

    family forecast
        repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
        trigger (init:YMD gt forecast:YMD) and (forecast:YMD le ( post:YMD + 1 ))
        complete ($ENABLE_FORECAST == 0)

        family prepare
            task pre_clean
               #trigger (../../../init/setup == complete)
                on_hpc_serial
                edit SCWALLCLOCKLIMIT 00:20:00
                if ($ENABLE_FORECAST == 0) then
                    label status "skipped"
                endif

            task dumpstate
                trigger (pre_clean == complete)
                complete ($ENABLE_DUMPSTATE == 0) or not (../../../init/setup:enable_dumpstate)
                on_hpc_parallel
                edit SCWALLCLOCKLIMIT 00:20:00
                if (($ENABLE_FORECAST == 0) or ($ENABLE_DUMPSTATE == 0)) then
                    label status "skipped"
                endif
                event prepare
                event create_dumpstate

        endfamily

        task model
            trigger (prepare/dumpstate == complete)
            complete ($ENABLE_MODEL == 0)
            on_hpc_parallel
            edit SCWALLCLOCKLIMIT 02:00:00
            if (($ENABLE_FORECAST == 0) or ($ENABLE_MODEL == 0)) then
                label status "skipped"
            endif
            event run_model
            event model_complete
            # auto-shutdown of "check_progress" subtask:
            #action abort    $SMSFILES/cancel_check_progress
            #action complete $SMSFILES/cancel_check_progress

        task check_progress
            trigger (model == active)
            complete (model == complete)
            on_hpc_serial
            edit SCWALLCLOCKLIMIT 02:00:00
            if (($ENABLE_FORECAST == 0) or ($ENABLE_MODEL == 0)) then
                label status "skipped"
            endif
            meter timesteps 0 $NSTEPS $NSTEPS

    endfamily


    # POST-PROCESS---------------------------------

    if ($ENABLE_POST == 1) then
       family post
           repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
           trigger (forecast:YMD gt post:YMD)
           #repeat integer VALUE 1 $MAXFILES
           #
           #trigger (($ENABLE_FORECAST==0) or (../forecast/model:run_model  and ((../forecast/check_progress:progress ge post:VALUE) or (../forecast/model:model_complete))))
           #trigger (../forecast/model:model_complete)

           task post_prepare   
               on_hpc_serial
               edit SCWALLCLOCKLIMIT 00:40:00
   
           task meteogram
               trigger (post_prepare == complete)
               on_ecgate
               event change_dir
               event copy_files
   
           task metview
               trigger (post_prepare == complete)
               on_ecgate
               event cpdata
               event metview
   
           task post_archive
               trigger (post_prepare == complete)
               on_ecgate
               event change_dir
               event copy_files
   
       endfamily
    endif

endsuite

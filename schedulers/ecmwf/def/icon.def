# -------------------------------------------------
# ICON.DEF
# -------------------------------------------------
#
# SMS suite definition file.
#
# This script is part of the ICON SMS suite
# Initial implementation: F. Prill, DWD (2012-05-07)
#
# Corresponding author:
#   Florian Prill, DWD, mailto:florian.prill@dwd.de
#
# Some parts of this definition file are based
# on the "bceps" SMS suite (H. Frank, DWD), cf.
# "ecgate:/home/ms/de/zde/BCeps"
#
# 2012-07-02 : Introduced new SVN user "dwd-ecmwf"
# 2012-summer: Upgrade to multi-experiment, multi-user,
#              catch-up-mode, plotting (Martin Koehler)
# 2012-end:    Switch to C2A (IBM Power7, Martin Koehler and Stefan Koerner)
# 2014-06:     Switch to CCA (Cray, Martin Koehler)
#

# ---USER SETUP------------------------------------

# global definitions:
set EXPNUM        "193"                #---experiment number---
set EXPNUM2       "192"                #---experiment number used for score comparison---
set SUITE2        "dei2"               #---suite             used for score comparison---
set FIRST_DATE    20120101
set LAST_DATE     20120731
set MONTHS        201201_201207        #---months to be run e.g. 201201_201207
set INIHOUR       00
set ICON_HOME     /home/ms/de/deia 
set ICON_ID       deia 
set RES           "R02B06"             #---ICON resolution dynamics
set RESRAD        "R02B05"             #---ICON resolution radiation (requires namelist)

# no. of time steps (10x86400s/72s)
set NSTEPS       12000   # 10d forecast:  R2B5-turbdiff-9600, R2B5-edmf=6000/5760, R2B6-12000
#set NSTEPS       6000   # grey zone 48h: R2B7-3600, R2B8-7200

# simulation modes: 1:oper, 2:monthly 10day forecasts, 3:climate (1year), 4:B-matrix
set SIMMODE      2

# no. of ensemble members (dummies here)
#set NENS         10
set NENS         0   # default for no ensemble run
set NMEM         0   # default for no ensemble run

# Processors: CRAY totaltasks: 12 x nodes (for 2 hyperthreads and 4 openMP threads)
                          # EDMF: 384        768
set ICONTOTALTASKS  768   # R2B5: 192, R2B6: 384, R2B7: ? ,  R2B8: ?
set ICONNODES        16   # R2B5: 16,  R2B6: 32,  R2B7: 32,  R2B8: 64
set ICONTASKSPERNODE 32   #       32         32         32          8
set ICONTHREADS       2   #        2          2          2          8

# -------------------------------------------------

# import environment variables:
setenv -i HOME
setenv -i USER
setenv -i HOST
setenv -i TMPDIR

# HPC environment:
set SCHOST      cca
set SMSLOGHOST  cca-log 
set SCPREFIX    hpc
set WSHOST      ecgb
set SCTEMP      /scratch/ms/de/$ICON_ID/icon
set ECTEMP      /scratch/ms/de/$ICON_ID/icon
set SCPERM      /perm/ms/de/$USER
set ECPERM      /$SCPREFIX$SCPERM          # mounted cca perm on ecgate
set SCPERMIII   /perm/ms/de/$ICON_ID
set ECPERMIII   /$SCPREFIX$SCPERMIII       # mounted cca perm on ecgate
set SCBASEDIR   $SCPERM/icon-dev/schedulers/ecmwf
set ECBASEDIR   $ECPERM/icon-dev/schedulers/ecmwf
set SCSOFT      /perm/ms/de/deia

# LOGDIR, LOGPORT
#username=`id -u`          #use user deia
#port=$((35000+username))  #then port=36730
set SCLOGDIR    /scratch/ms/de/$ICON_ID/sms
set SCLOGPORT   36730

# place where suite and tasks are defined
set SMSFILES    "$ECPERM/icon-dev/schedulers/ecmwf/sms"

# place where include files are stored
set SMSINCLUDE  "$ECPERM/icon-dev/schedulers/ecmwf/include"

# place where generated job scripts are stored
set SMSHOME     "$ICON_HOME/sms"

# place for SMS output
set SMSOUT      "$ICON_HOME/sms"

# wait interval between file checks:
set WAITINTVL    10

# set no. of restarts for aborted tasks in SMS:
set SMSTRIES      1

# -------------------------------------------------


define on_ecgate {
  label host        "$WSHOST"
}

define on_ecgate_submit {
  label host        "$WSHOST submit"
  edit SMSCMD       "sms_submit $ICON_ID $WSHOST %SMSJOB% %SMSJOBOUT%"
  edit SMSKILL      "sms_kill   $ICON_ID $WSHOST %SMSRID% %SMSJOB% %SMSJOBOUT%"
  edit SMSSTATUSCMD "sms_status $ICON_ID $WSHOST %SMSRID% %SMSJOB%"
}

define on_hpc_parallel {
  label host        "$SCHOST parallel"
 #edit SMSCMD       "/usr/local/apps/schedule/1.1/bin/schedule $ICON_ID %SCHOST% %SMSJOB% %SMSJOBOUT%"
 #edit SMSKILL      "/usr/local/apps/schedule/1.1/bin/schedule $ICON_ID %SCHOST% %SMSRID% %SMSJOB% %SMSJOBOUT% kill"
 #edit SMSSTATUSCMD "/usr/local/apps/schedule/1.1/bin/schedule $ICON_ID %SCHOST% %SMSRID% %SMSJOB% status"
  edit SMSCMD       "/home/us/usd/scripts/schedule $ICON_ID %SCHOST% %SMSJOB% %SMSJOBOUT%"
  edit SMSKILL      "/home/us/usd/scripts/schedule $ICON_ID %SCHOST% %SMSRID% %SMSJOB% %SMSJOBOUT% kill"
  edit SMSSTATUSCMD "/home/us/usd/scripts/schedule $ICON_ID %SCHOST% %SMSRID% %SMSJOB% status"
  edit SMSOUT       ${SCLOGDIR}
  edit SMSLOGHOST   ${SMSLOGHOST}
  edit SMSLOGPORT   ${SCLOGPORT}
  edit SCCPUS       1
  edit SCMEM        1550MB
}

define on_hpc_serial {
  label host        "$SCHOST serial"
  edit SMSCMD       "/usr/local/apps/schedule/1.1/bin/schedule $ICON_ID %SCHOST% %SMSJOB% %SMSJOBOUT%"
  edit SMSKILL      "/usr/local/apps/schedule/1.1/bin/schedule $ICON_ID %SCHOST% %SMSRID% %SMSJOB% %SMSJOBOUT% kill"
  edit SMSSTATUSCMD "/usr/local/apps/schedule/1.1/bin/schedule $ICON_ID %SCHOST% %SMSRID% %SMSJOB% status"
  edit SMSOUT       ${SCLOGDIR}
  edit SMSLOGHOST   ${SMSLOGHOST}
  edit SMSLOGPORT   ${SCLOGPORT}
  edit SCJOBTYPE    serial
  edit SCJOBCLASS   ns
  edit SCTOTALTASKS 1
}


# -------------------------------------------------

suite $USER

  clock real 0      # set todays date

  # EXP ---------------------------------------------

  family ${EXPNUM}


    # initial hour: could be cycled later
    edit INIHOUR $INIHOUR

    # init local variables:
    set ENABLE_INIT               1
    set     ENABLE_GET_DATA       1
    set     ENABLE_INIT_DATA      1
    set     ENABLE_BUILD          0
    set         ENABLE_INIT_SVN   0
    set ENABLE_FORECAST           1
    set     ENABLE_DUMPSTATE      0
    set     ENABLE_MODEL          1
    set ENABLE_POST               1
    set     ENABLE_METEOGRAM      0
    set     ENABLE_POST_METVIEW   0
    set     ENABLE_POST_ARCHIVE   0

    # enable this flag, if we do not perform a complete "svn export"
    # but simply an "svn update" and "gmake distclean":
    set  SVN_UPDATE           1
    edit SVN_UPDATE $SVN_UPDATE

    edit SMSTRIES   $SMSTRIES
    edit SMSHOME    $SMSHOME
    edit SMSFILES   $SMSFILES
    edit SMSINCLUDE $SMSINCLUDE
    edit SMSOUT     $SMSOUT

    edit EXPNUM     $EXPNUM
    edit EXPNUM2    $EXPNUM2
    edit SUITE2     $SUITE2
    edit NSTEPS     $NSTEPS
    edit RES        $RES
    edit RESRAD     $RESRAD
    edit SIMMODE    $SIMMODE
    edit NENS       $NENS
    edit NMEM       $NMEM
    edit WAITINTVL  $WAITINTVL
    edit USER       $USER
    edit SCPERM     $SCPERM
    edit ECPERM     $ECPERM
    edit SCPERMIII  $SCPERMIII
    edit ECPERMIII  $ECPERMIII
    edit TMPDIR     $TMPDIR
    edit SCHOST     $SCHOST
    edit WSHOST     $WSHOST
    edit SCBASEDIR  $SCBASEDIR
    edit ECBASEDIR  $ECBASEDIR
    edit SCTEMP     $SCTEMP
    edit ECTEMP     $ECTEMP
    edit SCSOFT     $SCSOFT
    edit MONTHS     $MONTHS

    edit ICONNODES        $ICONNODES        
    edit ICONTOTALTASKS   $ICONTOTALTASKS
    edit ICONTASKSPERNODE $ICONTASKSPERNODE 
    edit ICONTHREADS      $ICONTHREADS      
    edit ENABLE_DUMPSTATE $ENABLE_DUMPSTATE


    # ONCE --------------------------------------------

    task once
        on_hpc_serial
        edit SCWALLCLOCKLIMIT 00:02:00


    # INITIALIZATION ----------------------------------

    family init
        repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
        trigger (init:YMD le ( forecast:YMD + 2 )) and (once == complete)
        complete ($ENABLE_INIT == 0)

        extern /ifs_trigger/fct_ifs

        task testday
            on_ecgate
            event time_eom
            event time_domonth

        task setup
           #time 06:00                                  # use this for tasks running daily (not catch-up mode)
           #trigger  (/ifs_trigger/fct_ifs == complete)
            trigger   testday:time_domonth
            complete (testday==complete) and not (testday:time_domonth)
            on_ecgate_submit
            event enable_build
            event enable_dumpstate

        family build
            trigger (setup == complete) and (../once == complete)
            complete (testday==complete) and not (testday:time_domonth)

            task init_svn
                complete ($ENABLE_INIT_SVN == 0) or ($ENABLE_INIT == 0) or \
                  ($ENABLE_BUILD == 0) or not (../setup:enable_build)
                on_ecgate
                event svn_update
                event make_distclean
                event svn_export
                event tarfile
                event clear_directory
                meter revision 0 30000 30000

            task init_build
                trigger (init_svn == complete)
                complete ($ENABLE_INIT == 0) or ($ENABLE_BUILD == 0) or not (../setup:enable_build)
                on_hpc_parallel
                edit SCJOBTYPE    parallel
                edit SCJOBCLASS   np
                edit SCTOTALTASKS 8
                edit SCCPUS       8
                edit SCMEM        6200MB
                edit SCWALLCLOCKLIMIT 05:00:00
                event configure
                event make

            task init_cp_binary
                trigger (init_build == complete) 
                complete (../../init:YMD gt ${FIRST_DATE}) and ($ENABLE_BUILD == 0)
                on_hpc_serial
                edit SCWALLCLOCKLIMIT 00:02:00

        endfamily

        task get_data
            trigger (setup == complete) and (../once == complete)
            complete ($ENABLE_GET_DATA == 0) or (testday==complete) and not (testday:time_domonth)
            on_hpc_parallel
            edit SCJOBTYPE    parallel
            edit SCJOBCLASS   np
            edit SCTOTALTASKS 4
            edit SCCPUS       4
            edit SCMEM        3000MB
            edit SCWALLCLOCKLIMIT 02:00:00

        task init_data
            trigger (get_data == complete) and (build == complete)
            complete ($ENABLE_INIT_DATA == 0) or (testday==complete) and not (testday:time_domonth)
            on_hpc_parallel
            edit ICONTOTALTASKS 6
            edit SCJOBTYPE    parallel
            edit SCJOBCLASS   np
            edit SCTOTALTASKS 24
            edit SCCPUS       8
            edit SCWALLCLOCKLIMIT 00:60:00

    endfamily


    # FORECAST ----------------------------------------

    family forecast
        repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
        trigger (init:YMD gt forecast:YMD) and (forecast:YMD le ( post:YMD + 2 ))
        complete ($ENABLE_FORECAST == 0)

        task testday
            on_ecgate
            event time_eom
            event time_domonth

        family prepare
            trigger  (testday==complete)
            complete (testday==complete) and not (testday:time_domonth)
            task pre_clean
                on_hpc_serial
                edit SCWALLCLOCKLIMIT 00:20:00

            task dumpstate
                trigger (pre_clean == complete)
                complete ($ENABLE_DUMPSTATE == 0) or not (/${USER}/${EXPNUM}/init/setup:enable_dumpstate)
                on_hpc_parallel
                edit SCWALLCLOCKLIMIT 00:20:00
                event prepare
                event create_dumpstate
        endfamily

        task model
            trigger (prepare == complete)
            complete ($ENABLE_MODEL == 0) or (testday==complete) and not (testday:time_domonth)
            on_hpc_parallel
            edit SCWALLCLOCKLIMIT 02:00:00
            event model_complete
            # auto-shutdown of "check_progress" subtask:
            #action abort    $SMSFILES/cancel_check_progress
            #action complete $SMSFILES/cancel_check_progress

        task check_progress
            trigger  (model == active)
            complete (model == complete) or (testday==complete) and not (testday:time_domonth)
            on_ecgate_submit
            edit SMSOUT ${SCLOGDIR}
            edit SCWALLCLOCKLIMIT 02:00:00
            meter timesteps 0 $NSTEPS $NSTEPS

    endfamily


    # POST-PROCESS---------------------------------

    family post
        repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
        trigger (forecast:YMD gt post:YMD)
        #trigger (($ENABLE_FORECAST==0) or (../forecast/model:run_model  and ((../forecast/check_progress:progress ge post:VALUE) or (../forecast/model:model_complete))))
        #trigger (../forecast/model:model_complete)
        complete ($ENABLE_POST == 0)

        task testday
            on_ecgate
            event time_eom
            event time_domonth

        task post_prepare   
            trigger  (testday==complete)
            complete (testday==complete) and not (testday:time_domonth)
            on_hpc_serial
            edit SCWALLCLOCKLIMIT 00:40:00
            event meteogram_data
   
        task meteogram
            trigger (post_prepare:meteogram_data)
            complete ($ENABLE_METEOGRAM == 0) or (testday==complete) and not (testday:time_domonth)
            on_ecgate_submit
   
        family metview_all 
          trigger (post_prepare == complete)
          complete ($ENABLE_POST_METVIEW == 0) or (testday==complete) and not (testday:time_domonth)
          for set 1 4 ; do
            set tsk `printf %3.3i $set`
            family $tsk
              task metview
                on_ecgate_submit
                edit metproc $set
            endfamily
          endfor  
        endfamily

        task post_archive
            trigger meteogram==complete and metview_all==complete 
            complete ($ENABLE_POST_ARCHIVE == 0) or (testday==complete) and not (testday:time_domonth)
            on_ecgate_submit
    endfamily


    # END OF MONTH---------------------------------

    family endofmonth
        repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
        trigger (post:YMD gt endofmonth:YMD) and (forecast:YMD gt endofmonth:YMD)

        task testday
            on_ecgate
            event time_eom
            event time_domonth

        task eom_data2dwd
            trigger   testday==complete
            complete (testday==complete) and (not (testday:time_eom) or not (testday:time_domonth))
            on_ecgate_submit

        task eom_prepare  
            trigger   testday==complete
            complete (testday==complete) and (not (testday:time_eom) or not (testday:time_domonth))
            on_hpc_serial
            edit SCWALLCLOCKLIMIT 24:00:00
            meter ecget     0 31 31
            meter splitdata 0 31 31
            meter deldata   0 31 31
            event get_pl_data
            event get_hl_data
            event get_ml_data
            meter catvariables 0 100 100
            event catdata
            event cpdata

        task eom_getmars
            trigger   testday==complete
            complete (testday==complete) and (not (testday:time_eom) or not (testday:time_domonth))
            on_ecgate_submit

        family eom_metview_all 
            trigger (eom_prepare == complete) and (eom_getmars == complete)
            complete (testday==complete) and (not (testday:time_eom) or not (testday:time_domonth))
            for set 1 5 ; do
               set tsk `printf %3.3i $set`
               family $tsk
                 task eom_metview
                   on_ecgate_submit
                   edit metproc $set
               endfamily
            endfor  
        endfamily

        task eom_archive
            trigger eom_metview_all==complete
            complete (testday==complete) and (not (testday:time_eom) or not (testday:time_domonth))
            on_ecgate_submit
   
    endfamily

  endfamily

endsuite

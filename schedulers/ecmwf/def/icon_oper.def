# -------------------------------------------------
# ICON.DEF
# -------------------------------------------------
#
# SMS suite definition file.
#
# This script is part of the ICON SMS suite
# Initial implementation: F. Prill, DWD (2012-05-07)
#
# Corresponding author:
#   Florian Prill, DWD, mailto:florian.prill@dwd.de
#
# Some parts of this definition file are based
# on the "bceps" SMS suite (H. Frank, DWD), cf.
# "ecgate:/home/ms/de/zde/BCeps"
#
# Help:
#  * set current time on cdp:
#    CDP> alter -g /dei2 19.10.2012
#
# 2012-07-02 : Introduced new SVN user "dwd-ecmwf"
# 2012-summer: Upgrade to multi-experiment, multi-user,
#              catch-up-mode, plotting (Martin Koehler)
#

# import environment variables:
setenv -i HOME
setenv -i USER
setenv -i HOST
setenv -i TMPDIR

# global definitions:
set EXPNUM        "001"                #---experiment number---
set FIRST_DATE    20120701
set LAST_DATE     20121231
set ICON_HOME     /home/ms/de/deia 
set ICON_ID       deia 

# HPC environment:
set SCHOST      c1a
set SCTEMP      /$SCHOST/tmp/ms/de/$ICON_ID/icon
set ECTEMP      /scratch/ms/de/$ICON_ID/icon_data
set SCPERM      /perm/ms/de/$USER
set ECPERM      /$SCHOST$SCPERM            # mounted c1a perm on ecgate
set SCPERMIII   /perm/ms/de/$ICON_ID
set ECPERMIII   /$SCHOST$SCPERMIII         # mounted c1a perm on ecgate
set SCBASEDIR   $SCPERM/icon-dev/schedulers/ecmwf
set ECBASEDIR   $ECPERM/icon-dev/schedulers/ecmwf
set SCSOFT      /perm/ms/de/deia

# LOGDIR, LOGPORT
#username=`id -u`          #use user deia
#port=$((35000+username))  #then port=36730
set SCLOGDIR    /$SCHOST/tmp/ms/de/$ICON_ID/sms
set SCLOGPORT   36730

# place where suite and tasks are defined
set SMSFILES    "$ECPERM/icon-dev/schedulers/ecmwf/sms"

# place where include files are stored
set SMSINCLUDE  "$ECPERM/icon-dev/schedulers/ecmwf/include"

# place where generated job scripts are stored
set SMSHOME     "$ICON_HOME/sms"

# place for SMS output
set SMSOUT      "$ICON_HOME/sms"

# no. of time steps (10x86400s/60s)
set NSTEPS       14400
#set NSTEPS       2880

# no. of ensemble members (dummies here)
#set NENS         10
set NENS         0   # default for no ensemble run
set NMEM         0   # default for no ensemble run

# wait interval between file checks:
set WAITINTVL    10

# set no. of restarts for aborted tasks in SMS:
set SMSTRIES      1

# -------------------------------------------------
set ICONNODES        16
set ICONTASKSPERNODE 32
set ICONTHREADS       2
# -------------------------------------------------


define on_ecgate {
  label host "$HOST"
}

define on_ecgate_submit {
  label host "$HOST submit"
  edit SMSCMD  "/usr/local/share/sms_submit      $ICON_ID $HOST %SMSJOB%"
  edit SMSKILL "/usr/local/share/sms_kill        $ICON_ID $HOST %SMSRID% %SMSJOB%"
  edit SMSSTATUSCMD "/usr/local/share/sms_status $ICON_ID $HOST %SMSRID% %SMSJOB%"
}

define on_hpc_parallel {
  label host "$SCHOST parallel"
  edit SMSCMD  "/usr/local/share/sms_submit      $ICON_ID %SCHOST% %SMSJOB%"
  edit SMSKILL "/usr/local/share/sms_kill        $ICON_ID %SCHOST% %SMSRID% %SMSJOB%"
  edit SMSSTATUSCMD "/usr/local/share/sms_status $ICON_ID %SCHOST% %SMSRID% %SMSJOB%"
  edit SMSOUT     ${SCLOGDIR}
  edit SMSLOGHOST ${SCHOST}
  edit SMSLOGPORT ${SCLOGPORT}
  edit SCCPUS     1
  edit SCMEM      1550MB
}

define on_hpc_serial {
  edit SCJOBTYPE serial
  edit SCJOBCLASS ns
  edit SCTOTALTASKS 1
  on_hpc_parallel
  label host "$SCHOST serial"
}


# -------------------------------------------------

suite $USER

  clock real 0      # set todays date

  # EXP ---------------------------------------------

  family ${EXPNUM}


    # initial hour: could be cycled later
    edit INIHOUR 00

    # init local variables:
    set ENABLE_INIT               1
    set     ENABLE_GET_DATA       1
    set     ENABLE_INIT_DATA      1
    set     ENABLE_BUILD          1
    set         ENABLE_INIT_SVN   1
    set ENABLE_FORECAST           1
    set     ENABLE_DUMPSTATE      0
    set     ENABLE_MODEL          1
    set ENABLE_POST               1

    # enable this flag, if we do not perform a complete "svn export"
    # but simply an "svn update" and "gmake distclean":
    set  SVN_UPDATE           1
    edit SVN_UPDATE $SVN_UPDATE

    edit SMSTRIES   $SMSTRIES
    edit SMSHOME    $SMSHOME
    edit SMSFILES   $SMSFILES
    edit SMSINCLUDE $SMSINCLUDE
    edit SMSOUT     $SMSOUT

    edit EXPNUM     $EXPNUM
    edit NSTEPS     $NSTEPS
    edit NENS       $NENS
    edit NMEM       $NMEM
    edit WAITINTVL  $WAITINTVL
    edit USER       $USER
    edit SCPERM     $SCPERM
    edit ECPERM     $ECPERM
    edit SCPERMIII  $SCPERMIII
    edit ECPERMIII  $ECPERMIII
    edit TMPDIR     $TMPDIR
    edit SCHOST     $SCHOST
    edit SCBASEDIR  $SCBASEDIR
    edit ECBASEDIR  $ECBASEDIR
    edit SCTEMP     $SCTEMP
    edit ECTEMP     $ECTEMP
    edit SCSOFT     $SCSOFT

    edit ICONNODES        $ICONNODES        
    edit ICONTASKSPERNODE $ICONTASKSPERNODE 
    edit ICONTHREADS      $ICONTHREADS      
    edit ENABLE_DUMPSTATE $ENABLE_DUMPSTATE


    # ONCE --------------------------------------------

    task once
        on_hpc_serial
        edit SCWALLCLOCKLIMIT 00:02:00


    # INITIALIZATION ----------------------------------

    family init
        repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
        trigger (init:YMD le ( forecast:YMD + 2 )) and (once == complete)
        complete ($ENABLE_INIT == 0)

        extern /ifs_trigger/fct_ifs

        task setup
           #time 06:00                                  # use this for tasks running daily (not catch-up mode)
           #trigger  /ifs_trigger/fct_ifs == complete
            trigger  ../init:YMD le /${USER}:SMSDATE-2
            on_ecgate
            event enable_build
            event enable_dumpstate

        task get_data
            trigger (setup == complete) and (../once == complete)
            complete ($ENABLE_GET_DATA == 0)
            on_hpc_serial
            edit SCWALLCLOCKLIMIT 02:00:00

        task init_data
            trigger (get_data == complete)
            complete ($ENABLE_INIT_DATA == 0)
            on_hpc_serial
            edit SCWALLCLOCKLIMIT 00:60:00
            event compute_weights
            event ifs2icon

        family build
            trigger (setup == complete) and (../once == complete)

            task init_svn
                trigger  /${USER}:DOW == 01       # Monday
                on_ecgate
                event svn_update
                event make_distclean
                event svn_export
                event tarfile
                event clear_directory
                meter revision 0 20000 20000

            task init_build
                trigger (init_svn == complete)
                on_hpc_parallel
                edit SCJOBTYPE parallel
                edit SCJOBCLASS np
                edit SCTOTALTASKS 4
                edit SCCPUS       4
                edit SCMEM        6200MB
                edit SCWALLCLOCKLIMIT 05:00:00
                event configure
                event make

            task init_cp_binary
                trigger (init_build == complete) or  
                  ( (../../init:YMD == ${FIRST_DATE}) and /${USER}:DOW ne 01 )
                on_hpc_serial
                edit SCWALLCLOCKLIMIT 00:02:00

        endfamily

    endfamily


    # FORECAST ----------------------------------------

    family forecast
        repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
        trigger (init:YMD gt forecast:YMD) and (forecast:YMD le ( post:YMD + 2 ))
        complete ($ENABLE_FORECAST == 0)

        family prepare
            task pre_clean
                on_hpc_serial
                edit SCWALLCLOCKLIMIT 00:20:00

            task dumpstate
                trigger (pre_clean == complete)
                complete ($ENABLE_DUMPSTATE == 0) or not (/${USER}/${EXPNUM}/init/setup:enable_dumpstate)
                on_hpc_parallel
                edit SCWALLCLOCKLIMIT 00:20:00
                event prepare
                event create_dumpstate

        endfamily

        task model
            trigger (prepare == complete)
            complete ($ENABLE_MODEL == 0)
            on_hpc_parallel
            edit SCWALLCLOCKLIMIT 02:00:00
            event model_complete
            # auto-shutdown of "check_progress" subtask:
            #action abort    $SMSFILES/cancel_check_progress
            #action complete $SMSFILES/cancel_check_progress

        task check_progress
            trigger (model == active)
            complete (model == complete)
            on_hpc_serial
            edit SCWALLCLOCKLIMIT 02:00:00
            meter timesteps 0 $NSTEPS $NSTEPS

    endfamily


    # POST-PROCESS---------------------------------

    if ($ENABLE_POST == 1) then
       family post
           repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
           trigger (forecast:YMD gt post:YMD)
           #trigger (($ENABLE_FORECAST==0) or (../forecast/model:run_model  and ((../forecast/check_progress:progress ge post:VALUE) or (../forecast/model:model_complete))))
           #trigger (../forecast/model:model_complete)

           task post_prepare   
               on_hpc_serial
               edit SCWALLCLOCKLIMIT 00:40:00
               event meteogram_data
   
           task meteogram
               trigger (post_prepare:meteogram_data)
               on_ecgate_submit
   
           family metview_all 
             trigger (post_prepare == complete)
             for set 1 4 ; do
               set tsk `printf %3.3i $set`
               family $tsk
                 task metview
                   on_ecgate_submit
                   edit metproc $set
               endfamily
             endfor  
           endfamily

           task post_archive
               trigger meteogram==complete and metview_all==complete 
               on_ecgate_submit
   
       endfamily
    endif


    # END OF MONTH---------------------------------

    family endofmonth
        repeat date YMD ${FIRST_DATE} ${LAST_DATE}      # cycle over dates
        trigger (post:YMD gt endofmonth:YMD)

        task testday
            on_ecgate
            event time_eom

        task eom_data2dwd
            trigger testday:time_eom
            complete (testday==complete) and not (testday:time_eom)
            on_ecgate_submit

        task eom_prepare  
            trigger testday:time_eom
            complete (testday==complete) and not (testday:time_eom)
            on_hpc_serial
            edit SCWALLCLOCKLIMIT 24:00:00
            meter ecget     0 31 31
            meter splitdata 0 31 31
            meter deldata   0 31 31
            event catdata
            event cpdata

        task eom_getmars
            trigger testday:time_eom
            complete (testday==complete) and not (testday:time_eom)
            on_ecgate_submit

        family eom_metview_all 
            trigger (eom_prepare == complete) and (eom_getmars == complete)
            complete (testday==complete) and not (testday:time_eom)
            for set 1 4 ; do
               set tsk `printf %3.3i $set`
               family $tsk
                 task eom_metview
                   on_ecgate_submit
                   edit metproc $set
               endfamily
            endfor  
        endfamily

        task eom_archive
            trigger eom_metview_all==complete
            complete (testday==complete) and not (testday:time_eom)
            on_ecgate_submit
   
    endfamily

  endfamily

endsuite

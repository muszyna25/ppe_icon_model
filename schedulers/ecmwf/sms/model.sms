#!/bin/ksh

%manual
  -------------------------------------------------
  MODEL.SMS
  -------------------------------------------------

  This script is part of the ICON SMS suite
  Initial implementation: F. Prill, DWD (2012-05-07)

  Corresponding author:
    Florian Prill, DWD, mailto:florian.prill@dwd.de

  Task objectives:
  - model run 
%end

# include the header file for ICON jobs
%include <init_icon_job.h> 

# -------------------------------------------------

# *************************************************
stage=run


# *************************************************

echo "MODEL.SMS" 
set -x
module load python
module swap grib_api grib_api/1.10.4

# calculate and format starting date of simulation: SMSDATE-  2 days, time: UTC 00 
#REQUEST_DATE=`python %SCBASEDIR%/gen/date_calc.py -a printdate -d %SMSDATE%00 -s 2`
INITIME=%YMD%%INIHOUR%
INITIME_FMT=`python %SCBASEDIR%/gen/date_calc.py -a printfmt -d %YMD%%INIHOUR%`

if [[ %NENS% -gt 0 ]]
  then DIRENS=/%NMEM%
  else DIRENS=''
fi
if [[ %NENS% -gt 0 ]]
  then TXTENS=_%NMEM%
  else TXTENS=''
fi

# directory where the case setup is stored
SETDIRTMP=%SCTEMP%/%SUITE%/%EXPNUM%/output/setup${DIRENS}
# ifsdir for IFS initial condition
ifsdir=%SCTEMP%/%SUITE%/%EXPNUM%/input/%YMD%%INIHOUR%${DIRENS}
# base directory for external data
basedir=%SCPERM%
# base directory for time dependent external data SST ansd CI data
sstice_dir=%SCPERMIII%
# base directory for model output
outbasedir=%SCTEMP%/%SUITE%/%EXPNUM%/output
# base name for output and namelist files
basename=%SUITE%_%EXPNUM%_%YMD%%INIHOUR%${TXTENS}

res=%RES%
resrad=%RESRAD%


# -------------------------------------------------

export MP_WAIT_MODE=poll
export MP_LABELIO=yes
export MP_SHARED_MEMORY=yes
export MP_ADAPTER_USE=shared
export MP_INFOLEVEL=2
export XLFRTEOPTS=err_recovery=no

export ICON_THREADS=%ICONTHREADS%
export OMP_STACKSIZE=400M
export OMP_SCHEDULE="static"
export OMP_DYNAMIC="false"
export NC_BLOCKSIZE=128mb

export F_PROGINF=DETAIL

module unload netcdf
#module load netcdf4/4.1.2
module load netcdf4


# -------------------------------------------------

if [[ %ENABLE_DUMPSTATE% = 0 ]] ; then
  stage="total"
fi

# set the dump/restore flags according to the different phases.
if [[ "${stage}" = "dump" ]] ; then
    ldump_states=.TRUE.
    lrestore_states=.FALSE.
fi
if [[ "${stage}" = "run" ]] ; then
    ldump_states=.FALSE.
    lrestore_states=.TRUE.
fi
if [[ "${stage}" = "total" ]] ; then
    ldump_states=.FALSE.
    lrestore_states=.FALSE.
fi

# include experiment parameters

. ${SETDIRTMP}/case_setup

# copy binary and execute in parallel
cp -p ${outbasedir}/bin/control_model ./icon.exe

# copy binary alternatively from individual user - option 1 - automatic - applies to all runs
#cp -p /perm/ms/de/dei2/icon-dev/build/rs6000-ibm-aix/bin/control_model ./icon.exe

# copy binary alternatively from individual user - option 2 - by hand (replace expid XXX)
# cp /perm/ms/de/dei2/icon-dev/build/rs6000-ibm-aix/bin/control_model /scratch/ms/de/deia/icon/dei2/XXX/output/bin

echo "job::start"
date
export USE_SIGNAL_HANDLING=yes

debug=0
if [[ ${debug} = 1 ]] ; then                  # optional totalview debugging (max tasks: 256! better 64)
  export DISPLAY=ecaccess.ecmwf.int:1631.0    # open nxclient on c2a and get DISPLAY
  totalview -searchpath='/perm/ms/de/dei2/icon-dev/src/atm_phy_edmf/,/perm/ms/de/dei2/icon-dev/src/lnd_phy_nwp/,/perm/ms/de/dei2/icon-dev/src/atm_phy_nwp/' \
    poe -a ./icon.exe
else
  ./icon.exe
fi

echo "job::end"
date


# model run completed -------------------------
smsevent model_complete


# ---------------------------------------------

# include the "tail" file for remote jobs
%include <end_job.h>


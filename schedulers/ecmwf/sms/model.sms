#!/bin/ksh

%manual
  -------------------------------------------------
  MODEL.SMS
  -------------------------------------------------

  This script is part of the ICON SMS suite
  Initial implementation: F. Prill, DWD (2012-05-07)

  Corresponding author:
    Florian Prill, DWD, mailto:florian.prill@dwd.de

  Task objectives:
  - model run 
%end

# include the header file for ICON jobs
%include <init_sc_model.h> 

# -------------------------------------------------

# *************************************************
stage=run


# *************************************************

echo "MODEL.SMS" 
set -x
module load python
module swap grib_api grib_api/1.12.3

dwd_grib_api=/home/ms/de/dwd/grib_api
export GRIB_DEFINITION_PATH="${dwd_grib_api}/definitions.edzw-1.12.3:/usr/local/apps/grib_api/1.12.3/CRAY/82/share/grib_api/definitions"


## -------------------------------------------------
# test IFS or ICON initial conditions for current month

YYYYMM=`echo %YMD% | cut -c 1-6`
MONTHS=`echo %MONTHS% | sed 's/_/ /g'`
set -A MON_IFS_ICON `echo %MON_IFS_ICON% | sed 's/_/ /g'`
iii=0
for month in ${MONTHS[*]} ; do
  if [[ ${YYYYMM} -eq ${month} ]]
  then
    echo "Calculate this month!"
    smsevent time_domonth
    if [[ ${MON_IFS_ICON[${iii}]} = 'ifs' ]]
    then
      INI_IFS_ICON=1
    else
      INI_IFS_ICON=2
    fi
  fi
  iii=`expr ${iii} + 1`
done


#-----------------------------------------------------------------------------

# calculate and format starting date of simulation: SMSDATE-  2 days, time: UTC 00 
#REQUEST_DATE=`python %SCBASEDIR%/gen/date_calc.py -a printdate -d %SMSDATE%00 -s 2`
INITIME=%YMD%%INIHOUR%
INITIME_FMT=`python %SCBASEDIR%/gen/date_calc.py -a printfmt -d %YMD%%INIHOUR%`
LASTIME_FMT=%LDATE_S%Z

if [[ %NENS% -gt 0 ]]
  then DIRENS=/%NMEM%
  else DIRENS=''
fi
if [[ %NENS% -gt 0 ]]
  then TXTENS=_%NMEM%
  else TXTENS=''
fi

# directory where the case setup is stored
SETDIRTMP=%SCTEMP%/%SUITE%/%EXPNUM%/output/setup${DIRENS}
# ifsdir for IFS initial condition
ifsdir=%SCTEMP%/%SUITE%/%EXPNUM%/input/%YMD%%INIHOUR%${DIRENS}
# base directory for external data
basedir=%SCPERM%
# base directory for time dependent external data SST ansd CI data
sstice_dir=%SCTEMP%/%SUITE%/%EXPNUM%/input/sstice
# base directory for model output
outbasedir=%SCTEMP%/%SUITE%/%EXPNUM%/output
# base name for output and namelist files
basename=%SUITE%_%EXPNUM%_%YMD%%INIHOUR%${TXTENS}
# icon-dev name
user_icon_dir=%USER_ICON_DIR%

res=%RES%
resrad=%RESRAD%


# -------------------------------------------------

export MP_WAIT_MODE=poll
export MP_LABELIO=yes
export MP_SHARED_MEMORY=yes
export MP_ADAPTER_USE=shared
export MP_INFOLEVEL=2
export XLFRTEOPTS=err_recovery=no

export ICON_THREADS=%ICONTHREADS%
export OMP_STACKSIZE=400M
export OMP_SCHEDULE="static"
export OMP_DYNAMIC="false"
export NC_BLOCKSIZE=128mb

export F_PROGINF=DETAIL

module unload netcdf
#module load netcdf4/4.1.2
module load netcdf4/4.3.2
#module load hdf5/1.8.13
#export HDF5_DISABLE_VERSION_CHECK=1   # 1: turn of HDF5 version check


# -------------------------------------------------

if [[ %ENABLE_DUMPSTATE% = 0 ]] ; then
  stage="total"
fi

# set the dump/restore flags according to the different phases.
if [[ "${stage}" = "dump" ]] ; then
    ldump_states=.TRUE.
    lrestore_states=.FALSE.
fi
if [[ "${stage}" = "run" ]] ; then
    ldump_states=.FALSE.
    lrestore_states=.TRUE.
fi
if [[ "${stage}" = "total" ]] ; then
    ldump_states=.FALSE.
    lrestore_states=.FALSE.
fi

# include experiment parameters

if [[ ${INI_IFS_ICON} -eq 1 ]] ; then   #IFS initial conditions
  . ${SETDIRTMP}/case_setup_ifs
else
  . ${SETDIRTMP}/case_setup_icon
fi

# copy binary and execute in parallel
cp -p ${outbasedir}/bin/icon ./icon.exe

###
#cp /scratch/ms/de/dfi0/output/exp_R02B06/icon ./icon.exe
#cp /scratch/ms/de/deia/icon/dei2/189/output/bin/icon ./icon.exe
###

arch=x86_64-unknown-linux-gnu

# copy binary alternatively from individual user - option 1 - automatic - applies to all runs
# cp -p /perm/ms/de/dei2/icon-nwp-dev/build/${arch}/bin/icon ./icon.exe

# copy binary alternatively from individual user - option 2 - by hand (replace expid XXX)
# cp /perm/ms/de/dei2/icon-nwp-dev/build/${arch}/bin/icon /scratch/ms/de/deia/icon/dei2/XXX/output/bin

echo "job::start"
date
export USE_SIGNAL_HANDLING=yes

debug=0
if [[ ${debug} = 1 ]] ; then                  # optional totalview debugging (max tasks: 256! better 64)
  export DISPLAY=ecaccess.ecmwf.int:1631.0    # open nxclient on cca and get DISPLAY
  totalview -searchpath='/perm/ms/de/dei2/icon-nwp-dev/src/atm_phy_edmf/,/perm/ms/de/dei2/icon-nwp-dev/src/lnd_phy_nwp/,/perm/ms/de/dei2/icon-nwp-dev/src/atm_phy_nwp/' \
    poe -a ./icon.exe
else
  export OMP_NUM_THREADS=$EC_threads_per_task
  export ATP_ENABLED=1               # for debugging with GNU compile with -fno-backtrace in mh-linux
 #export FOR_IGNORE_EXCEPTIONS=true  # for debugging with INTEL compiler
  export NETCDF4_LIB
  export NETCDF4_DIR
 #echo $NETCDF_LIB
  aprun -N $EC_tasks_per_node -n $EC_total_tasks -d $OMP_NUM_THREADS -j $EC_hyperthreads icon.exe
  # fractional job: 
  #module load cray-snplauncher
  #mpiexec -n $EC_total_tasks icon.exe
fi

echo "job::end"
date


# model run completed -------------------------
smsevent model_complete


# ---------------------------------------------

# include the "tail" file for remote jobs
%include <end_sc.h>


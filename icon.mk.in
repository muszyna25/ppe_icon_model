# Source file root directory:
srcdir= @srcdir@

# Source file subdirectories:
subdirs= src support
bundled_subdirs= @subdirs_extra@

# Installation directories:
prefix= @prefix@
exec_prefix= @exec_prefix@

# Fortran module file directory:
moddir= mod

# Compilers and flags:
CC= @CC@
CFLAGS= @CFLAGS@
LDFLAGS= @LDFLAGS@
LIBS= @LIBS@
CPPFLAGS= @CPPFLAGS@
FC= @FC@
FCFLAGS= @FCFLAGS@

# Extra compiler flags:
ICON_ANCIL_FCFLAGS= @FC_MOD_IN@$(moddir) @FC_MOD_OUT@$(moddir) -I$(srcdir)/src/include @BUNDLED_FCFLAGS@
ICON_ANCIL_CPPFLAGS= -I. @DEFS@
ICON_OPTIM_FCFLAGS= @ICON_OPTIM_FCFLAGS@
ICON_OPTIM_CFLAGS= @ICON_OPTIM_CFLAGS@
ICON_OPTIM_OCEAN_FCFLAGS= @ICON_OPTIM_OCEAN_FCFLAGS@
DEPGEN_FCFLAGS= @DEPGEN_FCFLAGS@

# Bundled libraries:
BUNDLED_LIBS= @BUNDLED_LIBS@

# Other utilities:
SHELL= /bin/sh
INSTALL= @INSTALL@
PYTHON= @PYTHON@
DEPLIST= $(PYTHON) $(srcdir)/utils/mkhelper/deplist.py
DEPGEN= $(PYTHON) $(srcdir)/utils/mkhelper/depgen.py
PERL= @PERL@

# Silent rule prefixes:
V= @DEFAULT_VERBOSITY@
ifeq ($(V), 0)
silent_FCLD=   @echo "  FCLD    " $@;
silent_FC=     @echo "  FC      " $@;
silent_CC=     @echo "  CC      " $@;
silent_GEN=    @echo "  GEN     " $@;
silent_MKDIR=  @echo "  MKDIR   " $(@D);
silent_DEPGEN= @echo "  DEPGEN  " $@;
endif

# Source files:
FC_srcs:= $(shell find $(addprefix $(srcdir)/, $(subdirs)) -name '*.f90')
C_srcs:= $(shell find $(addprefix $(srcdir)/, $(subdirs)) -name '*.c')

# Stamp files of the build directories:
dirstamps:= $(patsubst $(srcdir)/%, %.dirstamp, $(sort $(dir $(FC_srcs) $(C_srcs)))) $(moddir)/.dirstamp

# Dependency files:
depfiles:= $(patsubst $(srcdir)/%, %.d, $(FC_srcs) $(C_srcs))

# Default rule:
all: icon@EXEEXT@

# Additional rules for external packages that do not have their
# own building systems:
@JSBACH_ENABLED@include externals/jsbach.mk

# Root object file:
rootobj:= src/drivers/icon.@OBJEXT@

# Source file selective search paths:
vpath %.f90 $(srcdir)
vpath %.c $(srcdir)

# Disable built-in suffix rules:
.SUFFIXES:
# Targets not associated with files:
.PHONY: all depend mostlyclean clean distclean maintainer-clean install force-create-version
# Call make inside the subdirectories unconditionally:
.PHONY: $(bundled_subdirs)
# Keep directory stamps:
.PRECIOUS: $(dirstamps)

# User interface rules:
depend: $(depfiles)

mostlyclean: $(bundled_subdirs)
	rm -f icon@EXEEXT@ version.@OBJEXT@ $(patsubst $(srcdir)/%.c, %.@OBJEXT@, $(C_srcs)) $(patsubst $(srcdir)/%.f90, %.@OBJEXT@, $(FC_srcs)) $(patsubst %.f90, %.i, $(notdir $(FC_srcs))) $(moddir)/*.@FC_MOD_FILE_EXT@

clean: mostlyclean
	rm -f version.c srclist $(depfiles) $(dirstamps)

distclean: clean
	rm -f config.log config.status icon.mk config.h depgen.f90.config depgen.c.config
	find -name '*.pyc' -delete -o -name '*.pyo' -delete -o -name '__pycache__' -delete
	@for dir in $(subdirs) $(moddir) externals; do \
	  if test -d "$$dir"; then \
	    echo "find '$$dir' -type d -empty -delete"; \
	    find "$$dir" -type d -empty -delete; \
	  fi; \
	done

maintainer-clean: distclean
	rm -rf autom4te.cache config.h.in~

install: all
	$(INSTALL) -d $(DESTDIR)@bindir@ && $(INSTALL) icon@EXEEXT@ $(DESTDIR)@bindir@/icon@EXEEXT@

# Generate a list of files that are going to be compiled in the current configuration:
srclist: $(depfiles) $(extra_deps)
	$(silent_GEN)$(DEPLIST) -t $(rootobj) -p '*.f90' -p '*.c' -f $^ | sort > $@

# Main building rules:
icon@EXEEXT@: $(rootobj) $(shell $(DEPLIST) -t $(rootobj) -p '*.@OBJEXT@' --inc-oo -f $(depfiles) icon.mk) $(BUNDLED_LIBS)
	$(silent_FCLD) $(FC) -o $@ $(ICON_ANCIL_FCFLAGS) $(ICON_OPTIM_FCFLAGS) $(FCFLAGS) $(LDFLAGS) $^ $(LIBS)

%.@OBJEXT@: %.f90 | $(dirstamps) $(bundled_subdirs)
	$(silent_FC) $(FC) -o $@ -c $(ICON_ANCIL_FCFLAGS) $(ICON_OPTIM_FCFLAGS) $(FCFLAGS) @FCFLAGS_f90@ $<

%.@OBJEXT@: %.c | $(dirstamps)
	$(silent_CC) $(CC) -o $@ -c $(ICON_OPTIM_CFLAGS) $(CFLAGS) $(ICON_ANCIL_CPPFLAGS) $(CPPFLAGS) $<

# ICON-Ocean compilation rules:
src/hamocc/%.@OBJEXT@: src/hamocc/%.f90 | $(dirstamps) $(bundled_subdirs)
	$(silent_FC) $(FC) -o $@ -c $(ICON_ANCIL_FCFLAGS) $(ICON_OPTIM_OCEAN_FCFLAGS) $(FCFLAGS) @FCFLAGS_f90@ $<

src/ocean/%.@OBJEXT@: src/ocean/%.f90 | $(dirstamps) $(bundled_subdirs)
	$(silent_FC) $(FC) -o $@ -c $(ICON_ANCIL_FCFLAGS) $(ICON_OPTIM_OCEAN_FCFLAGS) $(FCFLAGS) @FCFLAGS_f90@ $<

src/sea_ice/%.@OBJEXT@: src/sea_ice/%.f90 | $(dirstamps) $(bundled_subdirs)
	$(silent_FC) $(FC) -o $@ -c $(ICON_ANCIL_FCFLAGS) $(ICON_OPTIM_OCEAN_FCFLAGS) $(FCFLAGS) @FCFLAGS_f90@ $<

# Fortran module file tracking rule:
$(moddir)/%.@FC_MOD_FILE_EXT@:
	@if test -z $<; then \
	  echo "Cannot find Fortran source file providing module '$(basename $(@F))'." >&2; \
	elif test ! -f $@; then \
	  rm -f $<; $(MAKE) $<; \
	fi

# Version source file generation rule:
version.c: force-create-version
	$(silent_GEN)$(PERL) $(srcdir)/utils/pvcs.pl --srcdir $(srcdir)

# Directory generation rule:
%/.dirstamp:
	$(silent_MKDIR)@MKDIR_P@ $(@D) && touch $@

# Dependency generation rules:
%.f90.d: %.f90 | $(dirstamps)
	$(silent_DEPGEN)$(DEPGEN) @depgen.f90.config -o $@ --obj-name $(@:.f90.d=.@OBJEXT@) $< -- $(DEPGEN_FCFLAGS) $(ICON_ANCIL_FCFLAGS) $(ICON_OPTIM_FCFLAGS) $(FCFLAGS)

%.c.d: %.c | $(dirstamps)
	$(silent_DEPGEN)$(DEPGEN) @depgen.c.config -o $@ --obj-name $(@:.c.d=.@OBJEXT@) $< -- $(ICON_OPTIM_CFLAGS) $(CFLAGS) $(ICON_ANCIL_CPPFLAGS) $(CPPFLAGS)

# ICON-Ocean dependency generation rules:
src/hamocc/%.f90.d: src/hamocc/%.f90 | $(dirstamps)
	$(silent_DEPGEN)$(DEPGEN) @depgen.f90.config -o $@ --obj-name $(@:.f90.d=.@OBJEXT@) $< -- $(DEPGEN_FCFLAGS) $(ICON_ANCIL_FCFLAGS) $(ICON_OPTIM_OCEAN_FCFLAGS) $(FCFLAGS)

src/ocean/%.f90.d: src/ocean/%.f90 | $(dirstamps)
	$(silent_DEPGEN)$(DEPGEN) @depgen.f90.config -o $@ --obj-name $(@:.f90.d=.@OBJEXT@) $< -- $(DEPGEN_FCFLAGS) $(ICON_ANCIL_FCFLAGS) $(ICON_OPTIM_OCEAN_FCFLAGS) $(FCFLAGS)

src/sea_ice/%.f90.d: src/sea_ice/%.f90 | $(dirstamps)
	$(silent_DEPGEN)$(DEPGEN) @depgen.f90.config -o $@ --obj-name $(@:.f90.d=.@OBJEXT@) $< -- $(DEPGEN_FCFLAGS) $(ICON_ANCIL_FCFLAGS) $(ICON_OPTIM_OCEAN_FCFLAGS) $(FCFLAGS)

$(depfiles): icon.mk

# Make bundled libraries:
$(bundled_subdirs):
	@if test -f '$@/Makefile'; then \
	  $(MAKE) -C $@ $(filter-out install, $(MAKECMDGOALS)) V=$(V); \
	else \
	  test xdistclean = x$(filter distclean, $(MAKECMDGOALS)); \
	fi

# Build the bundled mtime before the bundled yac
# (currently redundant since yac is a static library):
externals/yac: $(filter externals/mtime, $(bundled_subdirs))

$(BUNDLED_LIBS): $(bundled_subdirs);

# Fortran to C dependencies:
src/io/restart/mo_c_restart_util.@OBJEXT@:| support/util_multifile_restart.@OBJEXT@
src/io/shared/mo_util_file.@OBJEXT@:| support/util_file.@OBJEXT@
src/io/shared/mo_util_nml.@OBJEXT@:| support/nml_annotate.@OBJEXT@
src/shared/mo_expression.@OBJEXT@:| support/util_arithmetic_expr.@OBJEXT@
src/shared/mo_util_backtrace.@OBJEXT@:| support/util_backtrace.@OBJEXT@
src/shared/mo_util_hash.@OBJEXT@:| support/util_hash.@OBJEXT@
src/shared/mo_util_stride.@OBJEXT@:| support/util_stride.@OBJEXT@
src/shared/mo_util_string_parse.@OBJEXT@:| support/util_string_parse.@OBJEXT@
src/shared/mo_util_sysinfo.@OBJEXT@:| support/util_sysinfo.@OBJEXT@
src/shared/mo_util_system.@OBJEXT@:| support/util_system.@OBJEXT@
src/shared/mo_util_timer.@OBJEXT@:| support/util_timer.@OBJEXT@
src/shared/mo_util_uuid.@OBJEXT@:| support/util_uuid.@OBJEXT@
src/shared/mo_util_vcs.@OBJEXT@ src/art/shared/mo_art_util_vcs.@OBJEXT@:| version.@OBJEXT@

# Undetectable Fortran dependencies:
src/atm_chem_cariolle/lcariolle_do3dt.@OBJEXT@:|      \
  src/atm_chem_cariolle/lcariolle_o3_column.@OBJEXT@

src/atm_phy_echam/mo_echam_phy_init.@OBJEXT@:|          \
  src/atm_chem_cariolle/lcariolle_init.@OBJEXT@         \
  src/atm_chem_cariolle/lcariolle_init_o3.@OBJEXT@      \
  src/atm_chem_cariolle/lcariolle_lat_intp_li.@OBJEXT@  \
  src/atm_chem_cariolle/lcariolle_pres_intp_li.@OBJEXT@

src/atm_phy_echam/mo_interface_echam_car.@OBJEXT@:|     \
  src/atm_chem_cariolle/lcariolle_do3dt.@OBJEXT@        \
  src/atm_chem_cariolle/lcariolle_lat_intp_li.@OBJEXT@  \
  src/atm_chem_cariolle/lcariolle_pres_intp_li.@OBJEXT@

src/hamocc/icon_specific/bgc_icon.@OBJEXT@:| \
  src/hamocc/common/chemcon.@OBJEXT@         \
  src/hamocc/common/ocprod.@OBJEXT@          \
  src/hamocc/common/sedshi.@OBJEXT@          \
  src/hamocc/common/swr_absorption.@OBJEXT@

src/ocean/drivers/mo_hydro_ocean_run.@OBJEXT@:|  \
  src/hamocc/icon_specific/bgc_icon.@OBJEXT@     \
  src/hamocc/icon_specific/ini_bgc_icon.@OBJEXT@

ifeq (,$(filter $(MAKECMDGOALS), depend mostlyclean clean distclean maintainer-clean))
-include $(depfiles)
endif


# Path to the directory with the original source files:
srcdir:= @srcdir@

# Absolute path to the building directory:
builddir:= @abs_builddir@

# Relative paths to the directories with the ICON source code:
subdirs:= src support

# Relative paths to the directories of the bundled packages:
bundled_subdirs= @subdirs_extra@

# Relative path to the directory with the preprocessed source files:
ppdir:= pp

# Relative path to the directory with the Fortran module files:
moddir:= mod

# Paths to the installation directories:
prefix:= @prefix@
exec_prefix:= @exec_prefix@

# Prefix (absolute or relative path with respect to vpath) to the
# directories with Fortran source files (updated later if the files need to
# be preprocessed and therefore relocated to another directory):
f90_prefix:=

# Compilers and utilities:
SHELL= @SHELL@
CC= @CC@
FC= @FC@
PYTHON= @PYTHON@
PERL= @PERL@
DEPLIST= ${PYTHON} $(srcdir)/utils/mkhelper/deplist.py
DEPGEN= ${PYTHON} $(srcdir)/utils/mkhelper/depgen.py
MODCMP= ${PYTHON} $(srcdir)/utils/mkhelper/fortmodcmp.py
SB2PP= @SB2PP@
FPP= @FPP@
INSTALL= @INSTALL@
SED= @SED@

# Fortran compiler flags:
FCFLAGS= @FCFLAGS@
ICON_FCFLAGS= @ICON_FCFLAGS@
ICON_OCEAN_FCFLAGS= @ICON_OCEAN_FCFLAGS@
DEPGEN_FCFLAGS= @DEPGEN_FCFLAGS@

# C compiler and preprocessor flags:
CFLAGS= @CFLAGS@
ICON_CFLAGS= @ICON_CFLAGS@
CPPFLAGS= @CPPFLAGS@

# Compiler and preprocessor flags that must not be overloaded by the user:
makefile_FCFLAGS:= @FC_MOD_IN@$(moddir) @FC_MOD_OUT@$(moddir) @FC_INC_FLAG@$(srcdir)/src/include @FC_INC_FLAG_PP_f90@$(srcdir)/src/include
makefile_CPPFLAGS:= -I. @DEFS@

# Linker flags and libraries:
LDFLAGS= @LDFLAGS@
BUNDLED_LIBFILES= @BUNDLED_LIBFILES@
LIBS= @LIBS@

# Silent rule prefixes:
V= @DEFAULT_VERBOSITY@
ifeq ($(V),0)
silent_CC=      @echo "  CC      " $@;
silent_DEPGEN=  @echo "  DEPGEN  " $@;
silent_DSL4JSB= @echo "  DSL4JSB " $@;
silent_FC=      @echo "  FC      " $@;
silent_FCLD=    @echo "  FCLD    " $@;
silent_FPP=     @echo "  FPP     " $@;
silent_GEN=     @echo "  GEN     " $@;
silent_MKDIR=   @echo "  MKDIR   " $(@D);
silent_SB2=     @echo "  SB2PP   " $@;
endif

# Path suffixes (i.e. without $(src_root) prefix) of the source files and headers:
src_roots:= $(addprefix $(srcdir)/,$(subdirs))
f90_files:= $(patsubst $(srcdir)/%,%,$(shell find $(src_roots) -name '*.f90'))
# Files included with the Fortran preprocessor #include "filename.inc" directive:
inc_files:= $(patsubst $(srcdir)/%,%,$(shell find $(src_roots) -name '*.inc'))
# Files included with the Fortran INCLUDE "filename.incf" statement:
incf_files:= $(patsubst $(srcdir)/%,%,$(shell find $(src_roots) -name '*.incf'))
c_files:= $(patsubst $(srcdir)/%,%,$(shell find $(src_roots) -name '*.c'))

# Files that need to be transferred along with the source files because
# they are not accessible with the '@FC_INC_FLAG_PP_f90@' compiler flag:
inc_non_common_files:= $(filter-out src/include/%,$(inc_files))
inc_common_files:= $(filter-out $(inc_non_common_files),$(inc_files))

# Files that need to be transferred along with the source files because
# they are not accessible with the '@FC_INC_FLAG@' compiler flag:
incf_non_common_files:= $(filter-out src/include/%,$(incf_files))
incf_common_files:= $(filter-out $(incf_non_common_files),$(incf_files))

# List of preprocessed header and source files:
pp_files:=

# ART sources:
@ART_ENABLED@ART_srcdir:= $(srcdir)/externals/art
@ART_ENABLED@f90_files+= $(patsubst $(srcdir)/%,%,$(shell find $(ART_srcdir) -name '*.f90'))
@ART_ENABLED@inc_non_common_files+= $(patsubst $(srcdir)/%,%,$(shell find $(ART_srcdir) -name '*.inc'))
@ART_ENABLED@incf_non_common_files+= $(patsubst $(srcdir)/%,%,$(shell find $(ART_srcdir) -name '*.incf'))

# JSBACH preprocessing:
@JSBACH_ENABLED@JSB_srcdir:= $(srcdir)/externals/jsbach
@JSBACH_ENABLED@JSB_subdir:= $(ppdir)/jsb
@JSBACH_ENABLED@JSB_f90_files:= $(patsubst $(JSB_srcdir)/%,$(JSB_subdir)/%,$(shell find $(JSB_srcdir)/src -name '*.f90'))
@JSBACH_ENABLED@f90_files+= $(JSB_f90_files)
@JSBACH_ENABLED@pp_files+= $(JSB_f90_files)

# FPP preprocessing:
@FPP_ENABLED@FPP_subdir:= $(ppdir)/fpp
@FPP_ENABLED@FPP_f90_files:= $(addprefix $(FPP_subdir)/,$(f90_files))
@FPP_ENABLED@f90_files:= $(FPP_f90_files)
@FPP_ENABLED@f90_prefix:= $(FPP_subdir)/$(f90_prefix)
# FPP includes *.inc files into the source files:
@FPP_ENABLED@inc_non_common_files:=
@FPP_ENABLED@inc_common_files:=
# FPP (with a small exception for Cray compiler) does not include *.incf files into the source files.
@FPP_ENABLED@FPP_incf_files:= $(addprefix $(FPP_subdir)/,$(incf_non_common_files))
@FPP_ENABLED@incf_non_common_files:= $(FPP_incf_files)
@FPP_ENABLED@pp_files+= $(FPP_f90_files) $(FPP_incf_files)

# SERIALBOX2 preprocessing:
@SB2_ENABLED@SB2_subdir:= $(ppdir)/sb2
@SB2_ENABLED@SB2_f90_files:= $(addprefix $(SB2_subdir)/,$(f90_files))
@SB2_ENABLED@f90_files:= $(SB2_f90_files)
@SB2_ENABLED@f90_prefix:= $(SB2_subdir)/$(f90_prefix)
@SB2_ENABLED@SB2_inc_files:= $(addprefix $(SB2_subdir)/,$(inc_non_common_files))
@SB2_ENABLED@inc_non_common_files:= $(SB2_inc_files)
@SB2_ENABLED@SB2_incf_files:= $(addprefix $(SB2_subdir)/,$(incf_non_common_files))
@SB2_ENABLED@incf_non_common_files:= $(SB2_incf_files)
# Take care of the common *.inc files if required:
@SB2_ENABLED@inc_common_files:= $(addprefix $(SB2_subdir)/,$(inc_common_files))
@SB2_ENABLED@SB2_inc_files+= $(inc_common_files)
# Prepend makefile_FCFLAGS with the flag adding the path to the transferred *.inc
# files if required. Note that we do need SB2_extra_FCFLAGS because @FC_INC_FLAG_PP_f90@
# might contain a comma, which would break the syntax of the $(if) function:
@SB2_ENABLED@SB2_tmp_FCFLAGS:= @FC_INC_FLAG_PP_f90@$(builddir)/$(SB2_subdir)/src/include
@SB2_ENABLED@makefile_FCFLAGS:= $(if $(inc_common_files),$(SB2_tmp_FCFLAGS)) $(makefile_FCFLAGS)
@SB2_ENABLED@pp_files+= $(SB2_f90_files) $(SB2_inc_files) $(SB2_incf_files)

# We need to make sure that we compile the preprocessed sources from
# the current building directory but not from the possibly "dirty"
# source directory. Therefore, we prepend the absolute paths to the
# paths that start with $(ppdir):
f90_files:= $(patsubst $(ppdir)/%,$(builddir)/$(ppdir)/%,$(f90_files))
f90_prefix:= $(patsubst $(ppdir)/%,$(builddir)/$(ppdir)/%,$(f90_prefix))
pp_files:= $(addprefix $(builddir)/,$(pp_files))

# Dependency files:
dep_files:= $(addsuffix .d,$(f90_files) $(c_files)) c_binding.d extra_f90.d

# Stamp files of the building subdirectories:
dir_files= $(filter-out ./.dirstamp,$(addsuffix .dirstamp,$(sort $(dir $(dep_files) $(pp_files)))) $(moddir)/.dirstamp)

# Root ICON object file:
ICON_obj_file= $(f90_prefix)src/drivers/icon.@OBJEXT@

# Selective search paths:
vpath %.f90 $(srcdir)
vpath %.inc $(srcdir)
vpath %.incf $(srcdir)
vpath %.c $(srcdir)

# Disable built-in suffix rules:
.SUFFIXES:
# Targets not associated with files:
.PHONY: all depend dummy-depend preprocess mostlyclean clean \
        distclean maintainer-clean install check force-create-version \
        sanitize-mod-proxies
# Targets that do not need the inclusion of the dependency files:
NO_INC_TARGETS:= depend dummy-depend preprocess mostlyclean clean \
                 distclean maintainer-clean
# Call make inside the subdirectories unconditionally:
.PHONY: $(bundled_subdirs)
# Keep directory stamps:
.PRECIOUS: $(dir_files)
# Delete preprocessed files on error:
.DELETE_ON_ERROR: $(pp_files)

# Default rule:
all: icon@EXEEXT@

# Explicit dependency generation rule:
depend: $(dep_files)

# Explicit preprocessing rule:
preprocess: $(pp_files)

# Delete the results of compilation and linking:
mostlyclean: $(bundled_subdirs)
	rm -f icon@EXEEXT@ $(addsuffix .@OBJEXT@,$(basename $(f90_files) $(c_files))) version.@OBJEXT@
	rm -f $(moddir)/*.@FC_MOD_FILE_EXT@ $(moddir)/*.@FC_MOD_FILE_EXT@.proxy
	rm -f $(notdir $(f90_files:.f90=.i))
	rm -rf icon@EXEEXT@.dSYM

# Delete files generated at the building stage (Python cache files are
# generated in the source directory, we delete them only if are not
# building out-of-source):
clean: mostlyclean
	rm -f srclist $(pp_files) version.c
	find . -name '*.pyc' -delete -o -name '*.pyo' -delete -o -name '__pycache__' -delete

# Delete everything generated at the configure stage (and clean the created directories if they are empty):
distclean: clean
	rm -f config.h config.log config.status depgen.c.config depgen.f90.config
	rm -f config/create_target_header config/make_target_runscript make_runscripts run/add_run_routines run/exec.iconrun
	rm -f $(dep_files)
	rm -f $(dir_files)
	@for dir in $(subdirs) $(moddir) $(ppdir) externals config run; do \
          if test -d "$$dir"; then \
            echo "find '$$dir' -type d -empty -delete"; \
            find "$$dir" -type d -empty -delete; \
          fi; \
	done
	rm -f icon.mk

# Delete files generated at the autoreconf stage:
maintainer-clean: distclean
	rm -rf autom4te.cache config.h.in~

# Installation rule:
install: all
	$(INSTALL) -d $(DESTDIR)@bindir@ && $(INSTALL) icon@EXEEXT@ $(DESTDIR)@bindir@/icon@EXEEXT@

# Generate a list of files that are going to be compiled in the current configuration:
srclist: $(dep_files)
	$(silent_GEN)$(DEPLIST) -t $(ICON_obj_file) -p '*.f90' -p '*.c' -p '*.inc' -p '*.incf' -p '*.h' --inc-oo -f $^ | sort > $@

# Check rule (run the tests serially to make the output
# readable and prevent from possible overloading due to
# multiple MPI runs):
check: all
	@fail=; pass=; \
	for d in $(bundled_subdirs); do \
	  if $(MAKE) -C "$$d" check V=$(V); then pass="$$pass$$d "; \
	  else fail="$$fail$$d "; fi; \
	done; \
	echo "PASS: $$pass"; echo "FAIL: $$fail"; \
	test -z "$$fail"

# ICON executable linking rule:
icon@EXEEXT@: $(ICON_obj_file) $(shell $(DEPLIST) -t $(ICON_obj_file) -p '*.@OBJEXT@' --inc-oo -f $(dep_files)) $(BUNDLED_LIBFILES)
	$(silent_FCLD)$(FC) -o $@ $(makefile_FCFLAGS) $(FCFLAGS) $(ICON_FCFLAGS) $(LDFLAGS) $^ $(LIBS)

# Default Fortran compilation rule:
%.@OBJEXT@: %.f90 | $(dir_files) $(bundled_subdirs)
	$(silent_FC)$(FC) -o $@ -c $(makefile_FCFLAGS) $(FCFLAGS) $(ICON_FCFLAGS) @FCFLAGS_f90@ $<

# Default C compilation rule:
%.@OBJEXT@: %.c | $(dir_files)
	$(silent_CC)$(CC) -o $@ -c $(CFLAGS) $(ICON_CFLAGS) $(makefile_CPPFLAGS) $(CPPFLAGS) $<

# ICON-Ocean Fortran compilation rules:
ICON_OCEAN_FC= $(silent_FC)$(FC) -o $@ -c $(makefile_FCFLAGS) $(FCFLAGS) $(ICON_OCEAN_FCFLAGS) @FCFLAGS_f90@ $<

$(f90_prefix)src/hamocc/%.@OBJEXT@: $(f90_prefix)src/hamocc/%.f90 | $(dir_files) $(bundled_subdirs)
	$(ICON_OCEAN_FC)

$(f90_prefix)src/ocean/%.@OBJEXT@: $(f90_prefix)src/ocean/%.f90 | $(dir_files) $(bundled_subdirs)
	$(ICON_OCEAN_FC)

$(f90_prefix)src/sea_ice/%.@OBJEXT@: $(f90_prefix)src/sea_ice/%.f90 | $(dir_files) $(bundled_subdirs)
	$(ICON_OCEAN_FC)

# Delete all Fortran module proxy files that do not have an existing module to
# be a proxy of, i.e. if <filename>.proxy exists but <filename> does not,
# delete <filename>.proxy:
sanitize-mod-proxies:
	@rm -f $(filter-out $(addsuffix .proxy,$(wildcard $(moddir)/*.@FC_MOD_FILE_EXT@)),$(wildcard $(moddir)/*.@FC_MOD_FILE_EXT@.proxy))

# Fortran module file tracking rule:
$(moddir)/%.@FC_MOD_FILE_EXT@.proxy:| sanitize-mod-proxies
	@if test -z '$<'; then \
	  echo "Cannot find Fortran source file providing module '$(basename $(@F:.proxy=))'." >&2; \
	else \
	  if test ! -f '$(@:.proxy=)'; then rm -f '$<'; $(MAKE) -f icon.mk '$<'; fi; \
	  if cmp '$@' '$(@:.proxy=)' >/dev/null 2>&1 || $(MODCMP) '$@' '$(@:.proxy=)' @FC_VENDOR@ 2>/dev/null; then :; \
	  else cp '$(@:.proxy=)' '$@' 2>/dev/null; fi; \
	fi

# JSBACH dsl->f90 rule:
@JSBACH_ENABLED@$(builddir)/$(JSB_subdir)/%.f90: $(JSB_srcdir)/%.f90 | $(dir_files)
@JSBACH_ENABLED@	$(silent_DSL4JSB)$(PYTHON) $(JSB_srcdir)/scripts/dsl4jsb/dsl4jsb.py -i $< -o $@

# Default FPP f90->f90 rule for the original files:
@FPP_ENABLED@$(builddir)/$(FPP_subdir)/%.f90: %.f90 | $(builddir)/$(FPP_incf_files) $(dir_files)
@FPP_ENABLED@	$(silent_FPP)$(FPP) $(makefile_FCFLAGS) $(FCFLAGS) $(ICON_FCFLAGS) $< >$@

# Default FPP f90->f90 rule for the files preprocessed at the
# previous preprocessing step:
@FPP_ENABLED@$(builddir)/$(FPP_subdir)/$(ppdir)/%.f90: $(builddir)/$(ppdir)/%.f90 | $(builddir)/$(FPP_incf_files) $(dir_files)
@FPP_ENABLED@	$(silent_FPP)$(FPP) $(makefile_FCFLAGS) $(FCFLAGS) $(ICON_FCFLAGS) $< >$@

# ICON-Ocean FPP f90->f90 rules for the original files:
@FPP_ENABLED@ICON_OCEAN_FPP= $(silent_FPP)$(FPP) $(makefile_FCFLAGS) $(FCFLAGS) $(ICON_OCEAN_FCFLAGS) $< >$@

@FPP_ENABLED@$(builddir)/$(FPP_subdir)/src/hamocc/%.f90: src/hammoc/%.f90 | $(builddir)/$(FPP_incf_files) $(dir_files)
@FPP_ENABLED@	$(ICON_OCEAN_FPP)

@FPP_ENABLED@$(builddir)/$(FPP_subdir)/src/ocean/%.f90: src/ocean/%.f90 | $(builddir)/$(FPP_incf_files) $(dir_files)
@FPP_ENABLED@	$(ICON_OCEAN_FPP)

@FPP_ENABLED@$(builddir)/$(FPP_subdir)/src/sea_ice/%.f90: src/sea_ice/%.f90 | $(builddir)/$(FPP_incf_files) $(dir_files)
@FPP_ENABLED@	$(ICON_OCEAN_FPP)

# There is currently no need to introduce ICON-Ocean FPP rules
# for the files preprocessed at the previous preprocessing step.

# FPP incf->incf rule:
@FPP_ENABLED@$(builddir)/$(FPP_subdir)/%.incf: %.incf | $(dir_files)
@FPP_ENABLED@	$(silent_FPP)cp $< $@

# SERIALBOX2 f90->f90 rule for the original files:
@SB2_ENABLED@$(builddir)/$(SB2_subdir)/%.f90: %.f90  | $(dir_files)
@SB2_ENABLED@	$(silent_SB2)$(SB2PP) -o $@ $< >/dev/null

# SERIALBOX2 f90->f90 rule for the files preprocessed at the
# previous preprocessing step:
@SB2_ENABLED@$(builddir)/$(SB2_subdir)/$(ppdir)/%.f90: $(builddir)/$(ppdir)/%.f90 | $(dir_files)
@SB2_ENABLED@	$(silent_SB2)$(SB2PP) -o $@ $< >/dev/null

# SERIALBOX2 inc->inc rule for the original files:
@SB2_ENABLED@$(builddir)/$(SB2_subdir)/%.inc: %.inc | $(dir_files)
@SB2_ENABLED@	$(silent_SB2)$(SB2PP) -o $@ $< >/dev/null

# SERIALBOX2 incf->incf rule for the original files:
@SB2_ENABLED@$(builddir)/$(SB2_subdir)/%.incf: %.incf | $(dir_files)
@SB2_ENABLED@	$(silent_SB2)cp $< $@

# SERIALBOX2 incf->incf rule for the files preprocessed at the
# previous preprocessing step:
@SB2_ENABLED@$(builddir)/$(SB2_subdir)/$(ppdir)/%.incf: $(builddir)/$(ppdir)/%.incf | $(dir_files)
@SB2_ENABLED@	$(silent_SB2)cp $< $@

# Version source file generation rule:
version.c: force-create-version
	$(silent_GEN)$(PERL) $(srcdir)/utils/pvcs.pl --srcdir $(srcdir)

# Directory creation rule:
%/.dirstamp:
	$(silent_MKDIR)@MKDIR_P@ $(@D) && touch $@

# Default Fortran dependency generation rule:
%.f90.d: %.f90 icon.mk | preprocess $(dir_files)
	$(silent_DEPGEN)$(DEPGEN) @depgen.f90.config -o $@ --obj-name $(@:.f90.d=.@OBJEXT@) -i $< -- $(DEPGEN_FCFLAGS) $(makefile_FCFLAGS) $(FCFLAGS) $(ICON_FCFLAGS)

# Default C dependency generation rule:
%.c.d: %.c icon.mk | $(dir_files)
	$(silent_DEPGEN)$(DEPGEN) @depgen.c.config -o $@ --obj-name $(@:.c.d=.@OBJEXT@) -i $< -- $(CFLAGS) $(ICON_CFLAGS) $(makefile_CPPFLAGS) $(CPPFLAGS)

# ICON-Ocean Fortran dependency generation rules:
ICON_OCEAN_DEPGEN= $(silent_DEPGEN)$(DEPGEN) @depgen.f90.config -o $@ --obj-name $(@:.f90.d=.@OBJEXT@) -i $< -- $(DEPGEN_FCFLAGS) $(makefile_FCFLAGS) $(FCFLAGS) $(ICON_OCEAN_FCFLAGS)

$(f90_prefix)src/hamocc/%.f90.d: $(f90_prefix)src/hamocc/%.f90 icon.mk | preprocess $(dir_files)
	$(ICON_OCEAN_DEPGEN)

$(f90_prefix)src/ocean/%.f90.d: $(f90_prefix)src/ocean/%.f90 icon.mk | preprocess $(dir_files)
	$(ICON_OCEAN_DEPGEN)

$(f90_prefix)src/sea_ice/%.f90.d: $(f90_prefix)src/sea_ice/%.f90 icon.mk | preprocess $(dir_files)
	$(ICON_OCEAN_DEPGEN)

# Dependency generation rule for Fortran-to-C bindings:
c_binding.d: icon.mk
	$(silent_DEPGEN)echo '$(f90_prefix)src/io/restart/mo_c_restart_util.@OBJEXT@:| support/util_multifile_restart.@OBJEXT@' > $@; \
	echo '$(f90_prefix)src/io/shared/mo_util_file.@OBJEXT@:| support/util_file.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/io/shared/mo_util_nml.@OBJEXT@:| support/nml_annotate.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_expression.@OBJEXT@:| support/util_arithmetic_expr.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_util_backtrace.@OBJEXT@:| support/util_backtrace.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_util_hash.@OBJEXT@:| support/util_hash.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_util_stride.@OBJEXT@:| support/util_stride.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_util_string_parse.@OBJEXT@:| support/util_string_parse.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_util_sysinfo.@OBJEXT@:| support/util_sysinfo.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_util_system.@OBJEXT@:| support/util_system.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_util_timer.@OBJEXT@:| support/util_timer.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_util_uuid.@OBJEXT@:| support/util_uuid.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/shared/mo_util_vcs.@OBJEXT@:| version.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/art/shared/mo_art_util_vcs.@OBJEXT@:| version.@OBJEXT@' >> $@;

# Dependency generation rule for undetectable Fortran dependencies:
extra_f90.d: icon.mk
	$(silent_DEPGEN)echo '$(f90_prefix)src/atm_chem_cariolle/lcariolle_do3dt.@OBJEXT@:| $(f90_prefix)src/atm_chem_cariolle/lcariolle_o3_column.@OBJEXT@' > $@; \
	echo '$(f90_prefix)src/atm_phy_echam/mo_echam_phy_init.@OBJEXT@:| $(f90_prefix)src/atm_chem_cariolle/lcariolle_init.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/atm_phy_echam/mo_echam_phy_init.@OBJEXT@:| $(f90_prefix)src/atm_chem_cariolle/lcariolle_init_o3.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/atm_phy_echam/mo_interface_echam_car.@OBJEXT@:| $(f90_prefix)src/atm_chem_cariolle/lcariolle_do3dt.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/atm_phy_echam/mo_interface_echam_car.@OBJEXT@:| $(f90_prefix)src/atm_chem_cariolle/lcariolle_lat_intp_li.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/atm_phy_echam/mo_interface_echam_car.@OBJEXT@:| $(f90_prefix)src/atm_chem_cariolle/lcariolle_pres_intp_li.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/hamocc/icon_specific/bgc_icon.@OBJEXT@:| $(f90_prefix)src/hamocc/common/chemcon.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/hamocc/icon_specific/bgc_icon.@OBJEXT@:| $(f90_prefix)src/hamocc/common/ocprod.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/hamocc/icon_specific/bgc_icon.@OBJEXT@:| $(f90_prefix)src/hamocc/common/sedshi.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/hamocc/icon_specific/bgc_icon.@OBJEXT@:| $(f90_prefix)src/hamocc/common/swr_absorption.@OBJEXT@' >> $@; \
	echo '$(f90_prefix)src/hamocc/icon_specific/mo_hamocc_ocean_physics.@OBJEXT@:| $(f90_prefix)src/hamocc/icon_specific/bgc_icon.@OBJEXT@' >> $@;

# Make bundled libraries:
$(bundled_subdirs):
	@if test -f '$@/Makefile'; then \
	  $(MAKE) -C $@ $(filter all mostlyclean clean distclean,$(MAKECMDGOALS)) V=$(V); \
	else \
	  test xdistclean = x$(filter distclean,$(MAKECMDGOALS)); \
	fi

# Build the bundled mtime before the bundled yac:
externals/yac: $(filter externals/mtime,$(bundled_subdirs))

# Relink ICON executable if any of the source files of the bundled libraries
# is updated (the semicolon is required to support parallel rebuild):
$(BUNDLED_LIBFILES): $(bundled_subdirs);

# Dummy dependency file generation rule (called by config.status): 
dummy-depend: | $(dir_files)
	@for file in $(dep_files); do \
	  test -e "$$file" || touch "$$file"; \
	done

current_targets:= $(strip $(MAKECMDGOALS))
ifeq (,$(current_targets))
current_targets:= all
endif

ifneq (,$(filter-out $(NO_INC_TARGETS),$(current_targets)))
include $(dep_files)
endif


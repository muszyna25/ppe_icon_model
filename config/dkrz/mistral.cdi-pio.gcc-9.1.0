#!/bin/bash

set -eu

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../.."; pwd)

MODULES='gcc/9.1.0-gcc-7.1.0 openmpi/2.0.2p2-gcc-9.1.0'

HDF5_ROOT="/sw/spack-rhel6/hdf5-1.10.7-7xm52s"
HDF5_LIBS='-lhdf5'

# We still need NetCDF-C for YAC:
NETCDF_ROOT="/sw/spack-rhel6/netcdf-c-4.7.4-5x2f4l"
NETCDF_LIBS='-lnetcdf'

NETCDFF_ROOT="/sw/spack-rhel6/netcdf-fortran-4.5.3-5qv6xt"
NETCDFF_LIBS='-lnetcdff'

ECCODES_ROOT='/work/k20200/sw-spack/linux-rhel6-haswell/gcc-9.1.0/eccodes-2.18.0-mreiwbbwhp2h2brrtn4kciiyr2dq5ms3'
ECCODES_LIBS='-leccodes'

YAXT_ROOT='/work/k20200/sw-spack/linux-rhel6-haswell/gcc-9.1.0/yaxt-0.9.0-pdmzmtf7z547akrmhctamwks53lzugwy'
YAXT_LIBS='-lyaxt -lyaxt_c'

CDI_ROOT='/work/k20200/sw-spack/linux-rhel6-haswell/gcc-9.1.0/libcdi-pio-master-x6mlw5awbimn4y6nhlm6sbt53b7ce6j6'
CDI_LIBS='-lcdi_f2003 -lcdipio -lcdi'

MKL_ROOT="/sw/rhel6-x64/intel/intel-18.0.4/mkl"
MKL_LIBS='-lmkl_gf_lp64 -lmkl_sequential -lmkl_core'
MKL_LDFLAGS="-L${MKL_ROOT}/lib/intel64"

XML2_ROOT='/usr'
XML2_LIBS='-lxml2'

################################################################################

BUILD_ENV=". /sw/rhel6-x64/etc/profile.mistral; module use /sw/spack-rhel6/spack/modules/linux-rhel6-haswell ; . \"${SCRIPT_DIR}/module_switcher\"; switch_for_module ${MODULES}; export LD_LIBRARY_PATH=\"${HDF5_ROOT}/lib:${NETCDF_ROOT}/lib:${NETCDFF_ROOT}/lib:${YAXT_ROOT}/lib:${CDI_ROOT}/lib:${MKL_ROOT}/lib/intel64:\${LD_LIBRARY_PATH}\";"

CC='mpicc'
CFLAGS='-O2'
CPPFLAGS="-I${HDF5_ROOT}/include -I${NETCDF_ROOT}/include -I${YAXT_ROOT}/include -I${XML2_ROOT}/include/libxml2"

FC='mpif90'
FCFLAGS="-I${NETCDFF_ROOT}/include -I${YAXT_ROOT}/include -I${CDI_ROOT}/include -march=native  -std=f2008 -fmodule-private -fimplicit-none -fmax-identifier-length=63 -Wall -Wcharacter-truncation -Wconversion -Wunderflow -Wunused-parameter -Wno-surprising -fall-intrinsics -mpc64"

ICON_FCFLAGS='-fbacktrace -fbounds-check -fstack-protector-all -finit-real=nan -finit-integer=-2147483648 -finit-character=127 -O2'
ICON_OCEAN_FCFLAGS='-O3'
ICON_CFLAGS='-O3'
ICON_BUNDLED_CFLAGS='-O2'


LDFLAGS="-L${HDF5_ROOT}/lib -L${NETCDF_ROOT}/lib -L${NETCDFF_ROOT}/lib -L${YAXT_ROOT}/lib -L${CDI_ROOT}/lib ${MKL_LDFLAGS}"
LIBS="-Wl,--as-needed ${XML2_LIBS} ${CDI_LIBS} ${YAXT_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS} ${MKL_LIBS}"

MPI_LAUNCH='mpiexec'

EXTRA_CONFIG_ARGS='--enable-parallel-netcdf --enable-cdi-pio --with-external-yaxt --with-external-cdi'

################################################################################

"${ICON_DIR}/configure" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
ICON_FCFLAGS="${ICON_FCFLAGS}" \
ICON_CFLAGS="${ICON_CFLAGS}" \
ICON_OCEAN_FCFLAGS="${ICON_OCEAN_FCFLAGS}" \
ICON_BUNDLED_CFLAGS="${ICON_BUNDLED_CFLAGS}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
MPI_LAUNCH="${MPI_LAUNCH}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*'
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi


#!/bin/bash

set -eu

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../.."; pwd)

MODULES='gcc/6.4.0 intel/18.0.4 openmpi/2.0.2p1_hpcx-intel14'

SW_ROOT='/sw/rhel6-x64'

HDF5_ROOT="${SW_ROOT}/hdf5/hdf5-1.8.18-parallel-openmpi2-intel14"
HDF5_LIBS='-lhdf5'

# We still need NetCDF-C for YAC:
NETCDF_ROOT="${SW_ROOT}/netcdf/netcdf_c-4.4.0-parallel-openmpi2-intel14"
NETCDF_LIBS='-lnetcdf'

NETCDFF_ROOT="${SW_ROOT}/netcdf/netcdf_fortran-4.4.3-parallel-openmpi2-intel14"
NETCDFF_LIBS='-lnetcdff'

YAXT_ROOT='/work/k20200/k202061/icon-cdi-pio/long_yaxt-openmpi'
YAXT_LIBS='-lyaxt'

CDI_ROOT='/work/k20200/k202061/cdipio-for-ralf/cdi-pio'
CDI_LIBS='-lcdi_f2003 -lcdipio -lcdi'

MKL_LDFLAGS='-mkl=sequential'

XML2_ROOT='/usr'
XML2_LIBS='-lxml2'

################################################################################

AR='xiar'

BUILD_ENV=". /sw/rhel6-x64/etc/profile.mistral; . \"${SCRIPT_DIR}/module_switcher\"; switch_for_module ${MODULES}; export LD_LIBRARY_PATH=\"${HDF5_ROOT}/lib:${NETCDF_ROOT}/lib:${NETCDFF_ROOT}/lib:${YAXT_ROOT}/lib:${CDI_ROOT}/lib:\${LD_LIBRARY_PATH}\";"

CC='mpicc'
CFLAGS='-gdwarf-4 -O3 -qno-opt-dynamic-align -ftz -march=native -g'
CPPFLAGS="-I${HDF5_ROOT}/include -I${NETCDF_ROOT}/include -I${XML2_ROOT}/include/libxml2"

FC='mpif90'
FCFLAGS="-I${NETCDFF_ROOT}/include -I${YAXT_ROOT}/include -I${CDI_ROOT}/include -gdwarf-4 -g -march=native -pc64 -fp-model source"
ICON_FCFLAGS='-O2 -assume realloc_lhs -ftz'
ICON_OCEAN_FCFLAGS='-O3 -assume norealloc_lhs -reentrancy threaded -qopt-report-file=stdout -qopt-report=0 -qopt-report-phase=vec'

LDFLAGS="-L${HDF5_ROOT}/lib -L${NETCDF_ROOT}/lib -L${NETCDFF_ROOT}/lib -L${YAXT_ROOT}/lib -L${CDI_ROOT}/lib ${MKL_LDFLAGS}"
LIBS="-Wl,--as-needed ${XML2_LIBS} ${CDI_LIBS} ${YAXT_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS}"

MPI_LAUNCH='mpiexec'

EXTRA_CONFIG_ARGS='--enable-intel-consistency --enable-vectorized-lrtm --enable-parallel-netcdf --enable-cdi-pio --with-external-yaxt --with-external-cdi'

################################################################################

"${ICON_DIR}/configure" \
AR="${AR}" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
ICON_FCFLAGS="${ICON_FCFLAGS}" \
ICON_OCEAN_FCFLAGS="${ICON_OCEAN_FCFLAGS}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
MPI_LAUNCH="${MPI_LAUNCH}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*in' --exclude='.*'
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi


#! /bin/bash
#______________________________________________________________________________
#
# This script makes finally the run scripts
#
# Original version by Leonidas Linardakis, MPI-M, 2010-11-22
#______________________________________________________________________________

set -eu

typeset -a free_variable
typeset -a free_variable_value
typeset -i no_of_free_variables
no_of_free_variables=0

use_mpi=""
use_openmp=""
use_cpu_time=""
use_mpi_procs_pernode=""
use_nproma=""
use_openmp_threads=""
use_omp_stacksize=""
use_resources=""
use_memory_model=""
use_memory=""
use_node_usage=""
use_nodes=""
use_account_no=""
use_queue=""
output_name=""
input_name=""
job_name=""
input_folder=""
output_folder=""
use_shell=""

IFS=" ="

eval_argument ()
{
    case $1 in
        "with_mpi")          use_mpi=$2 ;;
        "with_openmp")       use_openmp=$2 ;;
        "cpu_time")          use_cpu_time=$2 ;;
        "mpi_procs_pernode") use_mpi_procs_pernode=$2 ;;
        "nproma")            use_nproma=$2 ;;
        "openmp_threads")    use_openmp_threads=$2 ;;
        "omp_stacksize")     use_omp_stacksize=$2 ;;
        "resources")         use_resources=$2 ;;
        "memory_model")      use_memory_model=$2 ;;
        "memory")            use_memory=$2 ;;
        "node_usage")        use_node_usage=$2 ;;
        "no_of_nodes")       use_nodes=$2 ;;
        "account_no")        use_account_no=$2 ;;
        "queue")             use_queue=$2 ;;
        "out_script")        output_name=$2 ;;
        "in_script")         input_name="$input_name $2" ;;
        "job_name")          job_name="$2" ;;
        "in_folder")         input_folder=$2 ;;
        "out_folder")        output_folder=$2 ;;
        "with_shell")        use_shell=$2 ;;
        *)
            ((no_of_free_variables+=1))
            free_variable[$no_of_free_variables]=$1
            free_variable_value[$no_of_free_variables]=$2
    esac
    input_name="${input_name#"${input_name%%[![:space:]]*}"}"
}

#______________________________________________________________________________
# main program

call_folder=$(pwd)
cd $(dirname $0)
this_folder=$(pwd)
base_folder=${this_folder%/*}

# initialize "use_..." variables, which characterize the target
# system, with values stored up by the "configure" script in
# set-up.info

source $base_folder/config/set-up.info

# now use arguments passed to make_target_runscript to adjust
# "use_..." variables echo "Arguments for make_target_runscript:"

for arg
do
    eval_argument $arg
done

if [[ "x$input_name" == "x" ]] ; then
  echo "[ERROR] Specify in_script=<name>."
  exit -1
fi

first_name=${input_name%% *}
output_name=${output_name:="$first_name.run"}
run_folder=${input_folder:=run}
output_local_folder=${output_folder:=$input_folder}
output_folder="$base_folder/$output_local_folder"
output_script="$output_folder/$output_name"

if [[ ! -d $output_folder ]] ; then
  mkdir $output_folder
fi

job_name=${job_name:=$output_name}

echo -n "Creating the run script  $output_script ... "

# source the script create_target_header to define the shell function create_target_header
source $base_folder/config/create_target_header

# execute the shell function create_target_header to create the header
create_target_header

# add the script for the experiment and the execution:
input_script=$base_folder/$input_folder/$input_name
for in_name in $input_name
do
  cat_file=$base_folder/$input_folder/$in_name
  if [[ ! -f $cat_file ]] ; then
    echo "[ERROR] script $cat_file not found"
    exit 1
  fi
  cat $cat_file >> $output_script
done

chmod +x $output_script

echo "done."

cd $call_folder

exit 0
#______________________________________________________________________________

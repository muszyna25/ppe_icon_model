#!/bin/bash

set -eu

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../.."; pwd)

ml use $OTHERSTAGES
ml Stages/Devel-2020

MODULES='NVHPC/20.11-GCC-9.3.0 OpenMPI UCX/1.9.0 netCDF-Fortran Java'

ECCODES_ROOT="/p/project/highresmonsoon/ICON"
ECCODES_LIBS='-leccodes'

XML2_LIBS='-lxml2'
BLAS_LAPACK_LIBS='-llapack -lblas'

#SERIALBOX2_ROOT='/project/d56/install/daint/serialbox2/2.6.0/pgi/20.1.0'
#SERIALBOX2_LIBS='-lSerialboxFortran'

# The rest of libraries required by CUDA will be provided by PGI compiler:
STDCPP_LIBS='-lstdc++'

################################################################################

BUILD_ENV="module use ${OTHERSTAGES}; module load Stages/Devel-2020; module load ${MODULES}; module list; export LD_LIBRARY_PATH=\"${ECCODES_ROOT}/lib64:${ECCODES_ROOT}/lib:\${LD_LIBRARY_PATH}\";"

# We need some of the environment variables set by the modules now:
eval "$BUILD_ENV"

CC='mpicc'
CFLAGS='-g -O2'
CPPFLAGS="-I${ECCODES_ROOT}/include"

FC='mpif90'
FCFLAGS="-g -O2 -Mrecursive -Mallocatable=03 -acc=verystrict -ta=nvidia:cc80 -Minfo=accel,inline -D__SWAPDIM -D__USE_G2G -I${EBROOTNETCDFMINFORTRAN}/include "
# -I${SERIALBOX2_ROOT}/include

LDFLAGS="-L${ECCODES_ROOT}/lib64 -L${ECCODES_ROOT}/lib"
#-L${SERIALBOX2_ROOT}/lib

# ICON executable will be linked to /opt/cray/pe/lib64/libmpichf90_pgi.so.3,
# which depends on libomptarget.so but doesn't have an RPATH to it. For this
# reason, it becomes impossible to run the executable without setting
# LD_LIBRARY_PATH in advance (e.g. by loading an environment module). To solve
# this issue, we overlink to libomptarget.so so that it can be found through
# RPATH entries of the executable, which are injected by the compiler.
#LIBS="-L/opt/pgi/20.1.1/linux86-64-llvm/20.1/lib/libomp -lomptarget -Wl,--as-needed ${XML2_LIBS} ${BLAS_LAPACK_LIBS} ${SERIALBOX2_LIBS} ${STDCPP_LIBS}"
LIBS="${XML2_LIBS} ${BLAS_LAPACK_LIBS} ${STDCPP_LIBS} -lcudart -leccodes -laec -lnetcdff -lnetcdf -lhdf5"

CLAW='/p/project/highresmonsoon/ICON/claw-2.0.2p/bin/clawfc'
# We have to tell CLAW where to look for netcdf.inc:
CLAWFLAGS=""
#-I${NETCDF_DIR}/include"

NVCC='nvcc'
NVCFLAGS='--std=c++11 -arch=sm_80 -g -O3'

#SB2PP="${SERIALBOX2_ROOT}/python/pp_ser/pp_ser.py"

#MPI_LAUNCH='/apps/daint/UES/xalt/production/bin/srun -p debug -C gpu'
MPI_LAUNCH=false
EXTRA_CONFIG_ARGS='--disable-loop-exchange --enable-grib2 --enable-claw --enable-gpu --with-external-cub --enable-rte-rrtmgp'

# Speed up the configuration by disabling MPI checks:
EXTRA_CONFIG_ARGS+=' --disable-mpi-checks '

################################################################################

"${ICON_DIR}/configure" \
BUILD_ENV="$BUILD_ENV" \
CC="$CC" \
CFLAGS="$CFLAGS" \
CLAW="$CLAW" \
CLAWFLAGS="$CLAWFLAGS" \
CPPFLAGS="$CPPFLAGS" \
FC="$FC" \
FCFLAGS="$FCFLAGS" \
LDFLAGS="$LDFLAGS" \
LIBS="$LIBS" \
MPI_LAUNCH="$MPI_LAUNCH" \
NVCC="$NVCC" \
NVCFLAGS="$NVCFLAGS" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${ICON_DIR}/run/standard_*
  ln -sf set-up.info run/SETUP.config
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi


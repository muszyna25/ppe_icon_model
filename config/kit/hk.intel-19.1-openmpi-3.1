#!/bin/bash

# Bash settings:
# * Exit immediately if a command exits with a  non-zero  status
# * Treat unset variables as an error
set -e -u
# * Unset search path for the cd command
unset CDPATH

# Configure ICON directories
SCRIPT_DIR=$( cd "$(dirname "$0")";     pwd )
ICON_DIR=$(   cd "${SCRIPT_DIR}/../.."; pwd )

# Configure build requirements
COMPILER_NAME="intel"
COMPILER_VERSION="19.1"
MPI_NAME="openmpi"
MPI_VERSION="3.1"
ECCODES_VERSION="2.22.0"
NETCDF_VERSION="4.7"
NETCDFF_VERSION="4.5"
HDF5_VERSION="1.10"
MKL_VERSION="2020"

MODULES=(
    compiler/${COMPILER_NAME}/${COMPILER_VERSION}
    mpi/${MPI_NAME}/${MPI_VERSION}
    lib/netcdf/${NETCDF_VERSION}_serial
    lib/hdf5/${HDF5_VERSION}_serial
    lib/netcdf-fortran/${NETCDFF_VERSION}_serial
    lib/eccodes/${ECCODES_VERSION}
    numlib/mkl/${MKL_VERSION}
)
module purge
module add "${MODULES[@]}"

# HDF5 config
HDF5_LIB="${HDF5_LIBRARY_DIRS}"
HDF5_INCL="${HDF5_INCLUDE_DIRS}"
HDF5_LIBS='-lhdf5'
if [[ ! -d "${HDF5_LIB}"  ||
      ! -d "${HDF5_INCL}" ]]; then
    echo "Required HDF5 directories '${HDF5_LIB}', '${HDF5_INCL}' not found"
    exit 1
fi

# NetCDF config
NETCDF_LIB="${NETCDF_LIBRARY_DIR}"
NETCDF_INCL="${NETCDF_INCLUDE_DIR}"
NETCDF_LIBS='-lnetcdf'
if [[ ! -d "${NETCDF_LIB}"  ||
      ! -d "${NETCDF_INCL}" ]]; then
    echo "Required NetCDF directories '${NETCDF_LIB}', '${NETCDF_INCL}' not found"
    exit 1
fi

# NetCDF Fortran config
NETCDFF_LIB="${NETCDF_FORTRAN_LIBRARY_DIR}"
NETCDFF_INCL="${NETCDF_FORTRAN_INCLUDE_DIR}"
NETCDFF_LIBS='-lnetcdff'
if [[ ! -d "${NETCDFF_LIB}"  ||
      ! -d "${NETCDFF_INCL}" ]]; then
    echo "Required NetCDF Fortran directories '${NETCDFF_LIB}', '${NETCDFF_INCL}' not found"
    exit 1
fi

# ecCodes config
GRIBAPI_LIB="${ECCODES_LIBRARY_DIR}"
GRIBAPI_INCL="${ECCODES_INCLUDE_DIR}"
GRIBAPI_LIBS='-leccodes'
if [[ ! -d "${GRIBAPI_LIB}"  ||
      ! -d "${GRIBAPI_INCL}" ]]; then
    echo "Required ecCodes directories '${GRIBAPI_LIB}', '${GRIBAPI_INCL}' not found"
    exit 1
fi

# MKL config
BLAS_LAPACK_LDFLAGS='-mkl=sequential'

# libxml config
XML2_ROOT='/usr'
XML2_INCL="${XML2_ROOT}/include/libxml2"
XML2_LIBS='-lxml2'

# Debug config
C_DEBUG_FLAGS="-g"
CXX_DEBUG_FLAGS="-g"
FC_DEBUG_FLAGS="-g"
USE_DEBUG=${USE_DEBUG:-false}

################################################################################

# Configure expects CFLAGS, CXXFLAGS and FCFLAGS to be unmodified by BUILD_ENV
# script, so save them before loading modules
BUILD_ENV=
BUILD_ENV+='SAFE_CFLAGS="${CFLAGS}";'
BUILD_ENV+='SAFE_CXXFLAGS="${CXXFLAGS}";'
BUILD_ENV+='SAFE_FCFLAGS="${FCFLAGS}";'
BUILD_ENV+='module purge;'
BUILD_ENV+='module load '"${MODULES[@]}"';'
BUILD_ENV+='CFLAGS="${SAFE_CFLAGS}";'
BUILD_ENV+='CXXFLAGS="${SAFE_CXXFLAGS}";'
BUILD_ENV+='FCFLAGS="${SAFE_FCFLAGS}";'
BUILD_ENV+='unset SAFE_CFLAGS SAFE_CXXFLAGS SAFE_FCFLAGS;'
BUILD_ENV+='unset OMPI_CFLAGS OMPI_CXXFLAGS OMPI_FCFLAGS;'
BUILD_ENV+='export CC=$(type -p mpicc);'
BUILD_ENV+='export FC=$(type -p mpifort);'
BUILD_ENV+='export MPI_LAUNCH=$(type -p mpiexec);'
BUILD_ENV+='export LC_ALL=en_US;'

CFLAGS='-O2 -xCORE-AVX2 -pc64'
if [[ "${USE_DEBUG}" == true ]]; then
    CFLAGS+=" ${C_DEBUG_FLAGS}"
fi
CXXFLAGS='-O2 -xCORE-AVX2 -pc64'
if [[ "${USE_DEBUG}" == true ]]; then
    CXXFLAGS+=" ${CXX_DEBUG_FLAGS}"
fi
CPPFLAGS="-I${HDF5_INCL} -I${NETCDF_INCL} -I${GRIBAPI_INCL} -I${XML2_INCL}"

FC_OPT_FLAGS='-O2 -xCORE-AVX2'
FC_SEARCH_FLAGS="-I${NETCDFF_INCL}"
FCFLAGS="${FC_SEARCH_FLAGS} ${FC_OPT_FLAGS} -standard-semantics -assume nostd_mod_proc_name -assume realloc_lhs -pc64 -fltconsistency"
if [[ "${USE_DEBUG}" == true ]]; then
    FCFLAGS+=" ${FC_DEBUG_FLAGS}"
fi

LDFLAGS="-L${HDF5_LIB} -L${NETCDF_LIB} -L${NETCDFF_LIB} -L${GRIBAPI_LIB} ${BLAS_LAPACK_LDFLAGS}"
LIBS="${XML2_LIBS} ${GRIBAPI_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS} "

EXTRA_CONFIG_ARGS='--disable-rpaths --enable-grib2'
eval "${BUILD_ENV}"


################################################################################

"${ICON_DIR}/configure" \
    BUILD_ENV="${BUILD_ENV}" \
    AR="$(type -p xiar)" \
    CC="${CC}" \
    CFLAGS="${CFLAGS}" \
    CPPFLAGS="${CPPFLAGS}" \
    FC="${FC}" \
    FCFLAGS="${FCFLAGS}" \
    LDFLAGS="${LDFLAGS}" \
    LIBS="${LIBS}" \
    MPI_LAUNCH="${MPI_LAUNCH}" \
    ${EXTRA_CONFIG_ARGS} \
    "$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*in' --exclude='.*'
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi


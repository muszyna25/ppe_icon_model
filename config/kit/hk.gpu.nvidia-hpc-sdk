#!/bin/bash

# Bash settings:
# * Exit immediately if a command exits with a  non-zero  status
# * Treat unset variables as an error
set -e -u

# * Unset search path for the cd command
unset CDPATH

# Configure ICON directories
SCRIPT_DIR=$( cd "$(dirname "$0")";     pwd )
ICON_DIR=$(   cd "${SCRIPT_DIR}/../.."; pwd )

# Configure build requirements
COMPILER_NAME="nvidia"
COMPILER_VERSION="21.2"
CUDA_VERSION="11.2"
ECCODES_VERSION="2.20.0"
NETCDF_VERSION="4.7"
NETCDFF_VERSION="4.5"
HDF5_VERSION="1.10"

MODULES=(
    toolkit/nvidia-hpc-sdk/${COMPILER_VERSION}
    lib/netcdf/${NETCDF_VERSION}_serial
    lib/hdf5/${HDF5_VERSION}_serial
    lib/netcdf-fortran/${NETCDFF_VERSION}_serial
    lib/eccodes/${ECCODES_VERSION}
)
module purge
module add "${MODULES[@]}"

# HDF5 config
HDF5_LIB="${HDF5_LIBRARY_DIRS}"
HDF5_INCL="${HDF5_INCLUDE_DIRS}"
HDF5_LIBS='-lhdf5'
if [[ ! -d "${HDF5_LIB}"  ||
      ! -d "${HDF5_INCL}" ]]; then
    echo "Required HDF5 directories '${HDF5_LIB}', '${HDF5_INCL}' not found"
    exit 1
fi

# NetCDF config
NETCDF_LIB="${NETCDF_LIBRARY_DIR}"
NETCDF_INCL="${NETCDF_INCLUDE_DIR}"
NETCDF_LIBS='-lnetcdf'
if [[ ! -d "${NETCDF_LIB}"  ||
      ! -d "${NETCDF_INCL}" ]]; then
    echo "Required NetCDF directories '${NETCDF_LIB}', '${NETCDF_INCL}' not found"
    exit 1
fi

# NetCDF Fortran config
NETCDFF_LIB="${NETCDF_FORTRAN_LIBRARY_DIR}"
NETCDFF_INCL="${NETCDF_FORTRAN_INCLUDE_DIR}"
NETCDFF_LIBS='-lnetcdff'
if [[ ! -d "${NETCDFF_LIB}"  ||
      ! -d "${NETCDFF_INCL}" ]]; then
    echo "Required NetCDF Fortran directories '${NETCDFF_LIB}', '${NETCDFF_INCL}' not found"
    exit 1
fi

# ecCodes config
GRIBAPI_LIB="${ECCODES_LIBRARY_DIR}"
GRIBAPI_INCL="${ECCODES_INCLUDE_DIR}"
GRIBAPI_LIBS='-leccodes'
if [[ ! -d "${GRIBAPI_LIB}"  ||
      ! -d "${GRIBAPI_INCL}" ]]; then
    echo "Required ecCodes directories '${GRIBAPI_LIB}', '${GRIBAPI_INCL}' not found"
    exit 1
fi

# BLAS and LAPACK config
# -> Requires GPU node for ./configure
BLAS_LAPACK_LDFLAGS='-llapack -lblas'

# CUDA
CUDA_ROOT=${NVHPC}/Linux_x86_64/${COMPILER_VERSION}/cuda/"${CUDA_VERSION}"
if [[ ! -d "${CUDA_ROOT}" ]]; then
    echo "Required CUDA directories '${CUDA_ROOT}' not found"
    exit 1
fi
# Append gnu compatible C++ libraries to the link line
# -> The rest of libraries required by CUDA will be provided by PGI compiler:
STDCPP_LIBS='-lstdc++'

# CUDA compiler driver
NVCC="$(type -p nvcc)"
if [[ -z "${NVCC}" ]]; then
    echo "Required CUDA compiler driver not found"
    exit 1
fi
NVCFLAGS='--std=c++11 -arch=sm_80 -g -O3'

# libxml config
XML2_ROOT='/usr'
XML2_INCL="${XML2_ROOT}/include/libxml2"
XML2_LIBS='-lxml2'

################################################################################

# Configure expects CFLAGS, CXXFLAGS and FCFLAGS to be unmodified by BUILD_ENV
# script, so save them before loading modules
BUILD_ENV=
BUILD_ENV+='SAFE_CFLAGS="${CFLAGS}";'
BUILD_ENV+='SAFE_CXXFLAGS="${CXXFLAGS}";'
BUILD_ENV+='SAFE_FCFLAGS="${FCFLAGS}";'
BUILD_ENV+='module purge;'
BUILD_ENV+='module load '"${MODULES[@]}"';'
BUILD_ENV+='CFLAGS="${SAFE_CFLAGS}";'
BUILD_ENV+='CXXFLAGS="${SAFE_CXXFLAGS}";'
BUILD_ENV+='FCFLAGS="${SAFE_FCFLAGS}";'
BUILD_ENV+='unset SAFE_CFLAGS SAFE_CXXFLAGS SAFE_FCFLAGS;'
BUILD_ENV+='unset OMPI_CFLAGS OMPI_CXXFLAGS OMPI_FCFLAGS;'
BUILD_ENV+='export CC=$(type -p mpicc);'
BUILD_ENV+='export FC=$(type -p mpifort);'
BUILD_ENV+='export MPI_LAUNCH=$(type -p mpiexec);'
BUILD_ENV+='export LC_ALL=en_US;'

CFLAGS='-O2'
CXXFLAGS='-O2'
CPPFLAGS="-I${HDF5_INCL} -I${NETCDF_INCL} -I${GRIBAPI_INCL} -I${XML2_INCL}"

FC_OPT_FLAGS="-O2"
FC_SEARCH_FLAGS="-I${NETCDFF_INCL}"

#  FC       src/atm_phy_schemes/mo_radiation.o
#  NVFORTRAN-S-1069-Data clause required with default(none) - pt_patch (/home/hk-project-scs/bq0742/git/icon-kit.dkrz/src/atm_phy_schemes/mo_radiation.f90: 344)
#    0 inform,   0 warnings,   1 severes, 0 fatal for pre_radiation_nwp_steps
#
# -acc=verystrict
# -Mrecursive: Generate code to allow recursive subprograms
# -Mallocatable=03 Select Fortran 2003 semantics for assignments to allocatables
# -gpu=cc80,cuda11.2:
#     Select specific options for GPU code generation:
#     * Compile for compute capability 8.0
#     * Use CUDA 11.2 Toolkit compatibility, where installed
# OpenMP directives are compiled for GPU execution
# -acc=gpu:
#     Enable OpenACC directives:
#     * OpenACC directives are compiled for GPU execution only
FCFLAGS="${FC_SEARCH_FLAGS} ${FC_OPT_FLAGS} -Mrecursive -Mallocatable=03 -gpu=cc80,cuda11.2 -acc=gpu -D__SWAPDIM"

LDFLAGS="-L${HDF5_LIB} -L${NETCDF_LIB} -L${NETCDFF_LIB} -L${GRIBAPI_LIB} ${BLAS_LAPACK_LDFLAGS} -L${CUDA_ROOT}/lib64"
LIBS="${XML2_LIBS} ${GRIBAPI_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS} ${STDCPP_LIBS} -lcudart"

EXTRA_CONFIG_ARGS='--disable-loop-exchange --enable-gpu --disable-rpaths --enable-rte-rrtmgp --enable-grib2'
eval "${BUILD_ENV}"


################################################################################

"${ICON_DIR}/configure" \
    BUILD_ENV="${BUILD_ENV}" \
    CC="${CC}" \
    CFLAGS="${CFLAGS}" \
    CXX="${CXX}" \
    CXXFLAGS="${CXXFLAGS}" \
    CPPFLAGS="${CPPFLAGS}" \
    FC="${FC}" \
    FCFLAGS="${FCFLAGS}" \
    LDFLAGS="${LDFLAGS}" \
    NVCC="${NVCC}" \
    NVCFLAGS="${NVCFLAGS}" \
    LIBS="${LIBS}" \
    MPI_LAUNCH="${MPI_LAUNCH}" \
    ${EXTRA_CONFIG_ARGS} \
    "$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*in' --exclude='.*'
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi


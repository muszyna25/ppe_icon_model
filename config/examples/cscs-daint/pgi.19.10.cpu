#!/bin/bash

set -eu

MY_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR="${MY_DIR}/../../.."

BUILD_ENV="MODULEPATH=\"/project/d56/modules:\${MODULEPATH}\";. ${MY_DIR}/build_env_init.sh; switch_for_modules daint-gpu modules craype craype-haswell PrgEnv-pgi/6.0.5 pgi-icon/19.10 gcc cray-mpich cray-netcdf cray-hdf5;"

BLAS_LAPACK_LIBS='-llapack -lblas'

FC=ftn
CC=cc

FCFLAGS='-g -O -Mrecursive -Mallocatable=03 -tp=haswell'
CFLAGS='-g -O2'
CPPFLAGS=
LDFLAGS=
LIBS="${BLAS_LAPACK_LIBS}"
MPI_LAUNCH='/apps/daint/UES/xalt/production/bin/srun -p debug -C gpu'

# ICON executable will be linked to /opt/cray/pe/lib64/libmpichf90_pgi.so.3,
# which depends on libomptarget.so but doesn't have an RPATH to it. For this
# reason, it becomes impossible to run the executable without setting
# LD_LIBRARY_PATH in advance (e.g. by loading an environment module). To solve
# this issue, we overlink to libomptarget.so so that it can be found through
# RPATH entries of the executable, which are injected by the compiler.
LIBS="${LIBS} -lomptarget"

"${ICON_DIR}/configure" \
BUILD_ENV="$BUILD_ENV" \
CC="$CC" \
CFLAGS="$CFLAGS" \
CPPFLAGS="$CPPFLAGS" \
FC="$FC" \
FCFLAGS="$FCFLAGS" \
LDFLAGS="$LDFLAGS" \
LIBS="$LIBS" \
MPI_LAUNCH="$MPI_LAUNCH" \
--disable-coupling \
--disable-openmp \
"$@"

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  rsync -uavz ${ICON_DIR}/run . --exclude='*in' --exclude='.*'
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
fi

# Generate input file for runscript generation:
./config.status --file=run/create_target_header --file=run/exec.iconrun --file=run/add_run_routines --file=run/set-up.info


#!/bin/bash

set -eu

MY_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR="${MY_DIR}/../../.."

BUILD_ENV="MODULEPATH=\"/project/d56/modules:\${MODULEPATH}\";. ${MY_DIR}/build_env_init.sh; switch_for_modules daint-gpu modules craype craype-haswell cdt/19.10 PrgEnv-pgi/6.0.5 pgi-icon/19.10 gcc cray-mpich cray-netcdf cray-hdf5 cudatoolkit/10.1.105_3.27-7.0.1.1_4.1__ga311ce7; export CUDA_HOME=\$CUDATOOLKIT_HOME;"

BLAS_LAPACK_LIBS='-llapack -lblas'

FC=ftn
CC=cc

FCFLAGS='-g -O -Mrecursive -Mallocatable=03 -acc=verystrict -ta=nvidia:cc60'
CFLAGS='-g -O2'
CPPFLAGS=
LDFLAGS=
LIBS="${BLAS_LAPACK_LIBS} -lstdc++"

# We have to tell CLAW where to look for netcdf.inc
eval "$BUILD_ENV"
CLAWFLAGS="-I${NETCDF_DIR}/include"

NVCFLAGS='-std=c++11 -arch=sm_60 -g -O3'

MPI_LAUNCH='/apps/daint/UES/xalt/production/bin/srun -p debug -C gpu'
CLAW='/project/d56/install/daint/claw/v2.0.1/pgi/bin/clawfc'
NVCC='nvcc'

# ICON executable will be linked to /opt/cray/pe/lib64/libmpichf90_pgi.so.3,
# which depends on libomptarget.so but doesn't have an RPATH to it. For this
# reason, it becomes impossible to run the executable without setting
# LD_LIBRARY_PATH in advance (e.g. by loading an environment module). To solve
# this issue, we overlink to libomptarget.so so that it can be found through
# RPATH entries of the executable, which are injected by the compiler.
LIBS="${LIBS} -lomptarget"

"${ICON_DIR}/configure" \
BUILD_ENV="$BUILD_ENV" \
CC="$CC" \
CFLAGS="$CFLAGS" \
CLAW="$CLAW" \
CLAWFLAGS="$CLAWFLAGS" \
CPPFLAGS="$CPPFLAGS" \
FC="$FC" \
FCFLAGS="$FCFLAGS" \
LDFLAGS="$LDFLAGS" \
LIBS="$LIBS" \
MPI_LAUNCH="$MPI_LAUNCH" \
NVCC="$NVCC" \
NVCFLAGS="$NVCFLAGS" \
--disable-coupling \
--disable-loop-exchange \
--disable-openmp \
--enable-claw \
--enable-gpu \
"$@"

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  rsync -uavz ${ICON_DIR}/run . --exclude='*in' --exclude='.*'
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
fi

# Generate input file for runscript generation:
./config.status --file=run/create_target_header --file=run/exec.iconrun --file=run/add_run_routines --file=run/set-up.info


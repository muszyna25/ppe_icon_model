#!/bin/sh

. /etc/profile

set -eu

ICON_DIR="$(cd "$(dirname "$0")"; pwd)/../../.."
. ${ICON_DIR}/build_env_init.sh
switch_for_modules eccodes aec

RTTOV_FCFLAGS='-I/usr/local/pkg/for0adm/include/radiance'
RTTOV_LIBS='-L/usr/local/pkg/for0adm/lib -L/usr/local/pkg/for0adm/lib/unsupported -lradiance -lrttov10.2 -lhrit_tools'

ECCODES_CPPFLAGS=$ECCODES_INCLUDE
# Libtool (used by the bundled CDI) is not fully compatible with Cray compiler.
# For each library specified with -l (e.g. -laec) argument on the command line,
# libtool tries to find the corresponding *.la file (e.g. libaec.la). If the
# file is found, the library is treated in a special way. In particular, if
# there is only a static version of the library, the argument -l (e.g. -laec)
# is replaced with the full path to the library file (e.g.
# /hpc/rhome/software/aec/xc/1.0.0-3/CRAY/lib/libaec.a). Unfortunately, Cray
# compiler ignores such arguments if they are specified after any other
# argument -l. For example, we need to link to libeccodes.a, which requires
# libaec.a. Normally, we would pass '-leccodes -laec', which the compiler would
# understand, but libtool converts the arguments into
# '-leccodes /hpc/rhome/software/aec/xc/1.0.0-3/CRAY/lib/libaec.a', which the
# compiler does not interpret correctly. Here, the argument '-leccodes' is not
# changed because libeccodes.a is not a libtool-generated library (i.e. there
# is no libeccodes.la) but libaec is. Therefore, the compiler ignores the
# argument related to libaec and fails the linking. There are two possible
# solutions to the described problem:
#   1) remove /hpc/rhome/software/aec/xc/1.0.0-3/CRAY/lib/libaec.la and pass
#      '-laec', which in this case will not be modified by libtool;
#   2) pass '-l:libaec.a', which is understood by the compiler and is left as
#      it is by libtool.
# We implement the second solution here:
ECCODES_LIBS="-L${ECCODES_LIB_DIR} -leccodes -L${AEC_DIR}/lib -l:libaec.a"

######################

BUILD_ENV=". ${ICON_DIR}/build_env_init.sh; switch_for_modules PrgEnv-cray/5.2.82 cray-netcdf/4.3.2;"

FC='ftn'
CC='cc'

FCFLAGS="${RTTOV_FCFLAGS}"
CFLAGS=
CPPFLAGS="${ECCODES_CPPFLAGS}"

LDFLAGS=
LIBS="${ECCODES_LIBS} ${RTTOV_LIBS}"

# Unfortunately, we cannot enable dynamic linking on this machine. At the same
# time, libtool, which the building system of CDI is based on, cannot handle
# this case correctly. Libtool tries to find out the full list of libraries
# required for linking by using some dark magic. Apparently, it tries to do by
# it parsing the verbose output of the compiler. For example, it finds out
# that Cray Fortran compiler, for whatever reason, needs the runtime libraries
# of GNU Fortran compiler, i.e. -lquadmath, -lgfortran, etc. And now we face a
# problem that is very similar to the one described above: libtool finds
# /opt/gcc/4.8.1/snos/lib/../lib64/libquadmath.la and starts treating it in a
# special way. In particular it replaces '-lquadmath' with the absolute path
# to the library. The problem is that libtool does not know that we link
# statically, therefore, instead of setting the absolute path to the static
# library, it sets the path to the dynamic one, i.e.
# /opt/gcc/4.8.1/snos/lib/../lib64/libquadmath.so, which confuses the linker
# and it is unable to link the test suite of CDI. We cannot solve this
# problem using the same workaround as before, because the dependency on
# '-lquadmath' does not come from the arguments of the configure script.
# The only thing we can do is to use the feature of the configure script of
# CDI, which is enabled with the '--enable-all-static' argument. When this
# feature is enabled, libtool receives an additional argument '-all-static'
# from the makefile of CDI, which tells libtool that we do link statically.
# The argument '--enable-all-static' is not a standard argument for
# libtool-based packages, therefore it is not a universal solution. For
# example, we might experience the same problem when building YAXT, which is
# disabled in this example. We can pass the '--enable-all-static' argument to
# the configure script of ICON, which will issue a warning but pass it to all
# the configure scripts of the bundled libraries. All of them but CDI will
# ignore it. This will help to get the test suite of CDI linked. Nonetheless,
# most of the tests will fail, but that is another issue.

${ICON_DIR}/configure BUILD_ENV="$BUILD_ENV" FC="$FC" FCFLAGS="$FCFLAGS" CC="$CC" CFLAGS="$CFLAGS" CPPFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS" LIBS="$LIBS" --enable-grib2 --enable-active-target-sync --enable-rttov --disable-rpaths --disable-ocean --disable-psrad --disable-jsbach --disable-coupling --enable-ecrad --enable-all-static "$@"


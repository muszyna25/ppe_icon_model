#!/bin/bash

set -eu
unset CDPATH

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../.."; pwd)

MODULES='modules craype cdt/19.10 PrgEnv-pgi/6.0.5 pgi-icon/19.9 gcc cray-mpich cray-netcdf cray-hdf5 cudatoolkit/10.1.105_3.27-7.0.1.1_4.1__ga311ce7'

XML2_ROOT='/apps/daint/UES/jenkins/6.0.UP07/gpu/easybuild/software/libxml2/2.9.7-CrayGNU-18.08'
XML2_LIBS='-lxml2'

BLAS_LAPACK_LIBS='-llapack -lblas'

SERIALBOX2_ROOT='/project/d56/install/daint/serialbox2/2.4.3/pgi/19.9'
SERIALBOX2_LIBS='-lSerialboxFortran'

# The rest of libraries required by CUDA will be provided by PGI compiler:
STDCPP_LIBS='-lstdc++'

################################################################################

BUILD_ENV=". \"${SCRIPT_DIR}/module_switcher\"; module use /project/d56/modules; switch_for_module cce; export PATH=\"\${CRAY_BINUTILS_BIN}:\${PATH}\"; switch_for_module ${MODULES}; export LD_LIBRARY_PATH=\"${SERIALBOX2_ROOT}/lib:${XML2_ROOT}/lib:\${LD_LIBRARY_PATH}\";"

# We need some of the environment variables set by the modules now:
eval "$BUILD_ENV"

CC='cc'
CFLAGS='-g -O2'
CPPFLAGS="-I${XML2_ROOT}/include/libxml2"

FC='ftn'
FCFLAGS="-g -O -Mrecursive -Mallocatable=03 -acc=verystrict -ta=nvidia:cc60,cuda10.1 -Minfo=accel,inline -I${SERIALBOX2_ROOT}/include"

LDFLAGS="-L${GCC_PATH}/snos/lib64 -L${SERIALBOX2_ROOT}/lib -L${XML2_ROOT}/lib"

# We need to overlink to libomptarget.so (see config/cscs/README.md):
LIBS="-lomptarget -Wl,--as-needed ${XML2_LIBS} ${BLAS_LAPACK_LIBS} ${SERIALBOX2_LIBS} ${STDCPP_LIBS}"

CLAW='/project/d56/install/daint/claw/v2.0.1/pgi/bin/clawfc'
# We have to tell CLAW where to look for netcdf.inc:
CLAWFLAGS="-I${NETCDF_DIR}/include"

NVCC='nvcc'
NVCFLAGS='--std=c++11 -arch=sm_60 -g -O3'

SB2PP="${SERIALBOX2_ROOT}/python/pp_ser/pp_ser.py"

MPI_LAUNCH='/apps/daint/UES/xalt/production/bin/srun -p debug -C gpu'

EXTRA_CONFIG_ARGS='--disable-loop-exchange --enable-claw --enable-gpu'

# Speed up the configuration by disabling MPI checks:
EXTRA_CONFIG_ARGS+=' --disable-mpi-checks'

################################################################################

"${ICON_DIR}/configure" \
BUILD_ENV="$BUILD_ENV" \
CC="$CC" \
CFLAGS="$CFLAGS" \
CLAW="$CLAW" \
CLAWFLAGS="$CLAWFLAGS" \
CPPFLAGS="$CPPFLAGS" \
FC="$FC" \
FCFLAGS="$FCFLAGS" \
LDFLAGS="$LDFLAGS" \
LIBS="$LIBS" \
MPI_LAUNCH="$MPI_LAUNCH" \
NVCC="$NVCC" \
NVCFLAGS="$NVCFLAGS" \
SB2PP="$SB2PP" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${ICON_DIR}/run/standard_*
  ln -sf set-up.info run/SETUP.config
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi


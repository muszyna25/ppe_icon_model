# Linux
#-----------------------------------------------------------------------------
#
# Comments:
#
# 2010-02-09, Marco Giorgetta, MPI-M: gcc-4.3.4 setup
# 2010-02-09, Luis Kornblueh,  MPI-M: clean-up
# 2010-02-17, Marco Giorgetta, MPI-M: gcc: activate -ffree-line-length-132
# 2010-02-17, Marco Giorgetta, MPI-M: activate -fmodule-private
# 2010-02-17, Marco Giorgetta, MPI-M: activate -fimplicit-none
# 2013-03-25, Bastian Kern,    DLR  : gfortran and ifort at DLR Linux cluster
# 2014-02-03, Rene Redler,     MPI-M: sun compiler removed.
# 2014-03-27, Will Sawyer,     CSCS : additions for CSCS Cray platforms
# 2015-09-25, Will Sawyer,     CSCS : refinements for CSCS platforms
# 2016-07-14, Will Sawyer,     CSCS : additional refinements and bug fixes
#
#-----------------------------------------------------------------------------

#===============================================
# some common settings

LAPACKROOT  =
LAPACK_LIB  =

LIBS        = -L../lib -lsupport $LIBS

load_modules=

#===============================================

#===============================================
#
# Define compiler settings
#


#-----------------------------------------------------------------------------
# cc is the gcc
CC     = gcc
CFLAGS = -std=gnu99 -march=native -O2 -DHAVE_LIBNETCDF -DHAVE_NETCDF4

case "$fortran_compiler" in
    default|gcc*)
        config_compiler  = gcc
        compiler_version = $(gfortran --version | awk 'NR==1{split($NF,v,"."); printf("gcc%1d%1d", v[1], v[2])}')
        CFLAGS      = $CFLAGS -DgFortran
        FCPP        = -cpp
        FLANG       = -std=f2008 -fmodule-private -fimplicit-none -fmax-identifier-length=63 -ffree-line-length-132
        FWARN       = -Wall -Wcharacter-truncation -Wconversion -Wunderflow -Wunused-parameter -Wno-surprising
        FDEBUG      = -g -fbacktrace
        FCHECK      = -finit-real=nan -finit-integer=-2147483648 -finit-character=127
        FOPTIONS    = $FCPP $FLANG $FWARN $FDEBUG $FCHECK
        FOTPTIM     = -march=native -O3 -ffast-math -D__LOOP_EXCHANGE

        DEBUG_FLAGS = -g -O -march=native -fbacktrace -fbounds-check -fstack-protector-all $FCHECK -DDEBUG_MVSTREAM
        STD_FLAGS   = -g    -march=native -fbacktrace -fbounds-check -fstack-protector-all $FCHECK -march=native -O2 -mpc64 -D__LOOP_EXCHANGE
        HIOPT_FLAGS = -march=native -O3 -ffast-math -mpc64 -D__LOOP_EXCHANGE -g

        FC          = gfortran
        FFLAGS      = $FCPP $FLANG $FWARN $INCLUDES
        F77         = gfortran
        F77FLAGS    = -march=native -O0 -ffast-math -mpc64
        LDFLAGS     = $FOTPTIM
        OMPFLAG     = -fopenmp
        CC_OMPFLAG  = -fopenmp
        DEFOPT      = -D
        DEFCOPT     = -D
        MODOPT      = -I
        MODDIR      = -J
        WLFLAG      = -Wl
        ;;
    xlf)
        config_compiler=mpixlc_r
        CC       = mpixlc_r
        OPTFLAGS = -q64 -O2  -qmaxmem=-1 -qstrict -qarch=auto -qtune=auto -qcache=auto -qfloat=fltint
        INFOFLAGS= -qlistopt -qphsinfo -V
        INFOFLAGS=
        GENFLAGS = $INFOFLAGS -WF,-DSLOW_MPI_MAXMINLOC -WF,-DSLOW_MPI_USER_REDUCTION -WF,-DSLOW_MPI_IN_PLACE
        CFLAGS   = -DIBMR2Fortran -O2 -qipa

        FC       = mpixlf2003_r

        CHECK_FLAGS = -g -qcheck -qstackprotect=all
        DEBUG_FLAGS = -OO -qnoopt -g -qfullpath -WF,-DNOXLFPROCESS
        BASIC_OPT_FLAGS = -qalias_size -q64 -qmaxmem=-1 -qarch=auto -qtune=auto -qcache=auto -qfloat=fltint -WF,-D__LOOP_EXCHANGE
        STD_FLAGS = -O2 -qstrict -qlinedebug $BASIC_OPT_FLAGS $INFOFLAGS
        #HIOPT_FLAGS = -O3 -qhot -qstrict -qarch=qp -qtune=qp -qcache=auto -qxflag=nvectver -qxflag=nsmine -qfloat=fltint -qessl -q64 -qmaxmem=-1  -qlinedebug  -WF,-D__LOOP_EXCHANGE -WF,-DHAVE_FAST_MATH_LIB -WF,-DHAVE_MASS
        HIOPT_FLAGS = -O3 -qhot -qipa -qstrict -qarch=qp -qtune=qp -qcache=auto -qxflag=nvectver -qxflag=nsmine -qfloat=fltint -qessl -q64 -qmaxmem=-1  -qlinedebug  -WF,-D__LOOP_EXCHANGE -WF,-DHAVE_MASS
        FFLAGS   = $GENFLAGS -qsuffix=cpp=f90 -qzerosize -qalias_size=1800000000

        F77      = mpixlf77_r
        F77FLAGS = $STD_FLAGS

        case "$with_flags" in
          debug)
            OMPFLAG = -qsmp=omp:noopt
            F77FLAGS = $GENFLAGS $FMISMATCH -O0 -g
            CC_OMPFLAG  = -qsmp=omp:noopt
            ;;
          *)
            OMPFLAG = -qsmp=omp
            CC_OMPFLAG  = -qsmp=omp
            ;;
        esac
        DEFOPT   = -WF,-D
        DEFCOPT  = -D
        MODOPT   = -I
        MODDIR   = -qmoddir=
        ;;
    nag)
        config_compiler  = nag
        compiler_version = $(nagfor -v 2>&1 | awk 'NR==1{split($5,v,"."); printf("nag%1d%1d", v[1],substr(v[2],1,1))}')
        CFLAGS      = $CFLAGS -DNAGf90Fortran
        FC          = nagfor
        FDEBUG      =  -gline -g -C=all -mtrace=all
        FDEBUG      =  -gline -g -C=all
        GEN_FLAGS   = -colour -fpp -Wc=$(which gcc) -Dlib_free=free_c -Wc,-pipe
        eq="="
        if gcc --help${eq}params | grep max-vartrack-size >/dev/null ; then
          GEN_FLAGS = $GEN_FLAGS -Wc,--param,max-vartrack-size=200000000
        fi
        if gcc --help${eq}target | grep '^ *-mfma ' >/dev/null ; then
          GEN_FLAGS = $GEN_FLAGS -Wc,-mno-fma
        fi
        DEBUG_FLAGS = -O0 -Wc,-g -float-store -nan $FDEBUG
        STD_FLAGS   = $DEBUG_FLAGS
        HIOPT_FLAGS = -Wc,-O3 -Wc,-march=native
        FASTDEBUG_FLAGS = $HIOPT_FLAGS -float-store -nan $FDEBUG
        MISMATCHS   = -wmismatch=mpi_allgather,mpi_allgatherv,mpi_allreduce,mpi_alltoall,mpi_alltoallv,mpi_bcast,mpi_free_mem,mpi_gather,mpi_gatherv,mpi_get,mpi_get_address,mpi_isend,mpi_irecv,mpi_sendrecv,mpi_op_create,mpi_pack,mpi_recv,mpi_reduce,mpi_rget,mpi_scatter,mpi_scatterv,mpi_send,mpi_type_commit,mpi_type_extent,mpi_type_struct,mpi_unpack,mpi_win_create,nf_get_att_double,nf_put_att_double,nf_def_var,nf_get_att_int,nf_put_att_int,nf_put_vara_int,nf_get_vara_int,nf_put_vara_double,xt_slice_c_loc,util_stride_1d,util_stride_2d -w=uep
        FFLAGS      = $GEN_FLAGS -f2008 $MISMATCHS $INCLUDES
        F77         = nagfor
        F77FLAGS    = $GEN_FLAGS -w=obs -O -dcfuns -mismatch_all
        LDFLAGS     = -g
        case "$with_openmp" in
          yes)
            FFLAGS=${FFLAGS/ -gline / }
            F77FLAGS=${F77FLAGS/ -gline / }
          ;;
        esac
        OMPFLAG     = -openmp
        CC_OMPFLAG  =
        DEFOPT      = -D
        DEFCOPT     = -D
        MODOPT      = -I
        MODDIR      = -mdir 
        WLFLAG      = -Wl,-Wl,
        ;;
    pgi*)
        config_compiler  = pgi
        compiler_version = $(pgfortran -V | awk 'NR==2{split($2,v,"."); printf("pgi%1d", v[1])}')
        CFLAGS      = $CFLAGS -DgFortran
        FC          = pgfortran
        FDEBUG      = -g -gopt -Mbounds -Mchkptr -Mchkstk  -Mdclchk
       # FFLAGS      = -O $GEN_FLAGS $FDEBUG -Mpreprocess -Mrecursive -Mstandard  -D__LOOP_EXCHANGE
        FFLAGS      = -O $FDEBUG -Mpreprocess -Mrecursive -Mallocatable=03 -D__LOOP_EXCHANGE $INCLUDES
        F77         = $FC
        F77FLAGS    = $FFLAGS
        OMPFLAG     = -mp
        CC_OMPFLAG  = -mp
        DEFOPT      = -D
        DEFCOPT     = -D
        MODOPT      = -I
        MODDIR      = -module 
        WLFLAG      = -Wl
        ;;
    cray*)
        config_compiler  = cray
        compiler_version = $(ftn -V 2>&1 > /dev/null | awk -F" " '{split($5,v,"."); printf("cray%1d%1d", v[1], v[2])}')
        CC          = cc
        FC          = ftn
        F77         = $FC
        FFLAGS      = -D__LOOP_EXCHANGE -D__MIXED_PRECISION -D__MIXED_PRECISION_2 -e Z -em -hflex_mp=conservative -hfp1 -hadd_paren -hnoacc  -O cache0 -r am -Ktrap=divz,ovf,inv
        CFLAGS      = -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -O3
        F77FLAGS    = $FFLAGS
        LDFLAGS     = -hflex_mp=conservative  -Ktrap=divz,ovf,inv
        FCLIBS      = 
        GEN_FLAGS   =
        FDEBUG      = -g -R abc
        DEFOPT      = -D
        DEFCOPT     = -D
        MODOPT      = -I
        MODDIR      = -J
        ;;
    intel*)
        config_compiler  = intel
        compiler_version = $(ifort -V 2>&1 | awk -F "," 'NR==1{split($2,v," "); printf("intel%d",v[2])}')
        CC          = icc
        # ccversion   = $(icc --version 2>&1 | awk 'NR==1')
        # CFLAGS      = -fpe0 -msse2 -pc64  -DgFortran -DHAVE_LIBNETCDF
        CFLAGS      = $CFLAGS -DgFortran
        AR          = xiar
        FC          = ifort
        DEBUG_FLAGS = -check bounds -check pointers -check uninit -debug -O0 -g
        STD_FLAGS   = -O2 -msse2 -fltconsistency -g -pc64 -fpp -traceback  -D__LOOP_EXCHANGE
        FFLAGS      = -g -pc64 -fpp -D__LOOP_EXCHANGE -assume realloc_lhs
        F77         = $FC
        F77FLAGS    = $FFLAGS $STD_FLAGS
        OMPFLAG     = -qopenmp
        CC_OMPFLAG  = -qopenmp
        DEFOPT      = -D
        DEFCOPT     = -D
        MODOPT      = -I
        MODDIR      = -module 
        WLFLAG      = -Wl
        ;;
esac
#===============================================


#####################################
#
# Define site dependent library paths
#
case "$ac_sitename" in
    cscs.ch)
        case "$HOST" in
            *daint*|*dom*)
                make_command = make -j 8
                load_profile = /opt/modules/default/etc/modules.sh
                submit       = sbatch
                sync_submit  = sbatch --wait
                CC = cc
                FC = ftn
                F77= ftn
                MPI_LAUNCH  = /apps/daint/UES/xalt/production/bin/srun -p debug -C gpu 
                GRIBAPIROOT = /apps/daint/UES/6.0.UP02/sandbox-ws/grib_api
                XML2ROOT    = /apps/daint/UES/jenkins/6.0.UP07/gpu/easybuild/software/libxml2/2.9.7-CrayGNU-18.08
                ZLIBROOT    = /apps/daint/UES/jenkins/6.0.UP07/gpu/easybuild/software/zlib/1.2.11-CrayGNU-18.08

                case "$fortran_compiler" in
                    gcc*)
                        CFLAGS      = -DgFortran -O2 -DHAVE_LIBNETCDF -DHAVE_NETCDF2 -DHAVE_NETCDF4
                        SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.2/GNU/6.2.0
                        OTHER_LIBS  = -L/apps/daint/UES/6.0.UP02/sandbox-ws/jasper/2.0.10/GNU/5.3.0/lib -l:libjasper.a -dynamic -L/usr/lib64 -llzma
                        config_tuning = $(tmp=${fortran_compiler#'gcc'};tmp=${tmp#_};tmp=${tmp:-default};echo $tmp)
                        # Generic CPU/GPU setup
                        case "${config_tuning}" in
                            gpu*)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "OpenACC is not supported with GCC.")
                                (>&6 echo "")
                                ;;
                            ftg)
                                config_target = daint_cpu
                                STD_FLAGS   = -fbacktrace -fbounds-check -fstack-protector-all $FCHECK -D__LOOP_EXCHANGE
                                FFLAGS        = ${FLANG/ffree-line-length-132/ffree-line-length-none} $FWARN -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -DgFortran -cpp -save-temps -O -g -DFORCE_FTG_SERIALIZATION
                                config_tuning = "standalone"
                                ;;
                            *)
                                config_target = daint_cpu
                                FFLAGS        = ${FFLAGS}
                                ;;
                        esac
                        # Setup of specific version
                        case "${config_tuning}" in
                            default|standalone)
                                load_modules = modules craype daint-gpu PrgEnv-gnu cray-netcdf cray-hdf5 cray-libsci
                                NETCDFROOT   = ${NETCDF_DIR}
                                HDF5ROOT     = ${HDF5_DIR}
                                LAPACKROOT   = ${CRAY_LIBSCI_PREFIX_DIR}
                                LAPACK_LIB   = -lsci_gnu
                                ;;
                            *)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "Unknown tuning $config_tuning for $fortran_compiler selected.")
                                (>&6 echo "")
                                ;;
                        esac
                        # Setup for standalone run
                        case "${config_tuning}" in
                            *standalone)
                                FFLAGS      = ${FFLAGS} -I\$(SERIALBOX2ROOT)/include
                                OTHER_LIBS  = ${OTHER_LIBS} -L\$(SERIALBOX2ROOT)/lib -l:libSerialboxFortran.a -lstdc++fs -lstdc++
                                ;;
                        esac
                        ;;
                    intel*)
                        CFLAGS      = -std=gnu99 -march=native -DpgiFortran -DHAVE_LIBNETCDF -DHAVE_NETCDF2 -DHAVE_NETCDF4
                        SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.2/INTEL/18.0.2
			                  OTHER_LIBS  = -L/apps/daint/UES/6.0.UP02/sandbox-ws/jasper/2.0.10/INTEL/17.0.1.132/lib -ljasper -L/apps/daint/UES/jenkins/sandbox/easybuild/software/libxml2/2.9.3-CrayGNU-2016.03/lib -lxml2 -L/usr/lib64 -llzma -dynamic
                        config_tuning = $(tmp=${fortran_compiler#'intel'};tmp=${tmp#_};tmp=${tmp:-default};echo $tmp)
                        # Generic CPU/GPU setup
                        case "${config_tuning}" in
                            gpu*)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "OpenACC is not supported with GCC.")
                                (>&6 echo "")
                                ;;
                            *)
                                config_target = daint_cpu
                                STD_FLAGS   = -g -O2 -qopt-report -fp-model source -fpp -traceback  -D__LOOP_EXCHANGE
                                F77FLAGS    = -g -O2 -qopt-report -fp-model source -fpp -traceback  
                                FFLAGS      = -g -O2 -qopt-report -fp-model source -fpp -D__LOOP_EXCHANGE -assume realloc_lhs
                                ;;
                        esac
                        # Setup of specific version
                        case "${config_tuning}" in
                            default|standalone)
                                load_modules = PrgEnv-intel cray-netcdf cray-hdf5 cray-libsci
                                NETCDFROOT  = ${NETCDF_DIR}
                                HDF5ROOT    = ${HDF5_DIR}
                                LAPACKROOT  = ${CRAY_LIBSCI_PREFIX_DIR}
                                LAPACK_LIB  = -lsci_intel
                                ;;
                            *)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "Unknown tuning $config_tuning for $fortran_compiler selected.")
                                (>&6 echo "")
                                ;;
                        esac
                        # Setup for standalone run
                        case "${config_tuning}" in
                            *standalone)
                                FFLAGS      = ${FFLAGS} -I\$(SERIALBOX2ROOT)/include
                                OTHER_LIBS  = ${OTHER_LIBS} -L\$(SERIALBOX2ROOT)/lib -l:libSerialboxFortran.a -lstdc++fs -lstdc++
                                ;;
                        esac
                        ;;
                    pgi*)
                        #FFLAGS      = -O $FDEBUG -Mpreprocess -Mrecursive -Mallocatable=03 $INCLUDES
                        FFLAGS      = -O -Mpreprocess -Mrecursive -Mallocatable=03 $INCLUDES
                        F77FLAGS    = $FFLAGS
                        CFLAGS      = -DpgiFortran -DHAVE_LIBNETCDF -DHAVE_NETCDF2 -DHAVE_NETCDF4 -O2
                        SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.2/PGI/18.5
                        OTHER_LIBS  = -Bdynamic -L/usr/lib64 -llzma
                        LAPACKROOT  = ${PGI}/linux86-64/${PGI_VERSION}
                        LAPACK_LIB  = -llapack -lblas
                        config_tuning = $(tmp=${fortran_compiler#'pgi'};tmp=${tmp#_};tmp=${tmp:-default};echo $tmp)
                        # Generic CPU/GPU setup
                        case "${config_tuning}" in
                            gpu*)
                                config_target = daint_gpu
                                FFLAGS        = ${FFLAGS} -acc=verystrict -ta=nvidia:cc60,cuda9.1 -Minfo=accel,inline -Mcuda
                                LDFLAGS       = -ta=nvidia:cc60,cuda9.1 -Mcuda -Mnorpath
                                ;;
                            *)
                                config_target = daint_cpu
                                FFLAGS        = ${FFLAGS} -D__LOOP_EXCHANGE -tp=haswell
                                LDFLAGS       = -tp=haswell -Mnorpath -dynamic
                                ;;
                        esac
                        # Setup of specific version
                        case "${config_tuning}" in
                            default|standalone)
                                load_modules = daint-gpu PrgEnv-pgi gcc/6.2.0 cray-netcdf cray-hdf5
                                NETCDFROOT  = ${NETCDF_DIR}
                                HDF5ROOT    = ${HDF5_DIR}
                                ;;
                            gpu_1810*)
                                SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.2/PGI/18.10
                                load_modules = daint-gpu PrgEnv-pgi /project/c14/data-eniac/modulefiles/eniac/pgi-18.10 gcc/6.2.0 cray-netcdf cray-hdf5 cudatoolkit
                                NETCDFROOT  = ${NETCDF_DIR}
                                HDF5ROOT    = ${HDF5_DIR}
                                ;;
                            gpu*)
                                load_modules = daint-gpu PrgEnv-pgi gcc/6.2.0 cray-netcdf cray-hdf5 cudatoolkit
                                NETCDFROOT  = ${NETCDF_DIR}
                                HDF5ROOT    = ${HDF5_DIR}
                                ;;
                            1810*)
                                SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.2/PGI/18.10
                                load_modules = daint-gpu PrgEnv-pgi /project/c14/data-eniac/modulefiles/eniac/pgi-18.10 gcc/6.2.0 cray-netcdf cray-hdf5
                                NETCDFROOT  = ${NETCDF_DIR}
                                HDF5ROOT    = ${HDF5_DIR}
                                ;;
                            *)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "Unknown tuning $config_tuning for $fortran_compiler selected.")
                                (>&6 echo "")
                                exit 1
                                ;;
                        esac
                        # Setup for standalone run
                        case "${config_tuning}" in
                            *standalone)
                                FFLAGS      = ${FFLAGS} -I\$(SERIALBOX2ROOT)/include
                                OTHER_LIBS  = ${OTHER_LIBS} \$(SERIALBOX2ROOT)/lib/libSerialboxFortran.a ${GCC_PATH}/snos/lib64/libstdc++fs.a -lstdc++
                                ;;
                        esac
                        ;;
                    cray*)
                        FFLAGS      = -DgFortran -e Z -em -hadd_paren -r am -Ktrap=divz,ovf,inv
                        F77FLAGS    = $FFLAGS
                        CFLAGS      = -g -DgFortran -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_NETCDF2 -O3 -DUSE_XML2
                        SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.2/CCE/8.7.3
                        OTHER_LIBS  = -L/apps/daint/UES/6.0.UP02/sandbox-ws/jasper/2.0.10/CRAY/8.5.5/lib -l:libjasper.a -dynamic -L/usr/lib64 -llzma
                        config_tuning = $(tmp=${fortran_compiler#'cray'};tmp=${tmp#_};tmp=${tmp:-default};echo $tmp)
                        # Generic CPU/GPU setup
                        case "${config_tuning}" in
                            gpu*)
                                config_target = daint_gpu
                                FFLAGS      = ${FFLAGS} -hflex_mp=intolerant -hfp0 -hacc -hnoomp -O2
                                LDFLAGS     = -Wl,--allow-multiple-definition
                                ;;
                            *)
                                config_target = daint_cpu
                                FFLAGS      = ${FFLAGS} -D__LOOP_EXCHANGE -hflex_mp=intolerant -hfp1 -hnoacc -O1,cache0
                                LDFLAGS     = -Wl,--allow-multiple-definition
                                ;;
                        esac
                        # Setup of specific version
                        case "${config_tuning}" in
                            default|standalone)
                                load_modules = modules craype daint-gpu PrgEnv-cray cray-netcdf cray-hdf5 cray-libsci
                                NETCDFROOT  = ${NETCDF_DIR}
                                HDF5ROOT    = ${HDF5_DIR}
                                LAPACKROOT  = ${CRAY_LIBSCI_PREFIX_DIR}
                                LAPACK_LIB  = -lsci_cray
                                ;;
                            gpu*)
                                load_modules = modules craype daint-gpu PrgEnv-cray cray-netcdf cray-hdf5 craype-accel-nvidia60
                                NETCDFROOT  = ${NETCDF_DIR}
                                HDF5ROOT    = ${HDF5_DIR}
                                LAPACKROOT  = ${CRAY_LIBSCI_PREFIX_DIR}
                                LAPACK_LIB  = -lsci_cray
                                ;;
                            *)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "Unknown tuning $config_tuning for $fortran_compiler selected.")
                                (>&6 echo "")
                                exit 1
                                ;;
                        esac
                        # Setup for standalone run
                        case "${config_tuning}" in
                            *standalone)
                                FFLAGS      = ${FFLAGS} -I\$(SERIALBOX2ROOT)/include
                                OTHER_LIBS  = ${OTHER_LIBS} -L\$(SERIALBOX2ROOT)/lib -l:libSerialboxFortran.a -lstdc++fs -lstdc++
                                ;;
                        esac
                        ;;
                    *)
                        echo
                        echo
                        echo "No supported Fortran compiler selected."
                        echo
                        exit 1
                        ;;
                esac
                mpi_startrun = srun -n \$mpi_total_procs --ntasks-per-node \$mpi_procs_pernode --threads-per-core=1 --cpus-per-task \$OMP_NUM_THREADS
                ;;
            *tave*)
                make_command = make -j 8
                load_profile = /opt/modules/default/etc/modules.sh
                submit       = sbatch
                CC = cc
                FC = ftn
                F77= ftn
                #  GRIBAPIROOT = /apps/daint/UES/6.0.UP02/sandbox-ws/grib_api   # needs to be installed
		
                case "$fortran_compiler" in
                    gcc)
                        config_target=tave_knl
                        load_modules =PrgEnv-gnu cray-netcdf cray-mpich craype-mic-knl
                        CFLAGS      = -DgFortran -DHAVE_LIBNETCDF
                        NETCDFROOT  = /opt/cray/pe/netcdf/4.4.1/GNU/5.1
                        SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.0/GNU/5.3.0
			;;
                    intel)
                        config_target=tave_knl
                        load_modules = PrgEnv-intel cray-netcdf cray-mpich craype-mic-knl
                        CFLAGS      = -std=gnu99 -march=native -DgFortran -DHAVE_LIBNETCDF
                        STD_FLAGS   = -O2 -mavx -fltconsistency -g -pc64 -fpp -traceback  -D__LOOP_EXCHANGE
                        FFLAGS      = -g -pc64 -fpp -D__LOOP_EXCHANGE
                        NETCDFROOT  = /opt/cray/pe/netcdf/4.4.1/INTEL/15.0
                        F77FLAGS    = $FFLAGS $STD_FLAGS
                        MODDIR      = -I
                        SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.0/INTEL/17.0.4.196
			;;
                    pgi)
                        config_target=tave_knl
                        load_modules = PrgEnv-pgi cray-netcdf cray-mpich craype-mic-knl
                        CFLAGS      = -DpgiFortran -DHAVE_LIBNETCDF
                        NETCDFROOT  = /opt/cray/pe/netcdf/4.4.1/PGI/15.3
                        SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.0/PGI/18.4
			;;
                    cray)
                        config_target=tave_knl
                        load_modules = PrgEnv-cray cray-netcdf cray-mpich craype-mic-knl
                        FFLAGS      = -D__LOOP_EXCHANGE -Df2cFortran -e Z -em -hflex_mp=intolerant -hfp1 -hadd_paren -hnoacc -O1,cache0 -r am -Ktrap=divz,ovf,inv
                        CFLAGS      = -Df2cFortran -DHAVE_LIBNETCDF -O3 -DUSE_XML2
                        NETCDFROOT  = /opt/cray/pe/netcdf/default/CRAY/8.3
			HDF5ROOT    = /opt/cray/pe/hdf5/default/CRAY/8.3
                        OTHER_LIBS  =
                        SERIALBOX2ROOT = /apps/daint/UES/6.0.UP04/sandboxes/wsawyer/serialbox2/2.4.0/CCE/8.7.0
			;;
                    *)
                        echo
                        echo
                        echo "No supported Fortran compiler selected."
                        echo
                        exit 1
                        ;;
                esac
                mpi_startrun = srun -n \$mpi_total_procs --ntasks-per-node \$mpi_procs_pernode --threads-per-core=1 --cpus-per-task \$OMP_NUM_THREADS
                ;;
            *kesch*)
                make_command = make -j 6
                load_profile ="/etc/profile.d/modules.sh"
                submit       = sbatch
                sync_submit  = sbatch --wait
                XML2ROOT     = /usr
                ZLIBROOT     = /usr

                case "$fortran_compiler" in
                    gcc*)
                        CC = mpicc
                        FC = mpif90
                        F77= mpif90
                        FFLAGS        = $FLANG $FWARN -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -DgFortran -cpp -O2
                        CFLAGS        = -D_XOPEN_SOURCE=700 -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -O2 -std=c99 -DgFortran -DHAVE_LIBNETCDF -DHAVE_NETCDF2 -DHAVE_NETCDF4
                        GRIBAPIROOT    = /project/c14/install/kesch/libgrib_api/v1.20.0.2/gnu/
                        SERIALBOX2ROOT = /project/c14/install/kesch/serialbox2_v2.4.2/gnu
                        config_tuning = $(tmp=${fortran_compiler#'gcc'};tmp=${tmp#_};tmp=${tmp:-default};echo $tmp)
                        # Generic CPU/GPU setup
                        case "${config_tuning}" in
                            gpu*)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "OpenACC is not supported with GCC.")
                                (>&6 echo "")
                                ;;
                            ftg)
                                config_target = kesch_cpu
                                STD_FLAGS   = -fbacktrace -fbounds-check -fstack-protector-all $FCHECK
                                FFLAGS        = ${FLANG/ffree-line-length-132/ffree-line-length-none} $FWARN -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -D__LOOP_EXCHANGE -DgFortran -cpp -save-temps -O -g -DFORCE_FTG_SERIALIZATION
                                config_tuning = "standalone"
                                ;;
                            *)
                                config_target = kesch_cpu
                                FFLAGS        = ${FFLAGS} -D__LOOP_EXCHANGE
                                ;;
                        esac
                        # Setup of specific version
                        case "${config_tuning}" in
                            default|standalone)
                                load_modules  = git/2.14.1 craype-haswell PrgEnv-gnu netcdf netcdf-fortran hdf5 cray-libsci
                                NETCDFROOT    = ${EBROOTNETCDF}
                                NETCDFFROOT   = ${EBROOTNETCDFMINFORTRAN}
                                HDF5ROOT      = ${EBROOTHDF5}
                                LAPACKROOT    = ${CRAY_LIBSCI_PREFIX_DIR}
                                LAPACK_LIB    = -lsci_cray
                                OTHER_LIBS    = -lpthread
                                ;;
                            *)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "Unknown tuning $config_tuning for $fortran_compiler selected.")
                                (>&6 echo "")
                                ;;
                        esac
                        # Setup for standalone run
                        case "${config_tuning}" in
                            *standalone)
                                FFLAGS      = ${FFLAGS} -I\$(SERIALBOX2ROOT)/include
                                OTHER_LIBS  = ${OTHER_LIBS} -L\$(SERIALBOX2ROOT)/lib -l:libSerialboxFortran.a -lstdc++fs -lstdc++
                                ;;
                        esac
                        ;;
                    pgi*)
                        CC = mpicc
                        FC = mpif90
                        F77= mpif90
                        FFLAGS         = -Mpreprocess -Mrecursive -Mallocatable=03 $INCLUDES
                        F77FLAGS       = $FFLAGS
                        CFLAGS         = -c99 -DpgiFortran -DHAVE_LIBNETCDF -DHAVE_NETCDF2 -DHAVE_NETCDF4
                        GRIBAPIROOT    = /project/c14/install/kesch/libgrib_api/v1.20.0.2/pgi/
                        SERIALBOX2ROOT = /project/c14/install/kesch/serialbox2_v2.4.2/pgi
                        LAPACKROOT  = ${PGI}/linux86-64/17.10
                        LAPACK_LIB  = -llapack -lblas
                        config_tuning  = $(tmp=${fortran_compiler#'pgi'};tmp=${tmp#_};tmp=${tmp:-default};echo $tmp)
                        # Generic CPU/GPU setup
                        case "${config_tuning}" in
                            gpu*)
                                config_target = kesch_gpu
                                FFLAGS        = ${FFLAGS} -acc=verystrict -ta=tesla,cc35,cuda8.0 -Minfo=accel,inline
                                LDFLAGS       = -ta=tesla,cc35,cuda8.0
                                ;;
                            *)
                                config_target = kesch_cpu
                                FFLAGS        = ${FFLAGS} -D__LOOP_EXCHANGE
                                ;;
                        esac
                        # Setup of specific version
                        case "${config_tuning}" in
                            default|standalone)
                                load_modules  = git/2.14.1 PrgEnv-pgi/17.10 pgi/17.10 gcc/5.4.0-2.26 mvapich2gdr_gnu/2.3a_cuda_8.0_pgi17.10 netcdf/4.4.1.1/2017
                                NETCDFROOT    = ${NETCDF_ROOT}
                                HDF5ROOT      = ${NETCDF_ROOT}
                                ;;
                            gpu*)
                                load_modules  = git/2.14.1 PrgEnv-pgi/17.10 pgi/17.10 gcc/5.4.0-2.26 mvapich2gdr_gnu/2.3a_cuda_8.0_pgi17.10 netcdf/4.4.1.1/2017
                                NETCDFROOT    = ${NETCDF_ROOT}
                                HDF5ROOT      = ${NETCDF_ROOT}
                                ;;
                            *)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "Unknown tuning $config_tuning for $fortran_compiler selected.")
                                (>&6 echo "")
                                exit 1
                                ;;
                        esac
                        # Setup for standalone run
                        case "${config_tuning}" in
                            *standalone)
                                FFLAGS      = ${FFLAGS} -I\$(SERIALBOX2ROOT)/include
                                OTHER_LIBS  = ${OTHER_LIBS} -L\$(SERIALBOX2ROOT)/lib \$(SERIALBOX2ROOT)/lib/libSerialboxFortran.a -lstdc++fs -lstdc++
                                ;;
                        esac
                        ;;
                    cray*)
                        CC = cc
                        FC = ftn
                        F77= ftn
                        # FDEBUG        = -O0 -g -Rb -Rc -Rd -Rp #-Rs leads to ICE
                        FFLAGS        = -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -Df2cFortran -e Z -em -hadd_paren -r am -Ktrap=divz,ovf,inv
                        # CDEBUG       = -O0 -g
                        CFLAGS        = -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -Df2cFortran -DHAVE_LIBNETCDF -DHAVE_NETCDF2 -DHAVE_NETCDF4 -O3 -DUSE_XML2
                        LDFLAGS       = -Wl,--allow-multiple-definition
                        GRIBAPIROOT    = /project/c14/install/kesch/libgrib_api/v1.20.0.2/cray/
                        SERIALBOX2ROOT = /project/c14/install/kesch/serialbox2_v2.4.2/cray
                        config_tuning = $(tmp=${fortran_compiler#'cray'};tmp=${tmp#_};tmp=${tmp:-default};echo $tmp)
                        # Generic CPU/GPU setup
                        case "${config_tuning}" in
                            gpu*)
                                config_target = kesch_gpu
                                FFLAGS        = ${FFLAGS} -hnoomp -hflex_mp=intolerant -hfp0 -Ocache0,ipa1
                                ;;
                            *)
                                config_target = kesch_cpu
                                FFLAGS        = ${FFLAGS} -D__LOOP_EXCHANGE -hflex_mp=conservative -hfp1 -hnoacc -Ocache0
                                ;;
                        esac
                        # Setup of specific version
                        case "${config_tuning}" in
                            default|standalone)
                                load_modules  = git/2.14.1 craype-haswell PrgEnv-cray netCDF netCDF-Fortran HDF5 cray-libsci
                                NETCDFROOT    = ${EBROOTNETCDF}
                                NETCDFFROOT   = ${EBROOTNETCDFMINFORTRAN}
                                HDF5ROOT      = ${EBROOTHDF5}
                                LAPACKROOT    = ${CRAY_LIBSCI_PREFIX_DIR}
                                LAPACK_LIB    = -lsci_cray
                                ;;
                            gpu*)
                                load_modules  = git/2.14.1 craype-haswell PrgEnv-cray craype-accel-nvidia35 netCDF netCDF-Fortran HDF5 cray-libsci
                                NETCDFROOT    = ${EBROOTNETCDF}
                                NETCDFFROOT   = ${EBROOTNETCDFMINFORTRAN}
                                HDF5ROOT      = ${EBROOTHDF5}
                                LAPACKROOT    = ${CRAY_LIBSCI_PREFIX_DIR}
                                LAPACK_LIB    = -lsci_cray
                                ;;
                            *)
                                (>&6 echo "")
                                (>&6 echo "")
                                (>&6 echo "Unknown tuning $config_tuning for $fortran_compiler selected.")
                                (>&6 echo "")
                                exit 1
                                ;;
                        esac
                        # Setup for standalone run
                        case "${config_tuning}" in
                            *standalone)
                                FFLAGS      = ${FFLAGS} -I\$(SERIALBOX2ROOT)/include
                                OTHER_LIBS  = ${OTHER_LIBS} -L\$(SERIALBOX2ROOT)/lib -l:libSerialboxFortran.a -lstdc++fs -lstdc++
                                ;;
                        esac
                        ;;
                    *)
                        (>&6 echo "")
                        (>&6 echo "")
                        (>&6 echo "No supported Fortran compiler selected.")
                        (>&6 echo "")
                        exit 1
                        ;;
                esac
                mpi_startrun = srun -n \$mpi_total_procs --ntasks-per-node \$mpi_procs_pernode --threads-per-core=1 --cpus-per-task \$OMP_NUM_THREADS
                ;;
        esac
        ;;

#===============================================
    
    *dwd.de)
        case "$(hostname)" in
            xc*)
                XML2ROOT    = /opt/cray/xc-sysroot/default/usr
                NETCDFROOT  = ${NETCDF_DIR}
                CC          = cc
                FC          = ftn
                F77         = ftn
                submit      = qsub
                sync_submit = qsub -Wblock=true

                make_command=make -j 8
                case "$fortran_compiler" in
                    cray)
                      load_modules    = cray-netcdf cray-hdf5
		      #	Add "eccodes" GRIB library, if nothing else has been
		      # set.  Note that we use an intermediate variable
		      # "dwd_gribapi_env"! Since mh-linux is processed twice
		      # during configure we cannot simply ask for the
		      # existence of module-specific environment variables.
                      if test -n "$dwd_gribapi_env"; then
                        load_modules    = $load_modules aec eccodes 
                      fi  
                      RTTOV_LIBS      = -L/usr/local/pkg/for0adm/lib -L/usr/local/pkg/for0adm/lib/unsupported -lradiance -lrttov10.2 -lhrit_tools
                      OTHER_LIBS      = $RTTOV_LIBS $OTHER_LIBS
                      STD_FLAGS       = -D__USE_RTTOV -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED
                      FFLAGS          = ${FFLAGS} -I/usr/local/pkg/for0adm/include/radiance
                      ;;
                    default|gcc)
                      FFLAGS          = ${FFLAGS}
                      OTHER_LIBS      = $OTHER_LIBS
                      ;;
                esac
                ;;
            lc*)
                NETCDFROOT = ${NETCDF_DIR}
                make_command = make -j 8
                case "$fortran_compiler" in
                    intel*)
                      load_modules    = netcdf ${load_modules}
                      CFLAGS          = -DHAVE_LIBNETCDF ${CFLAGS}
                      STD_FLAGS       = -O2 -xAVX -fltconsistency -pc64 -fpp -traceback  -D__LOOP_EXCHANGE
                      FFLAGS          = ${FFLAGS}
                      F77FLAGS        = ${FFLAGS} ${STD_FLAGS}
                      LIBS            = ${LIBS}
                      FC              = ifort
                      CC              = icc
                      ;;
                    default|gcc)
                      load_modules    = netcdf ${load_modules}
                      FFLAGS          = ${FFLAGS}
                      FC              = gfortran
                      CC              = gcc
                      ;;
                esac
                ;;
            oflws*)             # Linux workstations with gfortran
                NETCDFROOT            = /usr
                NETCDFLIBPATH         = /usr/lib64
                IB_LIBS               = -ldl -Wl,--export-dynamic -lutil -lm -ldl
                CC                    = /usr/lib64/mpi/gcc/openmpi/bin/mpicc
                FC                    = /usr/lib64/mpi/gcc/openmpi/bin/mpif90
                MPI_INCLUDE           = /usr/lib64/mpi/gcc/openmpi/include
                config_target         = oflws
                make_command          = make -j8
                ;;
            *)                  # hpc
                NETCDFROOT  = /usr/local/pkg
                config_target=hpc
                make_command=make
                submit=qsubw
                sync_submit=qsub -W block=true
                ;;
        esac
        ;;

#===============================================

    dkrz.de|bullx)
        case "$(hostname)" in
            btlogin*|btc*|mlogin*)
                load_modules  = ncl/6.2.1-gccsys cdo/1.9.5-gcc64 svn/1.8.13 ${load_modules}
                load_profile  = /etc/profile
                software_tree = /sw/rhel6-x64
                config_target = bullx
                make_command  = make -j 8
                submit        = sbatch
                sync_submit   = sbatch --wait
                queue         = compute
                case "$fortran_compiler" in
                    intel*)
                        case "$fortran_compiler" in
                          intel15|intel15.*)
                            load_modules    = intel/15.0.1 ${load_modules}
                            ;;
                          intel14)
                            load_modules    = intel/14.0.3 ${load_modules}
                            ;;
                          intel16)
                            load_modules = intel/16.0 ${load_modules}
                            ;;
                          intel18)
                            load_modules = intel/18.0.4 ${load_modules}
                            ;;
                          intel17|intel*)
                            load_modules = intel/17.0.6 ${load_modules}
                            ;;
                        esac
                        config_compiler = intel
                        CC          = icc
                        CFLAGS      = -std=gnu99 -gdwarf-4 -O3 -qno-opt-dynamic-align -ftz -march=native -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_NETCDF2 -DHAVE_LIBSZ -DgFortran
                        ccversion   = $(icc --version 2>&1 | awk 'NR==1')
                        F77         = ifort
                        FC          = ifort
                        # temporarily removed -check uninit since it fails
                        # for lapack/dpftri.f with -march=core-avx2 and
                        # intel 14.0.3
                        CHECK_FLAGS = -check bounds -check pointers -debug -g -traceback
                        DEBUG_FLAGS = -debug-parameters -debug -gdwarf-4 -O0
                        FPPFLAGS    = -fpp
                        STD_FLAGS   = -ftz -O2 -march=native -pc64 -fp-model source -g -DIFORT_CONSISTENCY_ENFORCE -DLRTM_FULL_VECTORIZATION -D__LOOP_EXCHANGE
                        HIOPT_FLAGS = -O3 -march=native -mkl=sequential -pc64 -no-prec-div -no-prec-sqrt -fast-transcendentials -reentrancy threaded -D__LOOP_EXCHANGE
                        OCEAN_FLAGS = -O3 -march=native -pc64 -fp-model source -assume norealloc_lhs -mkl=sequential -reentrancy threaded -qopt-report-file=stdout -qopt-report=0 -qopt-report-phase=vec -D__OMP_FIRSTTOUCH_
                        FFLAGS      = $FPPFLAGS -assume realloc_lhs
                        LDFLAGS     = -gdwarf-4
                        F77FLAGS    = $FPPFLAGS

                        NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.2-intel14
                        NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.3.2-gcc48
                        HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.14-threadsafe-gcc48
                        GRIBAPIROOT = $software_tree/grib_api/grib_api-1.15.0-gcc48
                        SZIPROOT    = $software_tree/sys/libaec-0.3.2-gcc48
                        XML2ROOT    = /usr
                        ZLIBROOT    = /usr

                        case "$with_mpi" in
                            "$software_tree/intel/impi/5.1.0.038_dapl2.1.6/compilers_and_libraries_2016.0.079/linux/mpi/intel64")
                                load_modules = ${load_modules} intelmpi/5.1.0.038_dapl2.1.6
                                FFLAGS       = $FFLAGS -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -DHAVE_PARALLEL_NETCDF
                                MPIROOT      = $with_mpi/compilers_and_libraries_2016.0.079/linux/mpi/intel64
                                MPI_LIB      = $WLFLAG,--disable-new-dtags -L$MPIROOT/lib/release_mt $WLFLAG,-rpath,$MPIROOT/lib/release_mt -L$MPIROOT/lib $WLFLAG,-rpath,$MPIROOT/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread
                                NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.3-parallel-impi-intel14
                                NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.4.0-parallel-impi-intel14
                                HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.16-parallel-impi-intel14
                                ;;
                            "$software_tree/intel/impi/4.1.3.049"|"$software_tree/intel/impi/4.1.3.049/intel64")
                                FFLAGS = $FFLAGS -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -DHAVE_PARALLEL_NETCDF
                                load_modules=${load_modules} intelmpi/4.1.3.049

                                MPIROOT     = $software_tree/intel/impi/4.1.3.049/intel64
                                SYS_LIBS    = -ldl -lrt -lpthread
                                MPI_LIB     = $WLFLAG,-rpath,$MPIROOT/lib -lmpigf -lmpi -lmpigi $SYS_LIBS
                                NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.2-parallel-impi-intel14
                                NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.3.2-parallel-impi-intel14
                                HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.14-parallel-impi-intel14

                                case "${with_openmp}" in
                                  yes)
                                    MPI_LIB=${MPI_LIB/ -lmpi / -lmpi_mt }
                                    ;;
                                esac
                                ;;
                            "${software_tree}/intel/impi/2017.0.098")
                                load_modules = ${load_modules} intelmpi/2017.0.098
                                FFLAGS       = $FFLAGS -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -DHAVE_PARALLEL_NETCDF
                                MPIROOT      = /sw/rhel6-x64/intel/impi/2017.0.098/compilers_and_libraries/linux/mpi/intel64
                                MPI_LIB      = $WLFLAG,--disable-new-dtags -L$MPIROOT/lib $WLFLAG,-rpath,$MPIROOT/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread
                                NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.3-parallel-impi-intel14
                                NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.4.0-parallel-impi-intel14
                                HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.16-parallel-impi-intel14
                                ;;
                            "${software_tree}/intel/impi/2017.2.174")
                                load_modules = ${load_modules} intelmpi/2017.2.174
                                FFLAGS       = $FFLAGS -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -DHAVE_PARALLEL_NETCDF
                                MPIROOT      = /sw/rhel6-x64/intel/impi/2017.2.174/compilers_and_libraries/linux/mpi/intel64
                                MPI_LIB      = $WLFLAG,--disable-new-dtags -L$MPIROOT/lib $WLFLAG,-rpath,$MPIROOT/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread
                                NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.2-parallel-impi-intel14
                                NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.3.2-parallel-impi-intel14
                                HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.14-parallel-impi-intel14
                                ;;
                            "${software_tree}/intel/impi/2018.1.163")
                                load_modules = ${load_modules} intelmpi/2018.1.163
                                FFLAGS       = $FFLAGS -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -DHAVE_PARALLEL_NETCDF
                                MPIROOT      = /sw/rhel6-x64/intel/impi/2017.2.174/compilers_and_libraries/linux/mpi/intel64
                                MPI_LIB      = $WLFLAG,--disable-new-dtags -L$MPIROOT/lib $WLFLAG,-rpath,$MPIROOT/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread
                                NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.2-parallel-impi-intel14
                                NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.3.2-parallel-impi-intel14
                                HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.14-parallel-impi-intel14
                                ;;
                            "${software_tree}/mpi/openmpi-1.10.1_mlx-intel16")
                                load_modules = ${load_modules} openmpi/1.10.1_mlx-intel16
                                FFLAGS       = $FFLAGS -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -DHAVE_PARALLEL_NETCDF
                                FFLAGS       = $FFLAGS -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -DHAVE_PARALLEL_NETCDF
                                MPIROOT      = ${software_tree}/mpi/openmpi-1.10.1_mlx-intel16
                                MPI_LIB      = -L${MPIROOT}/lib     -Wl,-rpath -Wl,${MPIROOT}/lib -Wl,--enable-new-dtags -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lm -lnuma -ldl -losmcomp -libverbs -lutil
                                NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.2-parallel-impi-intel14
                                NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.3.2-parallel-impi-intel14
                                HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.14-parallel-impi-intel14
                                ;;
                            /opt/mpi/bullxmpi_mlx/1.2.9.2)
                                load_modules = ${load_modules} fca/2.5.2431 mxm/3.4.3082 bullxmpi_mlx/bullxmpi_mlx-1.2.9.2
                                FFLAGS       = $FFLAGS -DHAVE_PARALLEL_NETCDF
                                MPIROOT      = /opt/mpi/bullxmpi_mlx/1.2.9.2
                                SYS_LIBS     = -ldl -lm -lnuma -Wl,--export-dynamic -lrt -lnsl -lutil -lm -ldl
                                MPI_LIB      = $WLFLAG,-rpath,${MPIROOT}/lib -lmpi_f90 -lmpi_f77 -lmpi $SYS_LIBS
                                NETCDFFROOT  = $software_tree/netcdf/netcdf_fortran-4.4.3-parallel-bullxmpi-intel14
                                NETCDFROOT   = $software_tree/netcdf/netcdf_c-4.4.0-parallel-bullxmpi-intel14
                                HDF5ROOT     = $software_tree/hdf5/hdf5-1.8.16-parallel-bullxmpi-intel14
                                ;;
                            no)
                                ;;
                            "$software_tree/mpi/openmpi-2.0.2p2_hpcx-intel14/"|"openmpi/2.0.2p2_hpcx-intel14")
                                load_modules = ${load_modules} openmpi/2.0.2p2_hpcx-intel14
                                FFLAGS       = $FFLAGS -DHAVE_PARALLEL_NETCDF
                                MPIROOT      = $software_tree/mpi/openmpi-2.0.2p2_hpcx-intel14
                                SYS_LIBS     = -ldl -lm -lnuma $WLFLAG,--export-dynamic -lrt -lnsl -lutil -lm -ldl
                                MPI_LIB      = $WLFLAG,-rpath $WLFLAG,/sw/rhel6-x64/mpi/openmpi-2.0.2p2_hpcx-intel14/lib $WLFLAG,--enable-new-dtags -L/sw/rhel6-x64/mpi/openmpi-2.0.2p2_hpcx-intel14/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi
                                NETCDFFROOT  = $software_tree/netcdf/netcdf_fortran-4.4.3-parallel-openmpi2-intel14
                                NETCDFROOT   = $software_tree/netcdf/netcdf_c-4.4.0-parallel-openmpi2-intel14
                                HDF5ROOT     = $software_tree/hdf5/hdf5-1.8.18-parallel-openmpi2-intel14
                                ;;
                            "$software_tree/mpi/openmpi-2.0.2p1_hpcx-intel14/"|"openmpi/2.0.2p1_hpcx-intel14"|*)
                                load_modules = ${load_modules} openmpi/2.0.2p1_hpcx-intel14
                                FFLAGS       = $FFLAGS -DHAVE_PARALLEL_NETCDF -DDO_NOT_COMBINE_PUT_AND_NOCHECK
                                MPIROOT      = $software_tree/mpi/openmpi-2.0.2p1_hpcx-intel14
                                SYS_LIBS     = -ldl -lm -lnuma $WLFLAG,--export-dynamic -lrt -lnsl -lutil -lm -ldl
                                MPI_LIB      = $WLFLAG,-rpath $WLFLAG,/sw/rhel6-x64/mpi/openmpi-2.0.2p1_hpcx-intel14/lib $WLFLAG,--enable-new-dtags -L/sw/rhel6-x64/mpi/openmpi-2.0.2p1_hpcx-intel14/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi
                                NETCDFFROOT  = $software_tree/netcdf/netcdf_fortran-4.4.3-parallel-openmpi2-intel14
                                NETCDFROOT   = $software_tree/netcdf/netcdf_c-4.4.0-parallel-openmpi2-intel14
                                HDF5ROOT     = $software_tree/hdf5/hdf5-1.8.18-parallel-openmpi2-intel14
                                ;;
                        esac
                        mpi_startrun = srun
                        ;;
                    gcc*)
                        load_modules    = gcc/6.4.0 ${load_modules}
                        config_compiler = gcc
                        c_compiler_version = $(gcc --version | awk 'NR==1{split($NF,v,"."); printf("gcc%1d%1d", v[1], v[2])}')
                        CC     = gcc
                        CFLAGS = -std=gnu99 -g -O3 -march=native -mpc64 -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_NETCDF2 -DHAVE_LIBSZ  -DgFortran -DWITHOUT_PACK_EXTERNAL
                        F77    = gfortran
                        FC     = gfortran
                        LDFLAGS     = -g
                        OCEAN_FLAGS = -march=native -O3 -mpc64 -D__LOOP_EXCHANGE -g

                        NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.3-gcc62
                        NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.4.0-gcc48
                        HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.14-threadsafe-gcc48
                        SZIPROOT    = $software_tree/sys/libaec-0.3.2-gcc48
                        XML2ROOT    = /usr
                        ZLIBROOT    = /usr
                        GRIBAPIROOT = $software_tree/grib_api/grib_api-1.15.0-gcc48

                        case "$with_mpi" in
                            "${software_tree}/intel/impi/2017.2.174")
                                load_modules = ${load_modules} intelmpi/2017.2.174
                                FFLAGS       = $FFLAGS -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED
                                MPIROOT      = $software_tree/intel/impi/2017.2.174/compilers_and_libraries_2017.2.174/linux/mpi/intel64
                                MPI_LIB      = $WLFLAG,--disable-new-dtags -L$MPIROOT/lib/release_mt $WLFLAG,-rpath,$MPIROOT/lib/release_mt -L$MPIROOT/lib $WLFLAG,-rpath,$MPIROOT/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread
                                ;;
                            "${software_tree}/intel/impi/2018.1.163")
                                load_modules = ${load_modules} intelmpi/2018.1.163
                                FFLAGS       = $FFLAGS -DHAVE_SLOW_PASSIVE_TARGET_ONESIDED
                                MPIROOT      = $software_tree/intel/impi/2018.1.163/compilers_and_libraries_2018.1.163/linux/mpi/intel64
                                MPI_LIB      = $WLFLAG,--disable-new-dtags -L$MPIROOT/lib/release_mt $WLFLAG,-rpath,$MPIROOT/lib/release_mt -L$MPIROOT/lib $WLFLAG,-rpath,$MPIROOT/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread
                                ;;
                            "$software_tree/mpi/openmpi/2.0.2p1_hpcx-gcc64"|*)
                                load_modules = ${load_modules} openmpi/2.0.2p1_hpcx-gcc64
                                FFLAGS       = $FFLAGS -DHAVE_PARALLEL_NETCDF -DDO_NOT_COMBINE_PUT_AND_NOCHECK
                                MPIROOT      = $software_tree/mpi/openmpi-2.0.2p1_hpcx-gcc64
                                SYS_LIBS     = -ldl -lm -lnuma $WLFLAG,--export-dynamic -lrt -lnsl -lutil -lm -ldl
                                MPI_LIB      = $WLFLAG,-rpath $WLFLAG,/sw/rhel6-x64/mpi/openmpi-2.0.2p1_hpcx-gcc64/lib $WLFLAG,--enable-new-dtags -L/sw/rhel6-x64/mpi/openmpi-2.0.2p1_hpcx-gcc64/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi
                                NETCDFFROOT  = $software_tree/netcdf/netcdf_fortran-4.4.3-parallel-openmpi2-gcc64
                                NETCDFROOT   = $software_tree/netcdf/netcdf_c-4.4.0-parallel-openmpi2-gcc64
                                HDF5ROOT     = $software_tree/hdf5/hdf5-1.8.18-parallel-openmpi2-gcc64
                                ;;
                        esac
                        mpi_startrun = srun
                        ;;
                    nag*)
                        load_modules    = gcc/4.9.2 nag/6.0.1064 ${load_modules}
                        config_compiler = nag
                        c_compiler_version = $(gcc --version | awk 'NR==1{split($NF,v,"."); printf("gcc%1d%1d", v[1], v[2])}')
                        CC     = gcc
                        CFLAGS = -std=gnu99 -g -O3 -march=native -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_NETCDF2 -DHAVE_LIBSZ -DNAGf90Fortran -DWITHOUT_PACK_EXTERNAL
                        F77    = nagfor
                        FC = $(cd $srcdir ; pwd)/scripts/nagfor_wrapper/nagfor

                        NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.2-static-$compiler_version
                        NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.3.2-gcc48
                        HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.14-threadsafe-gcc48
                        SZIPROOT    = $software_tree/sys/libaec-0.3.2-gcc48
                        ZLIBROOT    = /usr
                        GRIBAPIROOT = $software_tree/grib_api/grib_api-1.15.0-gcc48
                        MPIROOT     = /work/mh0287/m214089/mvapich2-2.3-static-nag60
                        MPI_LIB     = -lmpifort -lmpi -libmad -lrdmacm -libumad -libverbs -lnuma -ldl -lrt -lm -lpthread
                        MPI_LAUNCH  = $MPIROOT/bin/mpirun
                        XML2ROOT    = /usr
                        mpi_startrun = srun
                        ;;
                    pgi*)
                        load_modules    = /sw/rhel6-x64/pgi/pgi-18.10/modulefiles/pgi/18.10 ${load_modules}
                        config_compiler = pgi
                        CC              = pgcc
                        CFLAGS          = -O2 -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_NETCDF -DHAVE_LIBSZ -DpgiFortran
                        FFLAGS          = -O -Mpreprocess -Mrecursive -Mallocatable=03

                        NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.4-pgi18.10
                        NETCDFROOT  = $software_tree/netcdf/netcdf_c-4.6.1-gcc64
                        HDF5ROOT    = $software_tree/hdf5/hdf5-1.8.14-threadsafe-gcc48
                        SZIPROOT    = $software_tree/sys/libaec-1.0.2-gcc64
                        XML2ROOT    = /usr
                        ZLIBROOT    = /usr
                        LDFLAGS     = ${LDFLAGS} $WLFLAG,-rpath,$NETCDFFROOT/lib $WLFLAG,-rpath,$NETCDFROOT/lib $WLFLAG,-rpath,$HDF5ROOT/lib $WLFLAG,-rpath,$SZIPROOT/lib

                        MPIROOT     = $software_tree/mpi/openmpi-2.0.2p2_hpcx-pgi18.10
                        MPI_LIB     = -L$MPIROOT/lib $WLFLAG,-rpath,$MPIROOT/lib -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi
                        # for pure CPU version
                        FFLAGS      = ${FFLAGS} -D__LOOP_EXCHANGE -tp=haswell
                        LDFLAGS     = ${LDFLAGS} -tp=haswell -Mnorpath
                        ;;
                    *)
                        echo
                        echo
                        echo "No supported Fortran compiler selected."
                        echo
                        exit 1
                        ;;
                esac
                ;;
        esac
        ;;
#===============================================
    kfa-juelich.de|fz-juelich.de|*jureca*|*juwels*)
        case "$(hostname)" in
            jrl*)
                NETCDFROOT    = $EBROOTNETCDF
                NETCDFLIBPATH = $NETCDFROOT/lib64
                NETCDFFROOT   = $EBROOTNETCDFMINFORTRAN
                HDF5ROOT      = $EBROOTHDF5
                SZIPROOT      = $EBROOTSZIP
                ZLIBROOT      = $EBROOTZLIB
                MPIROOT       = $EBROOTPSMPI
                MPI_LIB       = -L$MPIROOT/lib -lmpi -lmpifort
                load_modules  = Intel ParaStationMPI netCDF-Fortran ${load_modules}
                config_target = jureca
                make_command  = make -j8
                submit        = sbatch
                mpi_startrun  = srun
                ;;
            juqueen*)
                #NETCDFROOT  = /bgsys/local/netcdf
                NETCDFROOT = /homeb/slmet/slmet016/netcdf_xlc
                NETCDFROOT = /homeb/slmet/slmet027/opt/netcdf-c-4.3.2-parallel
                NETCDFFROOT = /homeb/slmet/slmet027/opt/netcdf-fortran-4.4.0-parallel
                HDF5ROOT = /bgsys/local/hdf5
                GRIBAPIROOT = /homea/jjsc20/jjsc2003/opt/grib_api/grib_api-1.23-bgsys
                SZIPROOT = /bgsys/local/szip
                ZLIBROOT = /bgsys/local/zlib
                CFLAGS = $CFLAGS -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_NETCDF2
                IB_LIBS    = -ldl -Wl,--export-dynamic -lutil -lm -ldl -ldrt
                OTHER_LIBS = -L/bgsys/local/parallel-netcdf/v1.3.1/lib -lpnetcdf 
                FFLAGS = $FFLAGS -WF,-DLRTM_FULL_VECTORIZATION
                MPI_LIB    = -WL,-pthread $IB_LIBS -Wl
                config_target=juqueen
                make_command=make -j8
                submit=llsubmit
                mpi_startrun=runjob --ranks-per-node \\\$mpi_procs_pernode --envs OMP_NUM_THREADS=\\\$OMP_NUM_THREADS --exe
                ;;
            juwels*)
				XML2ROOT    = /gpfs/homea/hka21/hka211/xml2
                NETCDFROOT    = $EBROOTNETCDF
                NETCDFLIBPATH = $NETCDFROOT/lib64
                NETCDFFROOT   = $EBROOTNETCDFMINFORTRAN
                HDF5ROOT      = $EBROOTHDF5
                SZIPROOT      = $EBROOTSZIP
                ZLIBROOT      = $EBROOTZLIB
                MPIROOT       = $EBROOTPSMPI
                MPI_LIB       = -L$MPIROOT/lib -lmpi -lmpifort
                config_target = jureca
                make_command  = make -j8
                submit        = sbatch
                mpi_startrun  = srun
                ;;
        esac
        ;;
#===============================================
    kit.edu)
        case $ac_hostname in
            uc1*)
               NETCDFROOT  =  /opt/netcdf/4.4_serial/
               NETCDFFROOT =  /opt/netcdf-fortran/4.4_serial/
               HDF5ROOT    = /opt/hdf5/1.8_serial/
               SZIPROOT    = /pfs/imk/ICON/LIBRARIES_IFORT16/szip
               ZLIBROOT    = /usr
               MPIROOT     = /opt/bwhpc/common/mpi/openmpi/3.0.0-intel-17.0
               GRIBAPIROOT = /pfs/imk/ICON/LIBRARIES_IFORT16/grib-api
               XML2ROOT    = /usr
               MPI_LIB     = -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi
               CFLAGS = $CFLAGS -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_LIBHDF5 -DHAVE_NETCDF2
               STD_FLAGS = $STD_FLAGS -standard-semantics               
               config_target=ic2
               make_command=make -j8
               submit=sbatch
               mpi_startrun=runjob --ranks-per-node \\\$mpi_procs_pernode --envs OMP_NUM_THREADS=\\\$OMP_NUM_THREADS --exe

            ;;
            fh2*)
               case "$fortran_compiler" in
                    intel)
                      echo -e " \n please specify your intel compiler version "
                      exit
                      ;;
                    intel17*)
                             load_modules = compiler/intel/17.0 mpi/openmpi/3.0 lib/netcdf/4.6 lib/hdf5/1.10 lib/netcdf-fortran/4.4 ${load_modules}
                             NETCDFROOT  = /software/all/lib/netcdf/4.6_intel_17.0_openmpi_3.0
                             NETCDFFROOT = /software/all/lib/netcdf-fortran/4.4_intel_17.0_openmpi_3.0
                             HDF5ROOT    = /software/all/lib/hdf5/1.10_intel_17.0_openmpi_3.0
                             SZIPROOT    = /pfs/imk/ICON/LIBRARIES_IFORT16/szip
                             ZLIBROOT    = /usr
                             MPIROOT     = /software/all/mpi/openmpi/3.0_intel_17.0
                             XML2ROOT    = /usr
                             GRIBAPIROOT = /pfs/imk/ICON/LIBRARIES_IFORT16/grib-api
                             GRIB_API = /pfs/imk/ICON/LIBRARIES_IFORT16/grib-api
                             MPI_LIB     = -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi
                             CFLAGS = $CFLAGS -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_NETCDF2
                             STD_FLAGS = $STD_FLAGS -standard-semantics               
                             config_target=fh2
                             make_command=make -j 16
                             submit=sbatch
                             mpi_startrun=/software/all/mpi/openmpi/3.0_intel_17.0/bin/mpirun 
                         ;;
                          intel19|intel19.*)
                             load_modules = compiler/intel/19.0 mpi/openmpi/3.0 lib/netcdf/4.6 lib/hdf5/1.10 lib/netcdf-fortran/4.4 ${load_modules}
                             load_profile = /opt/lmod/lmod/init/sh


                             NETCDFROOT  = /software/all/lib/netcdf/4.6_intel_19.0_openmpi_3.0
                             NETCDFFROOT = /software/all/lib/netcdf-fortran/4.4_intel_19.0_openmpi_3.0
                             HDF5ROOT    = /software/all/lib/hdf5/1.10_intel_19.0_openmpi_3.0
                             SZIPROOT    = /pfs/imk/ICON/LIBRARIES_IFORT16/szip
                             ZLIBROOT    = /usr
                             MPIROOT     = /software/all/mpi/openmpi/3.0_intel_19.0
                             XML2ROOT    = /usr
                             GRIBAPIROOT = /pfs/imk/ICON/LIBRARIES_IFORT16/grib-api
                             GRIB_API = /pfs/imk/ICON/LIBRARIES_IFORT16/grib-api
                             MPI_LIB     = -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi
                             CFLAGS = $CFLAGS -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_NETCDF2
                             STD_FLAGS = $STD_FLAGS -standard-semantics               
                             config_target=fh2
                             make_command=make -j 16
                             submit=sbatch
                             mpi_startrun=/software/all/mpi/openmpi/3.0_intel_19.0/bin/mpirun 

               ;;
                     gcc*)
                      NETCDFROOT  = /opt/netcdf/4.4_serial/
                      NETCDFFROOT = /opt/netcdf-fortran/4.4_serial
                      HDF5ROOT    = /opt/hdf5/1.8_serial/
                      SZIPROOT    = 
                      ZLIBROOT    = /usr
                      MPIROOT     = /software/community/ICON/mpi/1.10.7_gnu7/
                      XML2ROOT    = /usr
                      GRIBAPIROOT = /software/community/ICON/lib/grib_api/rib_api-1.22.0_gnu/
                      GRIB_API = /software/community/ICON/lib/grib_api/rib_api-1.22.0_gnu/
                      MPI_LIB     = -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi
                      CFLAGS = $CFLAGS -DHAVE_LIBNETCDF -DHAVE_NETCDF4 -DHAVE_NETCDF2
                      STD_FLAGS = -g    -march=native -fbacktrace -fstack-protector-all $FCHECK -march=native -O2 -mpc64 -D__LOOP_EXCHANGE

                      config_target=fh2
                      make_command=make -j 16
                      submit=msub
                      mpi_startrun= mpirun
               ;;
               esac
        esac

        ;;              
       
#===============================================
    zmaw.de|mpg.de)
        dist_codename = $(lsb_release -c | awk '{print $2}')
        software_tree = /sw/${dist_codename}-x64
        case "$host" in
            x86_64-*-linux-*)        # 64 bit squeeze, wheezy, jessie, stretch MPI/ZMAW workstation
                load_profile  = /client/etc/profile.zmaw
                config_target = mpipc
                make_command  = make -j 2
                submit        =
                case "$dist_codename" in
                    *jessie*)
                        load_modules = ncl/6.3.0-nodap-precompiled cdo/1.7.1-gcc52 python/2.7-ve6 ${load_modules}   
                        ZLIBROOT     = /usr
                        SZIPROOT     = $software_tree/szip-2.1-static-gccsys
                        NETCDFFROOT  = $software_tree/netcdf_fortran-4.4.2-static-${compiler_version}
                        NETCDFROOT   = $software_tree/netcdf-4.3.3.1-static-gccsys
                        HDF5ROOT     = $software_tree/hdf5-1.8.16-static-gccsys
                        GRIBAPIROOT  = $software_tree/grib_api-1.14.3-static-${compiler_version}
                        SYS_LIBS     = -L/usr/x86_64-linux-gnu/lib -lm -ldl -lrt -lutil -lpthread -lpciaccess
                        SYS_LIBS     = -ljasper -ljpeg $SYS_LIBS
                        OTHER_LIBS   = -ljasper -ljpeg -lm -ldl -lrt -lutil -lpthread -lpciaccess
                        XML2ROOT     = /usr
                        case "$fortran_compiler" in
                            default|gcc)
                                load_modules=gcc/5.2.0 ${load_modules}
                                MPIROOT = $software_tree/mpi/openmpi-1.10.3-static-${compiler_version}
                                MPI_LIB = -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal $SYS_LIBS
                                LDFLAGS = $LDFLAGS $SYS_LIBS
                                ;;
                            nag)
                                load_modules=gcc/5.2.0 nag/6.0.1064 ${load_modules}
                                FC = $(cd $srcdir ; pwd)/scripts/nagfor_wrapper/nagfor
                                CFLAGS = $CFLAGS -DWITHOUT_PACK_EXTERNAL
                                LDFLAGS = $LDFLAGS -L/usr/x86_64-linux-gnu/lib -ldl $SYS_LIBS
                                MPIROOT = $software_tree/mpi/mpich-3.2-static-${compiler_version}
                                MPI_LIB = -lmpifort -lmpi $SYS_LIBS
                                ;;
                            intel)
                                load_modules=intel/16.0.2 ${load_modules}
                                MPIROOT = $software_tree/mpi/openmpi-1.10.1-static-${compiler_version}
                                MPI_LIB = -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal  $SYS_LIBS
                                LDFLAGS = $LDFLAGS $SYS_LIBS
                                HIOPT_FLAGS = -O3 -mkl -static -xHost -xAVX -g
                                CC_OMPFLAG  = -fopenmp
                                ;;
                        esac
                        ;;

                    *stretch*)
                        load_modules = cdo/1.9.6-gccsys python/2.7.14-stable ${load_modules}
                        ZLIBROOT     = /usr
                        SZIPROOT     = $software_tree/sys/szip-2.1
                        NETCDFFROOT  = $software_tree/netcdf/netcdf_fortran-4.4.4-${compiler_version}
                        NETCDFROOT   = $software_tree/netcdf/netcdf_c-4.6.1
                        HDF5ROOT     = $software_tree/hdf5/hdf5-1.8.18
                        GRIBAPIROOT  = $software_tree/grib_api/grib_api-1.21.0-gccsys
                        SYS_LIBS     = -L/usr/x86_64-linux-gnu/lib -lm -ldl -lrt -lutil -lpthread -lpciaccess
                        SYS_LIBS     = $SYS_LIBS
                        XML2ROOT     = /usr
                        CFLAGS       = $CFLAGS -fPIC
                        case "$fortran_compiler" in
                            default|gcc)
                                load_modules=gcc/6.3.0 ${load_modules}
                                MPIROOT = $software_tree/mpi/openmpi-2.1.5-${compiler_version}
                                MPI_LIB = -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal $SYS_LIBS
                                FFLAGS  = $FFLAGS -fPIC
                                LDFLAGS = $LDFLAGS $SYS_LIBS -Wl,-rpath,$NETCDFROOT/lib -Wl,-rpath,$NETCDFFROOT/lib -Wl,-rpath,$HDF5ROOT/lib
                                ;;
                            nag)
                                load_modules=gcc/6.3.0 nag/6.2 ${load_modules}
                                FC = $(cd $srcdir ; pwd)/scripts/nagfor_wrapper/nagfor
                                FFLAGS = $FFLAGS -Wc,-fPIC
                                F77FLAGS = $F77FLAGS -Wc,-fPIC
                                CFLAGS = $CFLAGS -DWITHOUT_PACK_EXTERNAL
                                LDFLAGS = $LDFLAGS -L/usr/x86_64-linux-gnu/lib -ldl $SYS_LIBS
                                MPIROOT = $software_tree/mpi/mpich3-3.2.1-${compiler_version}
                                MPI_LIB = -lmpifort -lmpi $SYS_LIBS -Wl,-Wl,,-rpath,$MPIROOT/lib -Wl,-Wl,,-rpath,$NETCDFROOT/lib -Wl,-Wl,,-rpath,$NETCDFFROOT/lib -Wl,-Wl,,-rpath,$HDF5ROOT/lib
                                NETCDFFROOT = $software_tree/netcdf/netcdf_fortran-4.4.4-${compiler_version}
                               ;;
                            intel)
                                load_modules=intel/17.0.2 ${load_modules}
                                MPIROOT = $software_tree/mpi/openmpi-2.1.5-${compiler_version}
                                MPI_LIB = -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal  $SYS_LIBS
                                LDFLAGS = $LDFLAGS $SYS_LIBS -Wl,-rpath,$NETCDFROOT/lib -Wl,-rpath,$NETCDFFROOT/lib -Wl,-rpath,$HDF5ROOT/lib
                                HIOPT_FLAGS = -O3 -mkl -static -xHost -xAVX -g
                                CC_OMPFLAG  = -fopenmp
                                ;;
                        esac
                        ;;
                    *)
                        echo
                        echo WARNING:
                        echo No default setup for your Linux distribution , codename: $dist_codename
                        echo
                        echo
                        ;;
                esac
                ;;
            *)  # unknown ...
                echo
                echo
                echo Unknown Linux system type - currently not supported ...
                echo
                exit
                ;;
        esac
        ;;

#===============================================
    ecmwf.int)
                NETCDFROOT  =${NETCDF_DIR}
                CC          = cc
                FC          = ftn
                F77         = ftn
                make_command=make -j 8
                CFLAGS   = $CFLAGS -D_ECMWF
                RTTOV_LIBS  = -L/home/ms/de/dfj/lib -L/home/ms/de/dfj/lib/unsupported -lradiance -lrttov10.2 -lhrit_tools
                case "$fortran_compiler" in
                    intel*)
                      load_modules    = PrgEnv-intel/5.0.41 netcdf cray-mpich/6.1.1 ${load_modules}
                      CFLAGS          = -DHAVE_LIBNETCDF ${CFLAGS}
                      STD_FLAGS       = -O2 -xAVX -fltconsistency -pc64 -fpp -traceback  -D__LOOP_EXCHANGE
                      FFLAGS          = ${FFLAGS} -I/home/ms/de/dfj/include/radiance
                      F77FLAGS        = $FFLAGS $STD_FLAGS
                      OTHER_LIBS      = -lirng $RTTOV_LIBS $OTHER_LIBS
                      ;;
                    cray)
                      OTHER_LIBS      = $RTTOV_LIBS $OTHER_LIBS
                      FFLAGS          = -D__USE_RTTOV ${FFLAGS} -I/home/ms/de/dfj/include/radiance
                      ;;
                    default|gcc)
                      FFLAGS          = ${FFLAGS} -I/home/ms/de/dfj/include/radiance
                      OTHER_LIBS      = $RTTOV_LIBS $OTHER_LIBS
                      ;;
                esac
        ;;

#===============================================
    pa.cluster)
        ### ### DLR Linux Cluster ### ###
        echo
        echo "DLR Linux Cluster detected."
        config_target=pacluster
        make_command=make -j 4
        submit=qsub

        # Automatic compiler detection for DLR Linux cluster
        # using openmpi module name
        TMPF90 = `mpif90 -show | awk '{print $1}'`
        case "$TMPF90" in
            lf95*)
                echo "ERROR: Lahey lf95 currently not supported."
                exit
                ;;
            ifort*)
                COMPILER = INTEL
                intel_main_version = `ifort --version | awk 'NR==1 {print $3}' | sed 's/\..*//g'`
                if test $intel_main_version -le 12; then
                    echo "ERROR: Use ifort version 13.1.0!"
                    exit
                fi
                ;;
            gfortran*)
                COMPILER=GFORTRAN
                gfortran_version = `gfortran --version | awk 'NR==1 {print $4}'`
                ;;
            g95*)
                echo "ERROR: g95 currently not supported."
                exit
                ;;
            *)
                echo "ERROR: no openmpi module loaded!"
                exit
                ;;
        esac

        #### set compiler specific options
        case "$COMPILER" in

            INTEL*)
                echo "Compiler INTEL detected."
                ### ### intel/13.1-2 openmpi/1.6.4/intel/13.1.0
                config_compiler = intel
                CC       = mpicc
                CFLAGS = -std=gnu99 -O2 -DHAVE_LIBNETCDF -DgFortran
                F77 = mpif90
                FC = mpif90
                ##### F95 EXTENSIONS
                OMPFLAG  = -openmp
                DEFOPT   = -D
                DEFCOPT  = -D
                MODOPT   = -I
                MODDIR   = -module 
                ##### DEBUG ####
                FOTPTIM     = -march=native -O3 -D__LOOP_EXCHANGE
                DEBUG_FLAGS = -check bounds -check pointers -check uninit -debug -g
                STD_FLAGS   = -O2 -msse2 -fltconsistency -pc64 -fpp -traceback  -D__LOOP_EXCHANGE $DEBUG_FLAGS
                FDEBUG      = -check bounds -check pointers -check uninit -debug -g
                FFLAGS      =           -O2 -msse2 -fltconsistency       -pc64 -fpp -traceback  -D__LOOP_EXCHANGE
                # FFLAGS      = $FDEBUG -O2 -msse2 -fltconsistency       -pc64 -fpp -traceback  -D__LOOP_EXCHANGE
                # FFLAGS      = $FDEBUG -O0 -msse2 -fltconsistency -fpe0 -pc64 -fpp -traceback  -D__LOOP_EXCHANGE
                F77FLAGS    = $FFLAGS
                LDFLAGS     = $FOTPTIM
                ;;

            GFORTRAN*)
                echo "Compiler GFORTRAN detected."
                ### ### openmpi/1.4.4/gfortran/4.6.2
                CC       = mpicc
                # CFLAGS = -std=gnu99 -O2 -DHAVE_LIBNETCDF -DgFortran
                # CFLAGS   = -std=gnu99 -march=native -O2 -Df2cFortran
                # CFLAGS   = ${CFLAGS} -Df2cFortran
                # CFLAGS   = -O -Df2cFortran
                FFLAGS      = $FCPP $FLANG $FWARN -D__GFORTRAN__
                # FFLAGS      = $FCPP $FLANG $FWARN -DMESSY -D__GFORTRAN__ -DMESSYTIMER
                # -fall-intrinsics to use etime in messy_main_qtimer
                # FFLAGS      = $FCPP $FLANG $FWARN -DMESSY -D__GFORTRAN__ -DMESSYTIMER -fall-intrinsics
                F77      = mpif90
                FC      = mpif90
                ##### F95 EXTENSIONS
                # DEFOPT   = -D
                # MODOPT   = -I
                ;;
        esac

        #### compiler specific path settings
        case "$COMPILER" in
            INTEL*)
                MPIROOT    = /export/opt/PA/prgs/openmpi/1.6.4/intel/13.1.0
                MPI_LIB    = 
                NETCDFROOT = /export/opt/PA/prgs/netcdf/3.6.3/ifort/12.0.0
                HDF5ROOT    = /export/opt/PA/prgs/hdf5/1.8.8
                SZIPROOT    = 
                ZLIBROOT    = 
                ;;

            GFORTRAN*)
                case "${gfortran_version}" in
                    4.6.2*)
                        MPIROOT    = /export/opt/PA/prgs/openmpi/1.4.4/gfortran/4.6.2
                        MPI_LIB    = 
                        NETCDFROOT = /export/opt/PA/prgs/netcdf/3.6.3/gfortran/4.6.2
                        HDF5ROOT    = /export/opt/PA/prgs/hdf5/1.8.8
                        SZIPROOT    = 
                        ZLIBROOT    = 
                        ;;
                    4.8.1*)
                        MPIROOT    = /export/opt/PA/prgs/openmpi/1.6.5/gfortran/4.8.1
                        MPI_LIB    = 
                        NETCDFROOT = /export/opt/PA/prgs/netcdf/3.6.3/gfortran/4.8.1
                        HDF5ROOT    = /export/opt/PA/prgs/hdf5/1.8.8
                        SZIPROOT    = 
                        ZLIBROOT    = 
                        ;;
                    *)
                        echo "ERROR: gfortran version not supported"
                        echo "       (use 4.6.2 or 4.8.1)"
                        exit
                        ;;
                esac
                ;;
        esac
        ;;
        #-------------------------------------------------------------------
    *)
    case "$(hostname)" in
      melian)
        FC=gfortran
        CC=gcc
        AR=gcc-ar
        NM=gcc-nm
        FFLAGS = $FFLAGS -D__NO_HAMMOC__
#       MPIROOT=/home/ram/src/tools/spack/opt/spack/linux-arch-x86_64/gcc-6.4.1/openmpi-3.0.0-cmrvnxasc5cybkp3e3zsrmaajtaftq7z
#       MPI_LIB=-L/home/ram/src/tools/spack/opt/spack/linux-arch-x86_64/gcc-6.4.1/hwloc-1.11.8-zsfqzvq5ynit7xbdr3lshbktqkdnmcvx/lib    -Wl,-rpath -Wl,/home/ram/src/tools/spack/opt/spack/linux-arch-x86_64/gcc-6.4.1/hwloc-1.11.8-zsfqzvq5ynit7xbdr3lshbktqkdnmcvx/lib -Wl,-rpath -Wl,${MPIROOT}/lib -Wl,--enable-new-dtags -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal -lhwloc -ldl -lz -lrt -lutil -lm
        MPIROOT=/usr
        MPI_LIB=-L/usr/lib/openmpi -Wl,-rpath -Wl,/usr/lib/openmpi -Wl,--enable-new-dtags -lmpi
        ZLIBROOT=/usr
        HDF5ROOT=/usr
        NETCDFROOT=/usr
        NETCDFROOT=/usr
        SZIPROOT=/usr
        XML2ROOT=/usr
      ;;
      jrpc*)
        FC=gfortran
        CC=gcc
        AR=gcc-ar
        NM=gcc-nm
        FFLAGS = $FFLAGS -D__NO_HAMMOC__
        MPIROOT=/home/riehme/local/OpenMPI/gcc/openmpi-3.1.0-gf
        MPI_LIB=-L${MPIROOT}/lib -Wl,-rpath -Wl,${MPIROOT}/lib -Wl,--enable-new-dtags -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal -lhwloc -ldl -lz -lrt -lutil -lm
	MPI_LIB=-pthread -I${MPIROOT}/lib -Wl,-rpath -Wl,${MPIROOT}/lib -Wl,--enable-new-dtags -L${MPIROOT}/lib -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi
	#
	ZLIBROOT=/usr
        HDF5ROOT=/usr
        NETCDFROOT=/usr
#        SZIPROOT=/usr/local/szlib
        SZIPROOT=${HOME}/local/szlib
        XML2ROOT=/usr
	#
	;;
    esac
    ;;
#===============================================
esac
#===============================================

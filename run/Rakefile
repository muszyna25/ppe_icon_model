require 'pp'
# BASIC FOMATING SETUP {{{ ====================================================
LINEWIDTH = 80
# }}}
# OCEAN TEST COLLECTION {{{ ===================================================
@oceanTestSuites = {
  :oceanTechnical         => %w[exp.oce_test_parallel],
  :oceanSurface           => %w[exp.oce_omip_testSurface],
  :oceanBasicConservation => %w[exp.oce_test_numeric exp.oce_tracer_bubble exp.oce_omip_testSurface],
  :oceanLong              => %w[exp.omipR2B05L40 exp.oce_SmallBoxACC_0080km_cell],
  :oceanDev               => %w[oceanTechnical oceanBasicConservation],
  :oceanStable            => %w[oceanLong],
}

# collect OCEAN test automatically from its checksuite
@oceanTests = {}
Dir.glob('./checksuite.ocean_internal/**/*').sort.each {|item| 
  filename = File.basename(item)
  if not File.directory?(item) and 'exp.' == filename[0,4] then
    @oceanTests[filename] = item
  end
}

# collect ALL TESTS
@allTests = (Dir.glob("{post,exp}*").delete_if {|f| File.extname(f) == '.run'} + @oceanTests.keys )
# }}}
# RUNSCTIP GENERATION {{{ =====================================================
# define symlink rule
@oceanTests.each {|template,source|
  file template => source do 
    FileUtils.ln_s(source, template, :force => true, :verbose => true)
  end
}
# define rule for create .run files from existing template (exp/post)
(Dir.glob("{post,exp}*").delete_if {|f| File.extname(f) == '.run'} + @oceanTests.keys ).each {|template|
  runScriptName = "#{template}.run"
  file runScriptName => template do
    sh "cd ..; ./make_runscripts #{template.sub(/^exp./,'')}"
  end
}
# }}}
# LIST TESTS {{{ ==============================================================
desc "Show all known ocean tests"
task :showOcean do
  puts "OCEAN TESTSUITS ".ljust(LINEWIDTH,'=')
  @oceanTestSuites.each {|name,experimentList|
    puts name.to_s
    experimentList.each {|experiment| puts "\t"+experiment }
  }
  puts "ALL OCEAN TESTS".ljust(LINEWIDTH,'=')
  @oceanTests.each {|k,v|
    puts [k.ljust(50,' '),v].join(':')
  }
  puts '='*LINEWIDTH
end

desc "Show all available tests"
task :showAll do
  puts "ALL TESTS".ljust(LINEWIDTH,'=')
  @allTests.each {|k,v|
    puts [k.ljust(50,' '),v].join(':')
  }
  puts '='*LINEWIDTH
end
# }}}
desc "Run named test or testsuite or TEST='a,b,..'"
task :run, :name do |t,args|
  testsGiven = args.name.nil? ? (ENV.has_key?('TEST') ? ENV['TEST'].split(',') : nil ) : args.name
  
  puts "try to run #{testsGiven.join(' ')} ..."

  # if testsuites are given, transform them into lists of experiments
  experimentList =[]
  testsGiven.each {|test| }
end
# HELP {{{ ====================================================================
desc "Show detailed help"
task :help do
  puts "F1!"
  sh "rake -T"
end
# }}}
# vim:fdm=marker

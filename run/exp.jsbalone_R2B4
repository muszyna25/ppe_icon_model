#--------------------------------------------------------------------------------------------------
#
# ICON-JS4 Standalone experiment
#
author_list="Rainer Schneck, MPIM"
#
#--------------------------------------------------------------------------------------------------
#
# This file describes an AMIP experiment based on the non-hydrostatic atmosphere and the
# ECHAM physics. The experiment is intialized from IFS analysis files and uses transient
# boundary conditions for:
# - SST and sea ice
# - spectral solar irradiation
# - well mixed greenhouse gases CO2, CH4, N2O, CFCs
# - O3 concentration
# - tropospheric aerosol optical properties
# - stratospheric volcanic aerosol optical properties
#
#--------------------------------------------------------------------------------------------------

# (0) unset some setting of create_target_header for mistral

unset OMPI_MCA_coll_fca_enable
unset OMPI_MCA_coll_fca_priority

#--------------------------------------------------------------------------------------------------

# (1) Variables provided by the scripting mechanism

# EXPNAME                       = name of exp. in 'exp.<name>'
# basedir                       = base directory, where src/, run/ etc exist
# icon_data_poolFolder          = base directory, where grids/, input/ and setup/ exist
# nproma                        = blocking length for array dimensioning and inner loop lengths

icon_data_poolFolder="${icon_data_rootFolder:-/pool/data/ICON}/grids/private/rene/mpim"

#--------------------------------------------------------------------------------------------------

# (2) Set variables needed by the scripting mechanism

# horizontal grid(s)
#
# domain globe
grid_id=0013
grid_refinement=R02B04
grid_label=G
grid_name=icon_grid_${grid_id}_${grid_refinement}_${grid_label}
atmo_dyn_grids="'${grid_name}.nc',"
# atmo_dyn_grid="icon_grid_0013_R02B04_G.nc" # R nur zum Vergleich
#
grids_folder=${icon_data_poolFolder}/${grid_id}

# lnd_data_InputFolder=${icon_data_poolFolder}/${grid_id}
lnd_data_InputFolder=/pool/data/ICON/grids/private/jsbach/mpim/${grid_id}/land/r0001
# lnd_data_InputFolder=/work/mj0060/m212005/data/icon/amip/${grid_id}/land/r0001      # mistral
# [[ -d ${lnd_data_InputFolder} ]] || lnd_data_InputFolder=/scratch/local1/m212005/data/icon/amip/${grid_id}/land/r0001   # ulme

calendar="proleptic gregorian"  # '365 day year' or '360 day year' or 'proleptic gregorian'

# start and end date+time
start_date=${start_date:="1979-01-01T00:00:00Z"}
    end_date=${end_date:="1980-01-01T00:00:00Z"}

modelTimeStep="PT30M"   # if l_force_from_obs=.true. this must not be longer than 1 day because mo_jsb4_forcing can not handle this!

# restart intervals
checkpoint_interval="P1Y"
restart_interval="P10Y" # Do not use month! 
                       # Note, the restart interval has to be a natural number multible greater equal 1 of forcing_steps_per_file multipied with the forcing_modelTimeStep! Thus the restart interval is synchron with the forcing files and includes at least one forcing file. 
                       # However, this will be checked below.

# output intervals
output_interval="P1D" # P1D, PT6H
file_interval="P1M"

# namelist files
jsbach_namelist="NAMELIST_${EXPNAME}_jsb"

# interface variables input infos
#forcing_dir="/mnt/lustre01/work/mj0060/m300189/forcing_for_JS4driver/JS075_Patch2_forcing"
forcing_dir="/scratch/local1/S/JS075_Patch2/icon-les/config/mpim_ICON/experiments/JS075_Patch2_forcing_simpel_papaya/"
#forcing_dir="/mnt/lustre01/work/mj0060/m300189/forcing_for_JS4driver/CRU-NCEP"
l_force_from_obs=true            # true means from observations, .false. means from model output
years_for_cyclic_forcing=0       # If > 0, number of years to use for cyclic forcing
start_year_for_cyclic_forcing=9999 # First year of cyclic forcing; 9999 means use start year of experiment
forcing_observ_tag="GSWP3"       # only for observational forcing
ghg_scenario="false"             # only for observational forcing
res_srf="R2B4"                   # only for observational forcing
                                 # horiozontal grid resolution of observation forcing
                                 # e.g. R2B4 which was interpolated from the original observation forcing 
                                 #      in T21  / T31  / T42 / T63 / T85 / T106 / T159
forcing_fname_base="JS075_Patch2_forcing_simpel_papaya_interface_vars_for_JS4-standalone_ml"
forcing_start_date="1979-01-01T00:00:00Z" # ISO 8601, in the format "1979-01-01T00:00:00Z"
                                          # It is assumed that the first forcing file name starts with this date and uses a format specification like "19790101T000000Z"
forcing_end_date="1980-01-01T00:00:00Z"   # ISO 8601, in the format "2015-01-01T00:00:00Z". The last forcing file name not necessarily uses this date, but the file has to include this date.
forcing_modelTimeStep="PT30M" # e.g. PT20M only necessary to calclulate the date for the name of the forcing input files
forcing_steps_per_file="1"    # The number of time steps included by the used forcing file(s)
                              # Z.B. 72 um bei einem Modellzeitschritt von 20 Minuten 24 Stunden in einem File zusammen zu packen
                              # Z.B. bei Observations: dCRUNCEP: Im File 365 tägliche Records: Aber es wird immer nur genau 1 Tag d.h. ein Rekord eingelesen von read_atm_forcing_for_jsb_stdalone_from_observ! Daher: 1
forcing_synchron_factor="48"  # Factor defines how many time steps the JS4 driver performs for each atmospheric forcing time step that is read in 
                              # Z.B. 1 um bei einem Modellzeitschritt jeden Step einzulesen
                              # Z.B: bei Observations: dCRUNCEP: da hier immer ein täglicher Rekord eingelesen wird: 72
forcing_writeout_factor="1"   # Normally 1, but if the coupled forcing run did not write out each of its timesteps this factor determines how many timestep were done until
                              # the forcing files were written out
#--------------------------------------------------------------------------------------------------

# (3) Define the model configuration

# JSBACH settings
jsbach_usecase=jsbach_pfts    # jsbach_lite or jsbach_pfts or jsbach_jedi
jsbach_with_lakes=no
jsbach_with_hd=no
jsbach_with_carbon=no        # yes needs jsbach_pfts usecase
jsbach_check_wbal=no          # check water balance
output_lnd=basic              # amount of output: none/basic/medium/full

# Some further processing for land configuration
# ----------------------------------------------
#
output_tiles="'box'"
if [[ ${output_lnd} == "basic" ]]
then
  output_tiles="${output_tiles}, 'glac', 'veg'"
fi
if [[ $jsbach_with_lakes == yes ]]
then
  [[ ${output_lnd} == "full" ]] && output_tiles="${output_tiles}, 'lake', 'land'"
fi
jsbach_use_jedi=$([ "${jsbach_usecase}" == jsbach_jedi ] && echo yes || echo no )
llake=$([ "${jsbach_with_lakes:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )
lcarbon=$([ "${jsbach_with_carbon:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )
#
if [[ $jsbach_usecase == *pfts* ]] || [[ $jsbach_usecase == *jedi* ]]
then
  pft_file_tag="11pfts_"
  if [[ ${jsbach_use_jedi} == yes ]] || [[ ${output_lnd} == "full" ]]
  then
    output_tiles="${output_tiles}, 'pft*'"
  fi
else
  pft_file_tag=""
fi




#####################
# Prepare NAMELISTS #
#####################

if [ ${l_force_from_obs} == "true" ] ; then 
  case ${forcing_observ_tag} in
    dCRUNCEP )
      forcing_set_ocean_to_constants=true  # dCRUNCEP is only defined for land cells
      forcing_precip_in_mm_per_day=true    # true: mm/day; false: mm/s (= kg/m2s)
      forcing_qair_type=QAIR               # specific humidity in forcing data
      forcing_co2_frequ=DAILY              # read daily CO2 values from forcing file
      forcing_tmp_unit="degC"
      forcing_precip_unit="mm/day"
      forcing_co2_unit="mol/mol"
      forcing_height_humidity=2.           # reference height for specific humidity data
      forcing_height_wind=10.              # reference height for wind data
      ;;
    GSWP3 )
      forcing_set_ocean_to_constants=true  # in this version wind is only defined for land cells
      forcing_precip_in_mm_per_day=false    # true: mm/day; false: mm/s (= kg/m2s)
      forcing_precip_unit="kg/m**2s"
      forcing_qair_type=QAIR               # specific humidity in forcing data
      forcing_tmp_unit="Celsius"
      forcing_qair_unit="kg/kg"
      FORCING_SW_UNIT="W/m**2"
      FORCING_LW_UNIT="W/m**2"
      forcing_co2_unit="ppmv"       # mol_per_mol (mol/mol) / ppmv / kg_per_kg (kg/kg)
      forcing_height_humidity=2.           # reference height for specific humidity data
      forcing_height_wind=10.              # reference height for wind data
      ;;
    cruncep2015 )
      forcing_set_ocean_to_constants=true  # dCRUNCEP is only defined for land cells
      forcing_precip_in_mm_per_day=true    # true: mm/day; false: mm/s (= kg/m2s)
      forcing_qair_type=QAIR               # specific humidity in forcing data
      forcing_tmp_unit="degC"
      forcing_precip_unit="mm/day"
      forcing_co2_frequ=CONST              # constant CO2 forcing
      forcing_co2_const_co2=3.67e-4        # current (1999)
      forcing_co2_unit="mol_per_mol"       # mol_per_mol (mol/mol) / ppmv / kg_per_kg (kg/kg)
      forcing_height_humidity=2.           # reference height for specific humidity data
      forcing_height_wind=10.              # reference height for wind data
      ;;
    ERA-interim )
      forcing_set_ocean_to_constants=false # For all variables ERA-interim input is defined for all cells
      forcing_precip_in_mm_per_day=true    # true: mm/day; false: mm/s (= kg/m2s)
      forcing_qair_type=NONE               # calculate specific humidity from temperature
      forcing_co2_frequ=DAILY              # read daily CO2 values from forcing file
      forcing_co2_unit="ppmv" 
      forcing_height_humidity=2.           # reference height for specific humidity data
      forcing_height_wind=10.              # reference height for wind data
      ;;
    WATCH | WATCH-ERA-interim)
      forcing_precip_in_mm_per_day=false   # true: mm/day; false mm/s (= kg/m2s)
      forcing_qair_type=QAIR               # only available in recent model versions (after CMIP5)
      forcing_co2_frequ=CONST              # constant CO2 forcing
      forcing_co2_const_co2=367.e-6        # Default for currrent climate (example is 1999)
      forcing_co2_unit="mol_per_mol"       # mol_per_mol / ppmV / kg_per_kg
      forcing_height_humidity=2.           # reference height for specific humidity data
      forcing_height_wind=10.              # reference height for wind data
      ;;
    vga0173 )
      forcing_set_ocean_to_constants=true  # In the vga0173 forcing qair is only defined for land cells
      forcing_precip_in_mm_per_day=false   # true: mm/day; false mm/s (= kg/m2s)
      forcing_qair_type=QAIR               # only available in recent model versions (after CMIP5)
      forcing_co2_frequ=CONST              # constant CO2 forcing
      forcing_co2_const_co2=284.725e-6     # pre-industrial (1850)
      forcing_co2_unit="mol_per_mol"       # mol_per_mol (mol/mol) / ppmv / kg_per_kg (kg/kg)
      forcing_height_humidity=2.           # reference height for specific humidity data
      forcing_height_wind=10.              # reference height for wind data
      ;;
    piControl_r1i1p1-LR )
      forcing_set_ocean_to_constants=false # For all variables echam forcing is defined for all cells
      forcing_precip_in_mm_per_day=false   # true: mm/day; false mm/s (= kg/m2s)
      forcing_qair_type=QAIR               # only available in recent model versions (after CMIP5)
      forcing_co2_frequ=CONST              # constant CO2 forcing
      forcing_co2_const_co2=284.725e-6     # pre-industrial (1850)
      forcing_co2_unit="mol_per_mol"       # mol_per_mol (mol/mol) / ppmv / kg_per_kg (kg/kg)
      forcing_height_humidity=2.           # reference height for specific humidity data
      forcing_height_wind=10.              # reference height for wind data
      ;;
    historical_r1i1p1-LR | rcp26_r1i1p1-LR | rcp45_r1i1p1-LR | rcp85_r1i1p1-LR )
      forcing_set_ocean_to_constants=false # For all variables echam forcing is defined for all cells
      forcing_precip_in_mm_per_day=false   # true: mm/day; false mm/s (= kg/m2s)
      forcing_qair_type=QAIR               # only available in recent model versions (after CMIP5)
      forcing_co2_frequ=DAILY              # daily CO2 forcing
      forcing_co2_unit="kg/kg"             # mol_per_mol (mol/mol) / ppmv / kg_per_kg (kg/kg)
      forcing_height_humidity=2.           # reference height for specific humidity data
      forcing_height_wind=10.              # reference height for wind data
       ;;
    * )
      # e.g. model data in blizzard:/work/mj0060/m220053/forcing/vga0110/jsbach_forcing/
      print "\t|- WARNING: Check if namelist parameters correspond to forcing data!"
      # example for forcing data generated from ECHAM output (pre industrial control)
      forcing_set_ocean_to_constants=false # For all variables echam forcing is defined for all cells
      forcing_precip_in_mm_per_day=false   # true: mm/day; false mm/s (= kg/m2s)
      forcing_qair_type=QAIR               # only available in recent model versions (after CMIP5)
      forcing_co2_frequ=CONST              # constant CO2 forcing
      forcing_co2_const_co2=284.725e-6     # pre-industrial (1850)
      forcing_co2_unit="mol_per_mol"       # mol_per_mol (mol/mol) / ppmv / kg_per_kg (kg/kg)
      forcing_tmp_unit="Celsius"
      forcing_qair_unit="kg/kg"
      forcing_wind_unit="m/s"
    ;;
  esac

  if [[ ${ghg_scenario} = false ]]; then  
    forcing_co2_file="climate_"
  else
    forcing_co2_file="greenhouse_gases.nc"
    forcing_co2_unit="ppmv"
    if [[ ${forcing_co2_frequ} != "" ]]; then
      print "\t|- WARNING: CO2 concentration is read from greenhouse gas scenario file ${forcing_co2_file}."
      print "\t|           The value you set for forcing_co2_frequ is ignored."
    fi
    forcing_co2_frequ="ghg_scenario"
  fi
fi

# namelists inherited from NAMELIST_atm_amip_les_atm:
# ---------------------------------------------------
cat > $jsbach_namelist << EOF
&parallel_nml
 nproma           = ${nproma}
 num_io_procs     = 0     ! Number of procs for output (not more than number of output files!)
! pio_type         = 1          ! 1 is default and means pio_type_async
! num_restart_procs = 2         ! 0 for sync restart_write_mode
/
&grid_nml
 dynamics_grid_filename = ${atmo_dyn_grids}  ! geht das: 'bc_land_phys.nc' ???
! l_limited_area = .FALSE. ! just to be sure
! vertical_grid_filename =
! ifeedback_type = 2 ! default is 2. Als long as we use only one grid in JS4-driver this does not matter. However, later this has to be 2. 
!                    ! 1: incremental feedback; 2: relaxation-based feedback. 
!                    ! Note: vertical nesting requires option 2 to run numerically stable over longer time periods
/
&run_nml
 num_lev          = 1          ! number of full levels, default 31, exp.atm_amip_les.run=47. R: 47 nur zum debuggen wieder auf 1 setzen
                               ! Number of full levels for each domain. For JS4-driver we use 1.
! nshift           = 0          ! 0 is default
!                               ! Half level of parent domain which coincides with the upper boundary of the current domain jg
 modelTimeStep    = "${modelTimeStep}"     ! this is dtime
 ltestcase        = .FALSE.     ! run testcase
 ldynamics        = .FALSE.     ! dynamics nur zum debuggen wieder auf .FALSE. setzen
 ltransport       = .FALSE.     ! transport nur zum debuggen wieder auf .FALSE. setzen
 ntracer          = 3           ! number of tracers; 3: hus, clw, cli; 4: hus, clw, cli, o3
 iforcing         = 2           ! 0: none, 1: HS, 2: ECHAM, 3: NWP
 output           = 'nml'
 msg_level        = 0          ! e.g. 15. level of details report during integration 
 restart_filename = "${EXPNAME}_restart_jsbalone_<rsttime>.nc"  ! rsttime in JS4-ICON-Driver nicht vorhanden???
 activate_sync_timers = .FALSE. ! nur zum debuggen wieder auf .FALSE. setzen
 ltimer           = .TRUE.     ! monitoring the runtime of specific routines
 timers_level     = 10
! profiling_output = 1   ! 1 ist default. 
                        ! TIMER_MODE_AGGREGATED=1,
                        ! TIMER_MODE_DETAILED=2,
                        ! TIMER_MODE_WRITE_FILES=3
/
&echam_phy_nml
!
! domain 1
! --------
! atmospheric phyiscs (""=never)
 echam_phy_config(1)%dt_rad = "PT2H"
 echam_phy_config(1)%dt_vdf = "PT30M"
 echam_phy_config(1)%dt_cnv = "PT30M"
 echam_phy_config(1)%dt_cld = "PT30M"
 echam_phy_config(1)%dt_gwd = "PT30M"
 echam_phy_config(1)%dt_sso = "PT30M"
!
! atmospheric chemistry (""=never)
 echam_phy_config(1)%dt_mox = "PT30M"
 echam_phy_config(1)%dt_car = ""
 echam_phy_config(1)%dt_art = ""
!
! surface (.TRUE. or .FALSE.)
 echam_phy_config(1)%ljsb   = .TRUE.
 echam_phy_config(1)%lamip  = .TRUE.
 echam_phy_config(1)%lice   = .TRUE.
 echam_phy_config(1)%lmlo   = .FALSE.
 echam_phy_config(1)%llake  = ${llake}
/
&echam_rad_nml
!
! domain 1
! --------
 echam_rad_config(1)%isolrad        =  1
 echam_rad_config(1)%irad_h2o       =  1
 echam_rad_config(1)%irad_co2       =  4
 echam_rad_config(1)%irad_ch4       =  4
 echam_rad_config(1)%irad_n2o       =  4
 echam_rad_config(1)%irad_o3        =  8
 echam_rad_config(1)%irad_o2        =  2
 echam_rad_config(1)%irad_cfc11     =  4
 echam_rad_config(1)%irad_cfc12     =  4
 echam_rad_config(1)%irad_aero      = 18
 ! echam_rad_config(1)%ighg         =  1
 ! The following entries affect swvis_srf_down in the JS4 Driver!
 echam_rad_config(1)%l_orbvsop87    = .TRUE.
 echam_rad_config(1)%cecc           = 0.016715
 echam_rad_config(1)%cobld          = 23.44100
 echam_rad_config(1)%clonp          = 282.7000
 echam_rad_config(1)%icosmu0        = 0
 echam_rad_config(1)%ldiur          = .TRUE.
 echam_rad_config(1)%l_sph_symm_irr = .FALSE.
/
&echam_vdf_nml
/
&jsb_forcing_nml
    cyclic_nyears=${years_for_cyclic_forcing}
    cyclic_start_year=${start_year_for_cyclic_forcing}
    forcing_synchron_factor=${forcing_synchron_factor}
    forcing_steps_per_file=${forcing_steps_per_file}
    forcing_height_wind=${forcing_height_wind}
    forcing_height_humidity=${forcing_height_humidity}
    !--- Some external forcing is only defined for land cells. In this case ocean cells need to be replaced
    !    by constants (reasonable values for the different variables) to ensure numeric stability.
    !    If set to false forcing is expected for all variables for all cells (e.g. forcing from echam)
    forcing_set_ocean_to_constants=.${forcing_set_ocean_to_constants:-true}.

    !--- temperature forcing ----
    forcing_temp_file_prefix="climate_"
    forcing_temp_frequ="DAILY"       !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_temp_ocean=0.0           !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_temp_unit="${forcing_tmp_unit:-""}"

    !--- precipitation forcing ----
    forcing_precip_file_prefix="climate_"
    forcing_precip_frequ="DAILY"     !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_precip_ocean=0.0         !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_precip_in_mm_per_day=.${forcing_precip_in_mm_per_day:-false}.
    forcing_precip_unit="${forcing_precip_unit:-""}"

    !--- atmospheric humidity forcing
    forcing_qair_file_prefix="climate_"
    forcing_qair_type="${forcing_qair_type:-QAIR}" ! (QAIR/RH/NONE)
    forcing_qair_frequ="DAILY"       !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_qair_ocean=1e-5          !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_qair_unit="${forcing_qair_unit:-""}"

    !--- longwave radiative forcing [W/m^2] ---
    forcing_lw_file_prefix="climate_"
    forcing_lw_frequ="DAILY"         !Forcing frequency (MONTHLY/DAILY/CONST)
    forcing_lw_ocean=100             !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_lw_unit="${forcing_lw_unit:-""}"

    !--- shortwave radiative forcing [W/m^2] ---
    forcing_sw_file_prefix="climate_"
    forcing_sw_frequ="DAILY"         !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_sw_ocean=0               !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_sw_unit="${forcing_sw_unit:-""}"

    ! --- CO2 forcing ---
    forcing_co2_file_prefix="${forcing_co2_file}"
    forcing_co2_frequ="${forcing_co2_frequ:-CONST}"  !Forcing frequency (DAILY/TIMESTEP/CONST/GHG_SCENARIO)
    forcing_co2_ocean=367  !3.67e-4                  !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_co2_const_co2=${forcing_co2_const_co2:-367}  ! default for 1999
    forcing_co2_unit="${forcing_co2_unit:-""}"

    ! --- wind speed forcing ---
    forcing_wind_file_prefix="climate_"
    forcing_wind_frequ="DAILY"       !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_wind_ocean=0             !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_wind_unit="${forcing_wind_unit:-""}"
/
EOF


# namelists inherited from NAMELIST_atm_amip_les_lnd:
# ---------------------------------------------------
cat >> $jsbach_namelist << EOF
&jsb_model_nml  ! Same jsb_model_nml namelist name exists in namelist_standalone_master but has different content
  usecase         = "${jsbach_usecase}"
  use_lakes       = ${llake}
  fract_filename  = "bc_land_frac.nc"
  output_tiles    = ${output_tiles}     ! List of tiles to output
/
&jsb_seb_nml
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_rad_nml
  use_alb_veg_simple = .FALSE.          ! Use TRUE for jsbach_lite, FALSE for jsbach_pfts/jsbach_jedi
  !use_alb_canopy  = .FALSE.             ! Use FALSE for jsbach_jedi, comment out otherwise
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_turb_nml
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_sse_nml
  l_heat_cap_map  = .FALSE.
  l_heat_cond_map = .FALSE.
  l_heat_cap_dyn  = .FALSE.
  l_heat_cond_dyn = .FALSE.
  l_snow          = .FALSE.
  l_dynsnow       = .FALSE.
  l_freeze        = .FALSE. ! only for debugging, set to .TRUE.
  l_supercool     = .FALSE. ! only for debugging, set to .TRUE.
  bc_filename     = 'bc_land_soil.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_hydro_nml
  l_organic       = .FALSE.
  bc_filename     = 'bc_land_soil.nc'
  ic_filename     = 'ic_land_soil.nc'
  bc_sso_filename = 'bc_land_sso.nc'
/
&jsb_assimi_nml
  active          = .TRUE.              ! Use FALSE for jsbach_lite, TRUE for jsbach_pfts/jsbach_jedi
/
&jsb_pheno_nml
  scheme          = 'logrop'            ! scheme = logrop (jsbach_pfts) / jedi_phenology (jsbach_jedi) / climatology (jsbach_lite)
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_carbon_nml
  active                 = ${lcarbon}
  bc_filename            = 'bc_land_carbon.nc'
  ic_filename            = 'ic_land_carbon.nc'
  read_cpools            = .FALSE.
  !fire_frac_wood_2_atmos = 0.2
/
&jsb_fuel_nml
  active                 = ${lcarbon}
  fuel_algorithm         = 1
/
&jsb_disturb_nml
  active                  = .FALSE.
  ic_filename             = 'ic_land_soil.nc'
  bc_filename             = 'bc_land_phys.nc'
  fire_algorithm          = 1
  windbreak_algorithm     = 1
  lburn_pasture           = .FALSE.
  !fire_litter_threshold  = 16.67
  !fire_rel_hum_threshold = 70.0
  !fire_minimum_woody     = 0.002
  !fire_minimum_grass     = 0.006
  !fire_tau_woody         = 6.0
  !fire_tau_grass         = 2.0
  !wnd_threshold          = 2.25
  !wnd_damage_scale       = 5.e-03
/
EOF

if [[ ${jsbach_with_hd} = yes ]]; then
  cat >> $jsbach_namelist << EOF
&jsb_hd_nml
  active               = .TRUE.
  routing_scheme       = 'full'
  bc_filename          = 'bc_land_hd.nc'
  diag_water_budget    = .TRUE.
  debug_hd             = .FALSE.
  enforce_water_budget = .TRUE.         ! True: stop in case of water conservation problem
/
EOF
fi

#--------------------------------------------------------------------------------------------------

# (4) Define the input

# model files
#
# jsbach namelist file
#
add_required_file ${basedir}/run/$jsbach_namelist            ./

# initial conditions
#
# - land: source?, date+time?
datadir=${lnd_data_InputFolder}
add_link_file ${datadir}/ic_land_soil_1992.nc                           ./ic_land_soil.nc
# added in namelist, but not active and not yet available (2017-Dec-07)
#add_link_file ${datadir}/ic_land_carbon_1976.nc                         ./ic_land_carbon.nc

# boundary conditions
#
# - well mixed greenhouse gases
datadir=${icon_data_poolFolder}/independent/greenhouse_gases
add_link_file $datadir/greenhouse_historical_plus.nc                    ./bc_greenhouse_gases.nc
#
# - land parameters
datadir=${lnd_data_InputFolder}
add_link_file $datadir/bc_land_frac_${pft_file_tag}1992.nc              ./bc_land_frac.nc
add_link_file $datadir/bc_land_phys_1992.nc                             ./bc_land_phys.nc
add_link_file $datadir/bc_land_soil_1992.nc                             ./bc_land_soil.nc
add_link_file $datadir/bc_land_sso_1992.nc                              ./bc_land_sso.nc
# added in namelist, but not active and not yet available (2017-Dec-07)
#datadir=${icon_data_poolFolder}/preliminary_land/r0002/${grid_refinement}_${grid_label}/land
#add_link_file $datadir/bc_land_carbon_1976.nc                           ./bc_land_carbon.nc

# The following bc_land_hd-file is not yet available...
# if [[ ${jsbach_with_hd} = yes ]]; then
#   datadir=${icon_data_poolFolder}/preliminary_land/r0002/${grid_refinement}_${grid_label}/land
#   add_link_file $datadir/bc_land_hd.nc                                  ./bc_land_hd.nc
# fi
#
# - lctlib file for JSBACH
if [[ "${jsbach_use_jedi}" == yes ]]
then
  add_link_file /home/mpim/m300557/TOOL/SCRIPTS/tree_c3_c4_311_cover_lctlib_nlct21_spc250.def   ./lctlib_nlct21.def
else
  add_link_file ${basedir}/externals/jsbach/data/lctlib_nlct21.def              ./lctlib_nlct21.def
fi

# range of years for yearly files
# assume start_date and end_date have the format yyyy-...
start_year=$(( ${start_date%%-*} - 1 ))
end_year=$(( ${end_date%%-*} + 1 ))
if [ ${years_for_cyclic_forcing} -gt 0 ]
then
  [[ ${start_year_for_cyclic_forcing} -eq 9999 ]] || (( start_year=start_year_for_cyclic_forcing - 1 ))
  (( end_year = start_year + years_for_cyclic_forcing + 1 ))
fi
#
# Provide Links to the climate forcing files 
# Link from the modelTimeStep that will read in to the corresponding forcing file step
if [ ${l_force_from_obs} == "true" ] ; then 
  # Observation files

  SEP=/work/mj0060/m212005/data/icon/jsbalone/${grid_id}/r0001  # path on DKRZ machines 
  [[ -d ${SEP} ]] || SEP=/scratch/local1/m212005/data/icon/jsbalone/${grid_id}/r0001  # path on CIS linux workstation (ulme)

    year=$start_year
    while [[ $year -le $end_year ]]
    do

      case ${forcing_observ_tag} in
        dCRUNCEP )
        forcing_dir=/scratch/local1/S/forcing_driver/CRU-NCEP/ #/pool/SEP/data_sources/OFFLINE_FORCING_JSBACH/CRU-NCEP/input/jsbach/${res_srf}
        add_link_file   ${forcing_dir}/Climate_${forcing_observ_tag}_${res_srf}_${year}.nc   ./climate_${year}.nc
        ;;
        GSWP3 )
        forcing_dir=${SEP}/GSWP3/DATA/gswp3_v2
        add_link_file   ${forcing_dir}/climate_gswp3_d_${year}.nc                                ./climate_${year}.nc
        ;;
        cruncep2015 )
        forcing_dir=/pool/data/JSBACH/jsbalone_forcing/cruncep2015/${res_srf}/
        add_link_file   ${forcing_dir}/Climate_${forcing_observ_tag}_${res_srf}_${year}.nc  ./climate_${year}.nc
        ;;
        ERA-interim )
        forcing_dir=${SEP}/data_sources/OFFLINE_FORCING_JSBACH/ERA-interim/DATA
        add_link_file   ${forcing_dir}/climate_noshift_correctprecip.nc              ./climate_${year}.nc
        ;;
        piControl_r1i1p1-LR )
        forcing_dir=/pool/data/JSBACH/jsbalone_forcing/cmip5/T63GR15/${forcing_observ_tag}
        add_link_file   ${forcing_dir}/Climate_${forcing_observ_tag}_${year}.nc         ./climate_${year}.nc
        ;;
        historical_r1i1p1-LR | rcp26_r1i1p1-LR | rcp45_r1i1p1-LR | rcp85_r1i1p1-LR )
        forcing_dir=/pool/data/JSBACH/jsbalone_forcing/cmip5/T63GR15/${forcing_observ_tag}
        add_link_file   ${forcing_dir}/Climate_${forcing_observ_tag}_${year}.nc             ./climate_${year}.nc
        ;;
        vga0173 | vga0174 )
        forcing_dir=/pool/data/JSBACH/jsbalone_forcing/mpiesm1.1/T63GR15/${forcing_observ_tag}
        add_link_file   ${forcing_dir}/Climate_${forcing_observ_tag}_${year}.nc             ./climate_${year}.nc
        ;;
        * )
        add_link_file   Climate_${forcing_observ_tag}_${year}.nc                            ./climate_${year}.nc
        ;;
      esac

      if [[ ${ghg_scenario} != false ]]; then
        [[ -d ${inpdir}/echam6 ]] || mkdir ${inpdir}/echam6
        forcing_dir=""
        add_link_file    ${forcing_dir}/greenhouse_${ghg_scenario}.nc                ./greenhouse_gases.nc
      fi
    (( year = year+1 ))
  done

else

    # prepare timesteps model data forcing run
    minutes=$(echo "${forcing_modelTimeStep}" | cut -d T -f 2  | cut -d M -f 1)                 # e.g. PT20M -> 20
    seconds=$(echo "${forcing_modelTimeStep}" | cut -d T -f 2  | cut -d M -f 2 | cut -d S -f 1) # e.g. PT20M ->   , PT20M30 -> 30
    (( a = minutes * 60 ))
    (( b = a + seconds ))
    (( forcing_file_timestep = b * forcing_steps_per_file * forcing_writeout_factor )) # [seconds]

    # prepare timesteps JS4-driver run
    minutes=$(echo "${modelTimeStep}" | cut -d T -f 2  | cut -d M -f 1)                 # e.g. PT20M -> 20
    seconds=$(echo "${modelTimeStep}" | cut -d T -f 2  | cut -d M -f 2 | cut -d S -f 1) # e.g. PT20M ->   , PT20M30 -> 30
    (( a = minutes * 60 ))
    (( b = a + seconds ))
    (( modelread_file_timestep = b * forcing_steps_per_file * forcing_synchron_factor ))

    echo "forcing_file_timestep:   ${forcing_file_timestep}"
    echo "modelread_file_timestep: ${modelread_file_timestep}"

    # link the forcing files
    first_forcing_file_date=$(echo "${forcing_start_date}" |  sed 's/-//g ;  s/://g')   # if necessary transform 1979-01-01T00:00:00Z to 19790101T000000Z
    first_model_read_date=$(echo "${start_date}"         |  sed 's/-//g ;  s/://g')   # see above
    add_link_file ${forcing_dir}/${forcing_fname_base}_${first_forcing_file_date}.nc      ./interface_vars_for_jsb_standalone_ml_${first_model_read_date}.nc

    loop_start_date=$(echo "${start_date}" | sed  's/-//g ;  s/://g ;  s/T// ;  s/Z// ') # transform 1979-01-01T00:00:00Z to 19790101000000, also possible: forcing_start_date
    loop_end_date=$(echo "${end_date}"   | sed  's/-//g ;  s/://g ;  s/T// ;  s/Z// ') # see above


    # Note, the "date" command is sensitive to versions!
    # Only for date (GNU coreutils) 8.26 this is possible: new_forcing_file_date=${forcing_start_date}
    new_forcing_file_date=$(echo "${forcing_start_date}"   | sed  ' s/T/ / ') # transform 1979-01-01T00:00:00Z to 1979-01-01 00:00:00Z
    new_model_read_date=$(echo "${start_date}"           | sed  ' s/T/ / ') # see above

    # from ICON file date format to this skript date format (s.a. user interface) or "GNU date" format (19790101T000500Z to 1979-01-01T00:05:00Z) use this:
    # date=$(echo "${file_date}"  | sed  's/.\{13\}/&:/ ;  s/.\{11\}/&:/  ; s/.\{6\}/&-/   ; s/.\{4\}/&-/ ')

    while [[ ${loop_start_date} -le ${loop_end_date} ]]
    do
         next_forcing_date=$(date --utc --date="${new_forcing_file_date}  + ${forcing_file_timestep}   seconds"  --iso-8601='seconds' | cut -d+ -f1  | sed  's/$/Z/ ; s/T/ / ' ) # e.g. from 1979-01-01 00:00:00Z  to  1979-01-02 00:00:00Z
      next_model_read_date=$(date --utc --date="${new_model_read_date}    + ${modelread_file_timestep} seconds"  --iso-8601='seconds' | cut -d+ -f1  | sed  's/$/Z/ ; s/T/ / ' ) # see above

         next_forcing_file_date=$(echo "${next_forcing_date}"     |  sed 's/-//g ;  s/://g ;  s/ /T/g ')  # e.g. 1979-01-02 00:00:00Z to 19790101T000500Z
      next_model_read_file_date=$(echo "${next_model_read_date}"  |  sed 's/-//g ;  s/://g ;  s/ /T/g ')  # see above

      add_link_file ${forcing_dir}/${forcing_fname_base}_${next_forcing_file_date}.nc      ./interface_vars_for_jsb_standalone_ml_${next_model_read_file_date}.nc

      new_forcing_file_date=${next_forcing_date}
        new_model_read_date=${next_model_read_date}

      loop_start_date=$(echo "${next_forcing_date}"   | sed  's/-//g ;  s/://g ;  s/T// ;  s/Z// ;  s/ //') # 1979-01-02 00:00:00Z to 19790102000000
    done


    # Check if restart_interval is a natural number multible greater equal 1 of the overall timestep of the forcing file
    A=$(echo "${restart_interval}"  | sed 's/P//g ;  s/T//g' )
    B=$(echo "${A}"                 | sed 's/Y/* 31536000 + /g;  s/M/* 2592000 + /g;   s/W/* 604800 + /g;  s/D/* 86400 + /g ; s/H/* 60 + /g;  s/M/* 3600 + /g;  s/S/  +/g ;   s/..$//' )
    #B=$(echo "${restart_interval}"  |  cut -d"P" -f2 | cut -d"T" -f2 ) # funktioniert nur wenn T existiert!
    #C=$(echo "${A} 0"  | sed 's/Y/* 31536000 + /g;  s/M/* 2592000 + /g;   s/W/* 604800 + /g;  s/D/* 86400 + /g'  )
    #D=$(echo "${B} 0"  | sed 's/H/* 60 + /g;  s/M/* 3600 + /g;  s/S/ +/g')
    (( restart_interval_inSeconds = ${B} ))


    if  ( expr ${restart_interval_inSeconds}  %  ${forcing_file_timestep} )  ; then # check if division tallies
    echo "The restart interval in seconds has to be a natural number (greater equal 1) that is a multible of forcing_steps_per_file multipied with the forcing_modelTimeStep."
    echo "This is not fulfilled for the restart_interval_inSeconds: ${restart_interval_inSeconds} and the forcing_file_timestep: ${forcing_file_timestep}."
    echo "Therefore we exit here"
    exit 
    fi

fi

#--------------------------------------------------------------------------------------------------

# (5) Define the output

# Parameters for all output files
# -------------------------------
cat >> $jsbach_namelist << EOF
! &jsb_io_nml  ! R: von Julia: src_jsbach4/src/base/mo_jsb_io.f90 ruft auf: src_jsbach4/src/adapters/mo_jsb_io_iface.f90: SUBROUTINE read_io_namelist(filename)
!     ! --- Experiment name ---
!     out_expname = "${expid}"
! 
!     read_interface_vars=.${read_interface_vars:-false}.
!     write_interface_vars=.${write_interface_vars:-false}.
! /
&io_nml
 restart_file_type= 5
 restart_write_mode = "sync"  ! Default: " " =Fallback mode. If num_restart_proc == 0 (parallel_nml), then this behaves like ”sync”, otherwise like ”async”. 
                               ! If async is choosen, the num_restart_procs must be bigger than 0! 
                               ! "joint procs multifile" not necessary/useful in default r2b4 setup. 
/
EOF

# Define output files
# -------------------
if [[ "$output_lnd" != "none" ]]; then
  cat >> $jsbach_namelist << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_fract"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${start_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'group:jsb_tile_fractions'
/
&output_nml
 output_filename  = "${EXPNAME}_lnd_basic"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}" ! R: PT1H nur zum debuggen
 include_last     = .FALSE.
 ml_varlist       = 'group:jsb_all_basic'
/
EOF
fi

case "${output_lnd}" in
  medium|full)
    cat >> $jsbach_namelist << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_medium"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'group:jsb_all_medium'
/
EOF
    ;;
esac

case "${output_lnd}" in
  full)
    cat >> $jsbach_namelist << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_full"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'group:jsb_all_full'
/
EOF
    ;;
esac

if [[ "$jsbach_check_wbal" == "yes" ]]; then
  cat >> $jsbach_namelist << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_wbal"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'hydro_water_flux_box', 'hydro_water_content_box', 'hydro_water_budget_box',
EOF
  if [[ "$jsbach_with_hd" == "yes" ]]; then
    cat >> $jsbach_namelist << EOF
                    'hydro_runoff_box'   , 'hydro_drainage_box',
                    'hd_water_budget_box', 'hd_water_budget_old_box', 'hd_water_flux_box', 'hd_water_error_box'
EOF
  fi
  cat >> $jsbach_namelist << EOF
/
EOF
fi

#-----------------------------------------------------------------------------







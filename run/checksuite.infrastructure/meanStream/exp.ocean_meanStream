#!/bin/bash
#=============================================================================
#-----------------------------------------------------------------------------
# the namelist filename
ocean_namelist=NAMELIST_${EXPNAME}
#-----------------------------------------------------------------------------
# global timing
start_date="2001-01-01T00:00:00Z"
  end_date="2001-01-01T04:00:00Z"
#
#-----------------------------------------------------------------------------
# model timing
((  hours_checkp   =24  ))  # write restart file interval [days]
(( years_restart     = 25 ))    # stop model for restart [days]
(( days_data         =  1 ))    # ocean model output interval hours [hours] - for test runs
#
#-----------------------------------------------------------------------------
# calculate model timesteps using $days_data
leading_zero=""
if [[ $days_data -lt 10 ]] ; then leading_zero="0"; fi
output_interval="P$leading_zero${days_data}D"     # ocean model output interval in days
output_interval="PT01H"
output_interval_mean="PT02H"
output_interval_mean_long="PT04H"
(( dt_data        = days_data         * day  ))   # used for output_bounds and buildbot
(( dt_checkpoint  = hours_checkp  * hour ))
(( dt_restart     = years_restart     * year ))
(( steps_per_file = dt_restart / dt_data+10  ))   # calculated output intervals per file interval
#steps_per_file=610                               # assigned output intervals per file interval
#-----------------------------------------------------------------------------
# global resolution
iforc=12
forcing_timescale=365  # length of OMIP/NCEP dataset: 1 = annual; 12 = monthly data; 365/else = daily data
init_relax=1
ocean_vertical_levels=40
icon_data_poolFolder=/pool/data/ICON
grids_folder=${icon_data_poolFolder}/oes/fluent/OceanOnly_Icos_0158km_etopo40
ocean_grids="OceanOnly_Icos_0158km_etopo40.nc"
#grids_folder="/scratch/mpi/CC/mh0287/users/m300056/icon/boundary_files/OceanOnly_160km_20levels_conservative"
#-----------------------------------------------------------------------------
#
dict_file='meanDict'
# write namelist parameters
# -------------------------
cat > ${ocean_namelist} << EOF
!
&parallel_nml
 nproma       = ${nproma}
 l_fast_sum   = .false.
! p_test_run   = .true.
! l_test_openmp= .true.
! l_log_checks=  .false.
/
&grid_nml
 dynamics_grid_filename = "${ocean_grids}",
 use_dummy_cell_closure = .true.
 use_duplicated_connectivity = .false.
/
&dynamics_nml
 iequations  = -1       ! -1: hydrost. ocean model
/
&run_nml
 dtime       = 3600
 output      = 'nml'
 activate_sync_timers = .TRUE.
 profiling_output = 3
 ! msg_timestamp        = .TRUE.
/
&output_nml
  output_filename  = "${EXPNAME}_spot_1h"
  filename_format  = "<output_filename>_<datetime2>"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${output_interval}"
  steps_per_file   = ${steps_per_file}                ! error with ""
  mode             =  2                               ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
  include_last     = .true.
  output_grid      = .TRUE.
  ml_varlist       =  'u','v','h'
! ml_varlist       =  'u','v','h','group:ocean_monitor','volume_Global'
/
&output_nml
  output_filename  = "${EXPNAME}_mean_1h"
  filename_format  = "<output_filename>_<datetime2>"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${output_interval}"
  steps_per_file   = ${steps_per_file}                ! error with ""
  mode             =  2                               ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
  operation        = "mean"
  include_last     = .true.
  output_grid      = .TRUE.
  ml_varlist       =  'u','v','h'
/
&output_nml
  output_filename  = "${EXPNAME}_mean_2h"
  filename_format  = "<output_filename>_<datetime2>"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${output_interval_mean}"
  steps_per_file   = ${steps_per_file}                ! error with ""
  mode             =  2                               ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
  include_last     = .true.
  operation        = "mean"
  output_grid      = .TRUE.
  ml_varlist       =  'u','v','h'
/
&output_nml
  output_filename  = "${EXPNAME}_mean_4h"
  filename_format  = "<output_filename>_<datetime2>"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${output_interval_mean_long}"
  steps_per_file   = ${steps_per_file}                ! error with ""
  mode             =  2                               ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
  include_last     = .true.
  operation        = "mean"
  output_grid      = .TRUE.
  ml_varlist       =  'u','v','h'
! ml_varlist       =  'u','v','h','volume_Global','group:ocean_monitor'
/
&dbg_index_nml
  idbg_mxmn=0                     ! initialize MIN/MAX  debug output
  idbg_val =0                     ! initialize one cell debug output
  idbg_slev=1                     ! initialize start level for debug output
  idbg_elev=5                     ! initialize end level for debug output
  dbg_lat_in=   30.0              ! latitude location of one cell debug output
  dbg_lon_in=  -30.0              ! longitude location of one cell debug output
  str_mod_tst='all'               ! define modules to print out in debug mode
/
&ocean_dynamics_nml
  n_zlev             =   5      ! number of vertical levels and (dzlev_m) thicknesses
  dzlev_m(1:5)      =   500.0,   500.0,   500.0,   500.0,   500.0
! n_zlev             =   10      ! number of vertical levels and (dzlev_m) thicknesses
! dzlev_m(1:10)      =   100.0,   100.0,   100.0,   100.0,   100.0,   100.0,   100.0,   100.0,  100.0,  100.0,
! 20 unevenly spaced levels used by MPIOM/GR60, limited to 700m at bottom
! n_zlev             =   20      ! number of vertical levels and (dzlev_m) thicknesses
! dzlev_m(1:20)      =   20.0,   20.0,   20.0,   30.0,   40.0,   50.0,   70.0,   90.0,  120.0,  150.0,
!                       180.0,  210.0,  250.0,  300.0,  400.0,  500.0,  600.0,  700.0,  700.0,  700.0
! 40 unevenly spaced levels used by MPIOM/GR30
! n_zlev             =   40
! dzlev_m(1:40)      =   12.0,   10.0,   10.0,   10.0,   10.0,   10.0,   13.0,   15.0,   20.0,   25.0,
!                        30.0,   35.0,   40.0,   45.0,   50.0,   55.0,   60.0,   70.0,   80.0,   90.0,
!                       100.0,  110.0,  120.0,  130.0,  140.0,  150.0,  170.0,  180.0,  190.0,  200.0,
!                       220.0,  250.0,  270.0,  300.0,  350.0,  400.0,  450.0,  500.0,  500.0,  600.0
  l_edge_based    = .FALSE.       ! edge- or cell-based mimetic discretization
  l_partial_cells = .FALSE.      ! partial bottom cells=true: local varying bottom depth
  solver_tolerance = 1.0E-13              !  absolute (new) or relative (gmres_oce_old) - to be checked
  solver_max_iter_per_restart = 26        !  outer solver loop with syncing
  solver_max_restart_iterations = 50      !  inner solver loop without syncing (30*50 iterations maximum)
  use_continuity_correction = .true.
  fast_performance_level = 50
/
&ocean_tracer_transport_nml
! no_tracer             = 2      ! tracer-transport: 0=no transport, 1=temperature, 2=temp. and salinity
! FLUX_CALCULATION_HORZ = 5      ! 1=upwind, 2=central, 3=Lax-Friedrichs, 4=Miura, 5=FCT with Zalesak limiter (default)
! FLUX_CALCULATION_VERT = 7      ! 6=adpo; 7=upwind biased ppm (default); 8=FCT with zalesak limiter
  ! define low and high order methods to be used in horizontal flux corrected transport methods (flux_calculation_horz=4,5)
  fct_low_order_flux    = 1      ! horizontal low  order method: 1=upwind (def), no other implemented
  fct_high_order_flux   = 2      ! horizontal high order method: 1=upwind, 2=central (def), 3=lax_friedrichs, 4=miura_order1
  threshold_min_T       = -4.0   ! to avoid abort
/
&ocean_diffusion_nml
  HorizontalViscosity_type            =   1       ! 3: calculate varying horizontal viscosity coefficient according to Munk criterion
  k_veloc_h                       =   3.0E+4  ! [m2/s] constant horizontal viscosity coefficient for velocity
  biharmonic_const                =   0.01    ! used with veloc_diffusion_form=2 only
  k_veloc_v                       =   1.5E-5  ! [m2/s]  vertical background viscosity coefficient for velocity
  MAX_VERT_DIFF_VELOC             =   0.0     ! max vertical viscosity for convection used in case of instability
  k_pot_temp_h                    = 600.0     ! [m2/s] constant horizontal diffusion coefficient for temperature
  k_pot_temp_v                    =   1.5E-5  ! [m2/s]  vertical background diffusion coefficient for temperature
  k_sal_h                         = 600.0     ! [m2/s] constant horizontal diffusion coefficient for salinity
  k_sal_v                         =   1.5E-5  ! [m2/s]  vertical background diffusion coefficient for salinity
  MAX_VERT_DIFF_TRAC              =   0.1     ! max vertical tracer diffusion for convection used in case of instability
! convection_InstabilityThreshold =  -5.0E-5  ! used in update_ho_params - default=-5e-8
! RichardsonDiffusion_threshold   =   0.0     ! used in update_ho_params - default=+5e-8
  k_tracer_GM_kappa_parameter     = 600.0     !
  k_tracer_isoneutral_parameter   = 600.0     ! 600: value for cell-based cartesian diffusion - mpiom: 1000/400km = 400/160km
  k_tracer_dianeutral_parameter   =   1.0E-5  !
/
&ocean_physics_nml
  !i_sea_ice                =    1          ! 0 = no sea ice; 1 = Winton; 2 = Semtner
  richardson_veloc   = 2.0e-3    ! factor for vertical viscosity coefficient in PP scheme
  richardson_tracer  = 2.0e-3    ! factor for vertical diffusion coefficient in PP scheme
  physics_parameters_type = 1   ! physics_parameters_ICON_PPoptimized_type
/    
&ocean_forcing_nml
  iforc_oce = 11
  ! type_surfRelax_Temp= 0      !  0: no relaxation used
                                 !  1: relaxation switched on for reading (init_oce_relax=1) or some testcases only
                                 !  2: use SST read from bulk forcing (iforc=12);
                                 !     use atmospheric temperature in case of coupling (iforc=14)
                                 !  3: use initial prognostic T as 2-dim relax, copy SST on tracer_relax(1)
                                 ! -1: use net surface heat flux from atmosphere as boundary condition
  ! para_surfRelax_Temp   =    1.0    ! strength of 2-dim relaxation for temperature (months)
                                 ! this value is divided by number of seconds per month (=30*24*3600)
  forcing_windstress_u_type = 106
  forcing_windstress_v_type = 0
  forcing_windStress_u_amplitude = 0.3
  forcing_windstress_zonal_waveno      = 3.0
  forcing_windstress_merid_waveno = 3.0
/
&ocean_initialConditions_nml
  ! itestcase_oce = 1050
  initial_salinity_type      = 202    
  initial_salinity_top       = 34.1
  initial_salinity_bottom    = 35.0
  initial_temperature_type   = 200
  initial_temperature_top    = 10.0 
  initial_temperature_bottom = 10.0
/
&io_nml
! output_nml_dict  = "${dict_file}"
! netcdf_dict      = "${dict_file}"
  dt_checkpoint = ${dt_checkpoint}
  lkeep_in_sync = .TRUE.          ! sync after each timestep
 lnetcdf_flt64_output = .true.
/
EOF
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# add standard atmo_non-hydrostatic_files
. ${thisdir}/add_required_ocean_files
#-----------------------------------------------------------------------------


#! %{JOB.python3} #%# -*- mode: python -*- vi: set ft=python :

'''\
Merge intake directories
'''

import argparse
import json
import os
import sys

#% include 'standard_experiments/logging.tmpl'

# Process command line options

command_line = argparse.ArgumentParser(description=__doc__.split('\n', 1)[0])
command_line.add_argument('input_name', help='intake catalog to merge')
command_line.add_argument('output_name', help='intake catalog to merge into')
command_line.add_argument('-f', '--force', action='store_true', help=
    'only warn about duplicated data instead of exiting with an error')
command_line.add_argument('-g', '--git', action='store_true', help=
    'use git methods when storing data')
command_line.add_argument('-V', '--version', action='version', version="""
$Id: DEFAULT.intake_merge.tmpl 0 2022-04-07 10:53:00Z m221078 $
%{VERSIONS_|join('\n')}
""")
args = command_line.parse_args()

os.chdir('%{SCRIPT_DIR}')

# Start processing

logging.info('%{JOB.id} process started')

# Settings for intake-esm catalog

assets = "uri"
variable_column_name = "variable_id"

# Read input catalog

input_name = args.input_name

try:

    with open(input_name) as input_file:
        input_data = json.load(input_file)

        input_attributes = tuple(att['column_name']
                                 for att in input_data['attributes'])
        input_assets = input_data['assets']['column_name']

    # Get non-variable attribute list, init treatment of variable column
    try:
        idx = input_attributes.index(variable_column_name)
        non_variable_attributes = (input_attributes[:idx] + 
            input_attributes[idx+1:])
    except ValueError:
        non_variable_attributes = input_attributes

    def generate_keys(entry):
        for var in entry[variable_column_name]:
            yield ( (var,) +
                tuple(str(entry[att]) for att in non_variable_attributes) )

except (IOError, ValueError) as e:

    logging.error("cannot load '{0}': {1}".format(input_name, str(e)))
    sys.exit(1)

# Read current output catalog and merge input data

output_name = args.output_name

try:

    with open(output_name) as output_file:
        output_data = json.load(output_file)

        output_attributes = tuple(att['column_name']
                                  for att in output_data['attributes'])
        output_assets = output_data['assets']['column_name']

    # Check compatibility
    if (sorted(input_attributes) != sorted(output_attributes)
        or input_assets != output_assets):
        logging.error("incompatible catalog '{0}'".format(output_name))
        sys.exit(1)

    # Prepare merge
    catalog_dict = {}
    catalog_index = {} # Contains an entry for each var name in var list

    # Import current output data
    for entry in output_data['catalog_dict']:
        key = tuple(str(entry[att]) for att in output_attributes)
        # Generate dummy keys for duplicate entries
        while key in catalog_dict:
            key += ('',)
        catalog_dict[key] = entry
        for key in generate_keys(entry):
            if not key in catalog_index:
                catalog_index[key] = entry

    # Do the actual merge

    for entry in input_data['catalog_dict']:
        duplicates = tuple(key for key in generate_keys(entry)
            if key in catalog_index
            and entry[assets] != catalog_index[key][assets])
        if duplicates:
            if args.force:
                for key in duplicates:
                    logging.warning("key '%s' is already taken by assets"
                    " '%s'", str(key), catalog_index[key][assets])
            else:
                for key in duplicates:
                    logging.error("key '%s' is already taken by assets"
                    " '%s'", str(key), catalog_index[key][assets])
                sys.exit(1)
        else:
            key = tuple(str(entry[att]) for att in output_attributes)
            catalog_dict[key] = entry
            for key in generate_keys(entry):
                catalog_index[key] = entry

    output_data["catalog_dict"] = list(catalog_dict.values())

except (IOError, ValueError) as e:

    logging.warning("cannot load '{0}': {1}".format(output_name, str(e)))
    logging.warning("creating new catalog")

    # In this case, no merge is needed
    output_data = input_data

# Write intake-esm catalog to temp file

temp_name = output_name + '~'

try:

    with open(temp_name, 'w') as temp_file:
        json.dump(output_data, temp_file,
                  indent=4, separators=(',',': ')) ### , sort_keys=True)
        temp_file.write('\n')

except (IOError, ValueError) as e:

    logging.error("cannot store '{0}': {1}".format(temp_name, str(e)))
    sys.exit(1)

# Move temp file to output file

os.rename(temp_name, output_name)

# Finish processing

logging.info('%{JOB.id} process finished')


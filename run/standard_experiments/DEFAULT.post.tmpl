#! /usr/bin/env python #%# -*- mode: python -*- vi: set ft=python :
#SBATCH --account=%{ACCOUNT}
#%  if JOB.qos is defined:
#SBATCH --qos=%{JOB.qos}
#%  endif
#SBATCH --job-name=%{EXP_ID}.%{JOB.id}
#SBATCH --partition=prepost,shared
#SBATCH --ntasks=%{JOB.tasks}
#%  if JOB.hardware_threads|default('') is not set:
#SBATCH --ntasks-per-core=1
#%  endif
#SBATCH --output=%{SCRIPT_DIR}/%x.%j.log
#SBATCH --time=%{JOB.time_limit}

'''\
Post-process ICON experiment data for a given period
'''

import argparse
import logging
import os
import re
import subprocess
import sys

sys.path.append(os.path.join('%{MODEL_DIR}', 'lib', 'python'))
import mtime

# Process command line options

def check_date(arg):
    try:
        value = mtime.DateTime(arg)
    except ValueError as ve:
        raise argparse.ArgumentTypeError(ve.message)
    return str(value.date)

command_line = argparse.ArgumentParser(description=__doc__.split('\n', 1)[0])
command_line.add_argument('start_date', type=check_date, help=
    'first date of period (YYYY-MM-DD... or YYYYMMDD...)')
command_line.add_argument('-V', '--version', action='version', version='%{VERSIONS_|join(" ")|trim()}')
command_line.add_argument('-c', '--clean', action='store_true', help=
    'remove output files. '
    'Use ONLY after you made absolutely sure that the raw data still exists!')
args = command_line.parse_args()

# Do time computations using mtime

mtime.setCalendar(mtime.CALENDAR_TYPE.%{calendar_mtime})

initial_date = mtime.DateTime('%{INITIAL_DATE}')
start_date = mtime.DateTime(args.start_date)

if start_date < initial_date:
    sys.stderr.write("Oops: start_date is before initial_date\n")
    sys.exit(1)
    
interval = mtime.TimeDelta('%{INTERVAL}')
next_date = start_date + interval
end_date = next_date + mtime.TimeDelta('-P1D')

atmo_time_step = mtime.TimeDelta('%{ATMO_TIME_STEP}')
ocean_time_step = mtime.TimeDelta('%{OCEAN_TIME_STEP}')

# Format cdo shifttime commands for Makefile generation

atmo_shift_list = ['-shifttime,-{0}{1}'.format(value, name)
    for (name, value) in atmo_time_step.items() if name != 'sign' and value]
ocean_shift_list = ['-shifttime,-{0}{1}'.format(value, name)
    for (name, value) in ocean_time_step.items() if name != 'sign' and value]

# Define required output

tags = ['atm_2d_ml', 'atm_3d_ml', 'atm_dbg_ml', 'atm_mon', 'lnd_basic_ml', 'oce_dbg oce_def', 'oce_ice', 'oce_moc', 'oce_mon']
#%  if WITH_OBGC is set:
tags.extend(['hamocc', 'hamocc_2d_tendencies', 'hamocc_3d_tendencies', 'hamocc_EU_tendencies', 'hamocc_monitor', 'hamocc_sediment']) 
#%  endif

# Set-up template variables

template_dict = {}
template_dict['start_date'] = args.start_date.translate(None, '-')
template_dict['start_step'] = 2 if start_date == initial_date else 1
template_dict['next_date'] = str(next_date.date).translate(None, '-')
template_dict['end_date'] = str(end_date.date).translate(None, '-')
template_dict['atmo_shift_spec'] = ' '.join(reversed(atmo_shift_list))
template_dict['ocean_shift_spec'] = ' '.join(reversed(ocean_shift_list))
template_dict['tags'] = ' '.join(tags)

# Prolog

logging.basicConfig(format='%(asctime)s: %(levelname)s%(message)s',
                    level=logging.INFO)
logging.addLevelName(logging.DEBUG, 'Debug: ')
logging.addLevelName(logging.INFO, '')
logging.addLevelName(logging.WARNING, 'Hey: ')
logging.addLevelName(logging.ERROR, 'Oops: ')
logging.addLevelName(logging.CRITICAL, 'Sorry: ')

logging.info('post processing started '
             'for {start_date}-{end_date}'.format(**template_dict))

# Set-up directory structure

post_dir = os.path.join('%{WORK_DIR}',
                        'post_{start_date}-{end_date}'.format(**template_dict))
data_dir = '%{DATA_DIR}'

if not os.path.isdir(post_dir): os.makedirs(post_dir)
if not os.path.isdir(data_dir): os.makedirs(data_dir)

os.chdir(post_dir)

logging.info('working directory is {0}'.format(post_dir))

# Generate Makefile

makefile_template = '''\
CDO = cdo
CDOFLAGS = -r -O

EXP_ID = %{EXP_ID}
DATA_DIR = %{DATA_DIR}
WORK_DIR = %{WORK_DIR}

TAGS = {tags}

TARGETS = $(TAGS:%=$(DATA_DIR)/$(EXP_ID)_%_{start_date}.nc)

all: $(TARGETS)

clean:
	$(RM) $(TARGETS)

$(DATA_DIR)/$(EXP_ID)_atm_%_{start_date}.nc: $(WORK_DIR)/$(EXP_ID)_atm_%_{start_date}T000000Z.nc
	$(CDO) $(CDOFLAGS) {atmo_shift_spec} -seltimestep,{start_step}/`cdo -s ntime $<` $< $@

$(DATA_DIR)/$(EXP_ID)_lnd_%_{start_date}.nc: $(WORK_DIR)/$(EXP_ID)_lnd_%_{start_date}T000000Z.nc
	$(CDO) $(CDOFLAGS) {atmo_shift_spec} -seltimestep,{start_step}/`cdo -s ntime $<` $< $@

$(DATA_DIR)/$(EXP_ID)_oce_%_{start_date}.nc: $(WORK_DIR)/$(EXP_ID)_oce_%_{start_date}T000000Z.nc
	$(CDO) $(CDOFLAGS) {ocean_shift_spec} $< $@

$(DATA_DIR)/$(EXP_ID)_hamoc%_{start_date}.nc: $(WORK_DIR)/$(EXP_ID)_hamoc%_{start_date}T000000Z.nc
	$(CDO) $(CDOFLAGS) {ocean_shift_spec} $< $@
'''

makefile_name = 'Makefile'
makefile = open(makefile_name, mode='w')
makefile.write(makefile_template.format(**template_dict))
makefile.close()

# Run the actual make process

make_args = ['make', '-k', '-j', '%{JOB.tasks|d(1)}']
if args.clean: make_args.append('clean')
make = subprocess.Popen(make_args,
                        stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in make.stdout:
    logging.info(line.rstrip('\n\r'))

make_result = make.wait()
if make_result:
    logging.error("'{0}' returned {1}".format(' '.join(make_args), make_result))
    sys.exit(1)

os.remove(makefile_name)
os.chdir('%{SCRIPT_DIR}')
os.removedirs(post_dir)

# Epilog

logging.info('post processing finished '
             'for {start_date}-{end_date}'.format(**template_dict))

#% for job in JOB['.trigger']|list:
subprocess.check_call(['%{JOB.batch_command}', '%{EXP_ID}.%{job}', args.start_date])
#% endfor

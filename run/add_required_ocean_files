#!/bin/bash
  #=======================================================
  # input folders
  ocean_location="fluent"
  case "x$ocean_location" in
    xfluent)
      case "$target" in
        thunder)
          ocean_data_MainFolder=/scratch/mpi/CC/mh0287/oes/fluent
        ;;
      esac
    ;;
  esac
   
  ocean_data_MainFolder=/scratch/mpi/CC/mh0287/oes/fluent
  
  ocean_data_MainFolder=${ocean_data_MainFolder:=${icon_data_MainFolder}/oes}
  grid_name=${ocean_grids%.nc}
  ocean_data_InputFolder=${ocean_data_InputFolder:=${ocean_data_MainFolder}/${grid_name}}
  grids_folder=${grids_folder:=${ocean_data_InputFolder}}
  
  ocean_forcing_folder=${ocean_forcing_folder:=${ocean_data_InputFolder}}
  ocean_init_folder=${ocean_init_folder:=${ocean_data_InputFolder}}
  ocean_relax_folder=${ocean_relax_folder:=${ocean_data_InputFolder}}

  #=======================================================
  # input file names  
  #pre/postfixes of input files
  file_vertical_levels="${ocean_vertical_levels}levels"
  init_DataType=${init_DataType:="omipInitialState-AnnualAverage"}
  relax_DataType=${relax_DataType:="omipRelaxSurface"}
  forcing_DataType=${forcing_DataType:="omipForcing-mpiom"}
  if [[ "x$forcing_timescale" = "x1" ]] ; then
    forcing_FileFrequence=${forcing_FileFrequence:="Annual"}
  elif [[ "x$forcing_timescale" = "x12" ]] ; then
    forcing_FileFrequence=${forcing_FileFrequence:="MonthlyMean"}
  elif [[ "x$forcing_timescale" = "x365" ]] ; then
    forcing_FileFrequence=${forcing_FileFrequence:="Daily"}
  fi
 
  ocean_forcing_filename=${ocean_forcing_filename:=${forcing_DataType}${forcing_FileFrequence}-${grid_name}.nc}
  ocean_forcing_InputFilename=${ocean_forcing_folder}/${ocean_forcing_filename}

  ocean_initialState_filename=${ocean_initialState_filename:=${init_DataType}-${grid_name}-${file_vertical_levels}.nc}
  ocean_initialState_InputFilename=${ocean_init_folder}/${ocean_initialState_filename}

  ocean_relax_filename=${ocean_relax_filename:=${relax_DataType}-${grid_name}.nc}
  ocean_relax_InputFilename=${ocean_relax_folder}/${ocean_relax_filename}

  #=======================================================
  # re-naming of the input files when copying to the experiment folder
  ocean_forcing_outputFilename="ocean-flux.nc"
  ocean_initialState_outputFilename="initial_state.nc"
  ocean_relax_outputFilename="ocean-relax.nc"
   
  #=======================================================
  # add required files if this is not post processing
  case "x$RUNSCRIPT_NAME" in
    *post*)
      # for postprocessing we do not need files
    ;;
    #-------------------------------------------------
    *)
      # add files for runing the ocean  
      if [[ "x$iforc" = "x12" ]] ; then
        ls -l $ocean_forcing_InputFilename
        if [ $? -eq 0 ]; then
          add_required_file ${ocean_forcing_InputFilename}     $ocean_forcing_outputFilename
        else
          echo "WARNING: $ocean_forcing_InputFilename does not exist - proceed from local disk"
        fi
      fi

      #--------------------------------------------------
      if [[ "x$iforc" = "x12" ]] ; then
        use_file_initialConditions=".true."
      fi
      if [[ "x$use_file_initialConditions" = "x.true." ]] ; then
        ls -l $ocean_initialState_InputFilename
        if [ $? -eq 0 ]; then
          add_required_file ${ocean_initialState_InputFilename}          $ocean_initialState_outputFilename
        else
          echo "WARNING: $ocean_initialState_InputFilename does not exist - proceed from local disk"
        fi
      fi

      #--------------------------------------------------
      if [[ "x$init_relax" = "x1" ]] ; then
        ls -l $ocean_relax_InputFilename
        if [ $? -eq 0 ]; then
          add_required_file ${ocean_relax_InputFilename} $ocean_relax_outputFilename
        else
          echo "WARNING: Cannot find restart file: ${ocean_relax_InputFilename}"
        fi

      fi
    ;;
  esac

  #===============================================================================================

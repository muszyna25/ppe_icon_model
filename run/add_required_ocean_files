#!/bin/ksh
   # =======================================================
   #
   # Main pool directories to provide ocean input data:
   #   all files for ocean init/forcing from pool will be copied to $HGRIDDIR
   #
   # use add_required_file ${in_path_file} ./${new_name} 
   # --------------------------------------------------
   pool_icon_folder=/pool/data/ICON
   # local_grid_folder=${ICON_BASE_PATH}/grids
   local_grid_folder=${grids_folder:=${ICON_BASE_PATH}/grids}

   # if not defined, get them from the pool
   if [ "x${LOC}" = 'xPOOL' ] ; then
     grids_folder=${pool_icon_folder}/ocean_data/ocean_grid
     ocean_forcing_folder=${pool_icon_folder}/ocean_data/ocean_forcing
     ocean_init_folder=${pool_icon_folder}/ocean_data/ocean_init
   else
     # grids_folder=${local_grid_folder}
     ocean_forcing_folder=${local_grid_folder}
     ocean_init_folder=${local_grid_folder}
   fi
          ocean_forcing_folder=${ocean_forcing_folder:=${pool_icon_folder}/ocean_data/ocean_forcing}
             ocean_init_folder=${ocean_init_folder:=${pool_icon_folder}/ocean_data/ocean_init}
               ocean_grid_desc=R${R}B0${B}
   if [[ "x${use_gridfile_for_grabbing_externale_data}" = 'xtrue' ]] ; then
     ocean_grid_desc=$(basename ${ocean_grids} .nc)
   fi
   external_interpolation_type=${external_interpolation_type:=conservative}
   case "${external_interpolation_type}" in
     conservative)
           omip_prefix=omip4icon-
          omip_postfix=''
           init_prefix=ts_phc_
        init_grid_desc="-icon${ocean_grid_desc}-"
          relax_prefix=ts_surf_
       relax_grid_desc=$init_grid_desc
       ;;
     mpiom)
           omip_prefix=omip_icon_
          omip_postfix='_forcing'
           init_prefix=ts_phc3.0_
        init_grid_desc="_icon_${ocean_grid_desc}_"
          relax_prefix=$init_prefix
       relax_grid_desc=$init_grid_desc
       ;;
     *)
       echo "please choose an allowed values fro external_interpolation_type: conservative, mpiom"
       exit 1
       ;;
     esac
   # =======================================================
   #
   # provide netcdf file for reading ocean forcing fluxes
   # ----------------------------------------------------
   if [[ "x$iforc" = "x12" ]] ; then
     # filename on EXPDIR read by ocean model
     ocean_flux_filename=iconR${R}B0${B}-flux.nc

     # general filename: OMIP annual file
     if [[ "x$forcing_timescale" = "x1" ]] ; then
       ocean_force_filename=${omip_prefix}${ocean_grid_desc}${omip_postfix}-annual.nc
     # filename for OMIP 12 sets of monthly means
     elif [[ "x$forcing_timescale" = "x12" ]] ; then
       ocean_force_filename=${omip_prefix}${ocean_grid_desc}${omip_postfix}-monmean.nc
       # provide netcdf file for NCEP ocean forcing - length of 12 months for annual reading
       if [[ "x$iforc_type" = "x5" ]] ; then
         ocean_force_filename=ncep4icon_${ocean_grid_desc}.nc
       fi
     # filename for OMIP 365 sets of daily data
     elif [[ "x$forcing_timescale" = "x365" ]] ; then
       ocean_force_filename=${omip_prefix}${ocean_grid_desc}${omip_postfix}-daily.nc
     fi

     # copy file from pool to grids directory $HGRIDDIR
     ocean_flux_file=${ocean_forcing_folder}/$ocean_force_filename     
     ls -l $ocean_flux_file
     if [ $? -eq 0 ]; then
       add_required_file ${ocean_flux_file}          $ocean_flux_filename
     else
       echo "WARNING: $ocean_flux_file does not exist - proceed from local disk"
     fi
   fi

   # =======================================================
   # provide netcdf file for initialization of ocean prognostic variables
   # --------------------------------------------------------------------
   if [[ "x$use_file_initialConditions" = "x.true." ]] ; then

     # ocean_prog_filename=iconR${R}B0${B}-prog.nc
     ocean_prog_filename="initial_state.nc"
     ocean_oini_filename=${init_prefix}annual${init_grid_desc}${init_oce_suff}

     ocean_init_filename=${ocean_init_folder}/$ocean_oini_filename
     ls -l $ocean_init_filename
     if [ $? -eq 0 ]; then
       add_required_file ${ocean_init_filename}          ./$ocean_prog_filename
     else
       echo "WARNING: $ocean_init_filename does not exist - proceed from local disk"
     fi
   fi

     # link to fixed restart file for buildbot:
   # =======================================================
   # provide netcdf file for initialization of temperature/salinity relaxation
   # -------------------------------------------------------------------------
   if [[ "x$init_relax" = "x1" ]] ; then

     ocean_relax_filename=iconR${R}B0${B}-relax.nc
     ocean_orel_filename=${relax_prefix}annual${relax_grid_desc}${init_rel_suff}

     ocean_orel_file=${ocean_init_folder}/$ocean_orel_filename
     ls -l $ocean_orel_file
     if [ $? -eq 0 ]; then
       add_required_file ${ocean_orel_file} ./$ocean_relax_filename
     else
       echo "WARNING: Cannot find restart file: ${ocean_orel_file}"     
     fi
          
   fi
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# the namelist filename
ocean_namelist=NAMELIST_${EXPNAME}
#-----------------------------------------------------------------------------
# global timing
start_date="2001-01-01T00:00:00Z"
  end_date="2051-01-01T00:00:00Z"
#
#-----------------------------------------------------------------------------
# model timing
(( years_checkpoint  = 50 ))    # write restart file interval [days]
(( years_restart     = 50 ))    # stop model for restart [days]
(( days_data         = 30 ))    # ocean model output interval hours [hours] - for test runs
#
#-----------------------------------------------------------------------------
# calculate model timesteps using $days_data
leading_zero=""
if [[ $days_data -lt 10 ]] ; then leading_zero="0"; fi
output_interval="P$leading_zero${days_data}D"     # ocean model output interval in days
(( dt_data        = days_data         * day  ))   # used for output_bounds and buildbot
(( dt_checkpoint  = years_checkpoint  * year ))
(( dt_restart     = years_restart     * year ))
(( steps_per_file = dt_restart / dt_data+10  ))   # calculated output intervals per file interval
#steps_per_file=610                               # assigned output intervals per file interval
#
LOC='POOL'
#grids_folder="/pool/data/ICON/ocean_data/ocean_grid/"
ocean_grids="AtlanticAquaBox_0079km.nc"
#-----------------------------------------------------------------------------
#
# write namelist parameters
# -------------------------
# For a complete list see Namelist_overview.pdf
#
cat > ${ocean_namelist} << EOF
!
&parallel_nml
 nproma       = ${nproma}
 l_fast_sum   = .true.
 p_test_run   = .false.
 division_method = 102
/
&grid_nml
 dynamics_grid_filename = "${ocean_grids}",
 use_dummy_cell_closure = .true.
 use_duplicated_connectivity = .false.
/
&dynamics_nml
 iequations  = -1       ! -1: hydrost. ocean model
/
&run_nml
 dtime       = 3600               ! model timestep in seconds
 output      = 'nml'              ! output mechanism via namelist
 activate_sync_timers = .TRUE.
 profiling_output     = 2
 msg_timestamp        = .FALSE.
 timers_level         = 10
 debug_check_level    = 6
/
&output_nml
  output_filename  = "${EXPNAME}"
  filename_format  = "<output_filename>_<datetime2>"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${output_interval}"
  steps_per_file   = ${steps_per_file}                ! error with ""
  output_grid      = .true.
  ml_varlist       =  'group:oce_essentials','topBoundCond_windStress_u','A_tracer_v_T'
/
&dbg_index_nml
  idbg_mxmn=1                     ! initialize MIN/MAX  debug output
  idbg_val =0                     ! initialize one cell debug output
  idbg_slev=1                     ! initialize start level for debug output
  idbg_elev=5                      ! initialize end level for debug output
  dbg_lat_in=   30.0              ! latitude location of one cell debug output
  dbg_lon_in=  -30.0              ! longitude location of one cell debug output
  str_mod_tst='all'               ! define modules to print out in debug mode
/
&ocean_dynamics_nml
!n_zlev             =   32
!dzlev_m(1:32)      =   14.0,   12.0,   12.0,   12.0,   12.0,   12.0,   13.0,   15.0,   20.0,   25.0,
!                       30.0,   35.0,   40.0,   45.0,   50.0,   55.0,   60.0,   70.0,   80.0,   90.0,
!                      100.0,  110.0,  120.0,  130.0,  140.0,  150.0,  160.0,  170.0,  180.0,  190.0,
!                      200.0,  220.0
 n_zlev             =   20
 dzlev_m(1:20)      =   14.0,   12.0,   15.0,   18.0,   21.0,   25.0,   30.0,   40.0,   60.0,   80.0,
                       100.0,  120.0,  150.0,  180.0,  210.0,  240.0,  270.0,  300.0,  350.0,  400.0
  l_edge_based                    = .FALSE.   ! edge- or cell-based mimetic discretization
! l_partial_cells                 = .FALSE.   ! partial bottom cells=true: local varying bottom depth
  select_solver                   =   2       ! 1=gmres_oce_old; 2=ocean_restart_gmres, 3=mixed precisison restart
  use_absolute_solver_tolerance   = .true.
  solver_tolerance                =   1.0E-14
  solver_max_iter_per_restart     =  26       !
  solver_tolerance_sp             =   1.0E-14 !
  solver_max_iter_per_restart_sp  =  26  !
  solver_max_restart_iterations   = 100       !  outer (restart solver)
  fast_performance_level          = 500       !  performance level 12: for cell-based; 5: default
! use_continuity_correction       = .TRUE.    !  height adjustment according to vertical velocity in dynamics
  cfl_check                       = .FALSE.
  cfl_write                       = .FALSE.
                                              ! horizontal viscosity parametrization:
  veloc_diffusion_form            =   1       ! 1: laplace; 2: biharmonic
  veloc_diffusion_order           =   1       ! 1: curlcurl 2: divgrad
/
&ocean_tracer_transport_nml
! no_tracer             = 2      ! tracer-transport: 0=no transport, 1=temperature, 2=temp. and salinity
! FLUX_CALCULATION_HORZ = 5      ! 1=upwind, 2=central, 3=Lax-Friedrichs, 4=Miura, 5=FCT with Zalesak limiter (default)
! FLUX_CALCULATION_VERT = 7      ! 6=adpo; 7=upwind biased ppm (default); 8=FCT with zalesak limiter
  ! define low and high order methods to be used in horizontal flux corrected transport methods (flux_calculation_horz=4,5)
! fct_low_order_flux    = 1      ! horizontal low  order method: 1=upwind (def), no other implemented
! fct_high_order_flux   = 2      ! horizontal high order method: 1=upwind, 2=central (def), 3=lax_friedrichs, 4=miura_order1
  threshold_min_T       = -1.0   ! abort due to temperature minimum threshold
  threshold_max_T       = 17.0   ! abort due to temperature maximum threshold - max forcing (below) is 16.0
/
&ocean_diffusion_nml
  HorizontalVelocityDiffusion_type            =   1       ! 3: calculate varying horizontal viscosity coefficient according to Munk criterion
  k_veloc_h                       =   3.0E+4  ! [m2/s] constant horizontal viscosity coefficient for velocity
  biharmonic_const                =   0.01    ! used with veloc_diffusion_form=2 only
  k_veloc_v                       =   5.0E-5  ! [m2/s]  vertical background viscosity coefficient for velocity
  MAX_VERT_DIFF_VELOC             =   0.0     ! max vertical viscosity for convection used in case of instability
  k_pot_temp_h                    = 300.0     ! [m2/s] constant horizontal diffusion coefficient for temperature
  k_pot_temp_v                    =   1.5E-5  ! [m2/s]  vertical background diffusion coefficient for temperature
  k_sal_h                         = 300.0     ! [m2/s] constant horizontal diffusion coefficient for salinity
  k_sal_v                         =   1.5E-5  ! [m2/s]  vertical background diffusion coefficient for salinity
  MAX_VERT_DIFF_TRAC              =   0.1     ! max vertical tracer diffusion for convection used in case of instability
  convection_InstabilityThreshold =  -5.0E-5  ! used in update_ho_params
  RichardsonDiffusion_threshold   =   0.0     ! used in update_ho_params
  k_tracer_GM_kappa_parameter     = 200.0     !
  k_tracer_isoneutral_parameter   = 200.0     ! 600: value for cell-based cartesian diffusion - mpiom: 1000/400km = 400/160km
  k_tracer_dianeutral_parameter   =   1.0E-5  !
/
&ocean_physics_nml
  i_sea_ice                       =   0       ! 0 = no sea ice; 1 = sea ice model on
  richardson_tracer               =   2.0E-3  ! factor for vertical diffusion coefficient in PP scheme
  richardson_veloc                =   2.0E-3  ! factor for vertical viscosity coefficient in PP scheme
! bottom_drag_coeff               =   2.5E-3  ! default=2.5E-3
  physics_parameters_type         =   2       ! type of pp-scheme: 1=ICON-optimized; 2=MPIOM-type
  use_wind_mixing                 = .FALSE.   ! true: use wind mixing scheme in MPIOM-type pp-scheme
  GMRedi_configuration            =   1       ! 0=cartesian diffusion 1=GM-Redi combined bolus advection + isopycnal diffusion
/
&ocean_forcing_nml
  iforc_oce                       =  11
  init_oce_relax                  =   2       ! 2: do not read relaxation data
  type_surfRelax_Temp             =   3       ! 0: no relaxation used
  type_surfRelax_Temp             =   3       ! 3: relaxation=initialization temperature
  para_surfRelax_Temp             =   0.3     ! strength of 2-dim relaxation for temperature (months)
                                              ! this value is divided by number of seconds per month (=30*24*3600)
  type_surfRelax_Salt             =   0       ! 2-dim relaxation of salinity - see temperature relaxation for type values
  forcing_windstress_u_type       = 111       ! 111: Wolfe&Cessi testcase
  forcing_windstress_v_type       =   0
  forcing_windStress_u_amplitude  =   0.1
  forcing_smooth_steps            =   1       ! increase forcing to max within steps
! forcing_windspeed_type          = 102       ! 102:  calculate wind speed from wind stress
! forcing_windspeed_amplitude     =   1.0     ! default: 1.0
  relax_temperature_max           =  16.0     ! equator temperature
  relax_temperature_min           =   0.0     ! poleward temperature
  forcing_temperature_poleLat     =  45.0     ! location of poleward minimum relaxation and init temperature
/
&ocean_initialConditions_nml
  initial_salinity_type           = 200       !  horizontally homogeneous
  initial_salinity_top            =  35.0
  initial_salinity_bottom         =  35.0
  initial_temperature_type        = 212       !  APE function for SST gradient, vertically linear with depth
  initial_temperature_bottom      =   0.0     !  bottom and poleward temperature
  initial_temperature_top         =  16.0     !  equator temperature
  initial_temperature_shift       =   0.0     !  addon shift for N-Pole
/
&ocean_diagnostics_nml
  diagnostics_level               = 1
/
&io_nml
  dt_checkpoint = ${dt_checkpoint}
  lkeep_in_sync = .TRUE.          ! sync after each timestep
  ! use_set_event_to_simstep = .false. 
/
EOF
#-----------------------------------------------------------------------------
# add standard atmo_non-hydrostatic_files
. ${thisdir}/add_required_ocean_files

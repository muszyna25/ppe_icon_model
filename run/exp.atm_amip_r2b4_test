#--------------------------------------------------------------------------------------------------
#
# AMIP experiment
#
author_list="Marco Giorgetta, MPIM"
#
#--------------------------------------------------------------------------------------------------
#
# This file describes an AMIP experiment intialized from analysis files and using
# transient boundary conditions for:
# - SST and sea ice
# - spectral solar irradiation
# - well mixed greenhouse gases CO2, CH4, N2O, CFCs
# - O3 concentration
# - tropospheric aerosol optical properties
# - stratospheric volcanic aerosol optical properties
#
#--------------------------------------------------------------------------------------------------

# (1) Variables provided by the scripting mechanism

# EXPNAME                       = name of exp. in 'exp.<name of exp.>'
# basedir                       = base directory, where src/, run/ etc exist
# thisdir                       = equals here to the run/
# nproma                        = blocking length for array dimensioning and inner loop lengths
# second, minute, hour, day     = length of these intervals in [s]

#--------------------------------------------------------------------------------------------------

# (2) Set variables needed by the scripting mechanism

# horizontal grid(s)
grids_folder=/pool/data/ICON/grids/private/r2b4_amip
atmo_dyn_grids='r2b4_amip.nc'

# start and end date+time
start_date="1979-01-01T00:00:00Z"        # ISO-format date+time
  end_date="1979-01-01T01:00:00Z"        # ISO-format date+time

# restart interval
#restart_days=10  
#(( dt_checkpoint = restart_days * day))
#(( dt_restart    = restart_days * day))
(( dt_checkpoint = 30 * minute))
#

file_interval="PT10M"

# namelist files
atmo_namelist=NAMELIST_${EXPNAME}_atm
lnd_namelist=NAMELIST_${EXPNAME}_lnd

#--------------------------------------------------------------------------------------------------

# (3) Define the model configuration

# atmospheric dynamics and physics
# --------------------------------
cat > ${atmo_namelist} << EOF
!
&parallel_nml
 nproma           = ${nproma}
/
&grid_nml
 dynamics_grid_filename = "${atmo_dyn_grids}",
/
&run_nml
 num_lev          = 47          ! number of full levels
 dtime            = 120         ! [s] dynamics time step
 ltestcase        = .FALSE.     ! run testcase
 ldynamics        = .TRUE.      ! dynamics
 ltransport       = .TRUE.      ! transport
 ntracer          = 3           ! number of tracers
 iforcing         = 2           ! 0: none, 1: HS, 2: 2: ECHAM, 3: NWP
 output           = 'nml'
 msg_level        = 10          ! detailed report during integration 
 restart_filename = "${EXPNAME}_restart_atm_<rsttime>.nc"
/
&extpar_nml
 itopo            = 1           ! 1: read topography from the grid file
 l_emiss          = .FALSE.
/
&initicon_nml
 init_mode        = 2           ! 2: initialize from IFS analysis
/
&dynamics_nml
 iequations       = 3           ! 3: ICONAM dynamics
/
&nonhydrostatic_nml
 iadv_rcf         = 5           ! dt_adv/dtime
 damp_height      = 50000.      ! [m]
 rayleigh_coeff   = 0.10
 vwind_offctr     = 0.2
 divdamp_fac      = 0.004
/
&interpol_nml
 rbf_scale_mode_ll = 1
/
&sleve_nml
 min_lay_thckn    = 20.         ! [m]
 top_height       = 75000.      ! [m]
 stretch_fac      = 0.9
 decay_scale_1    = 4000.       ! [m]
 decay_scale_2    = 2500.       ! [m]
 decay_exp        = 1.2
 flat_height      = 16000.      ! [m]
/
&diffusion_nml
/
&transport_nml
 ctracer_list     = 'vwi'       ! water vapour, cloud water, cloud ice
 ivadv_tracer     = 3,3,3
 itype_hlimit     = 3,4,4
 ihadv_tracer     = 52,2,2
/
&echam_phy_nml
 lrad             = .TRUE.
 dt_rad           =  3600.      ! [s] radiation time step
 lvdiff           = .TRUE.
 lconv            = .TRUE.
 lcond            = .TRUE.
 lgw_hines        = .TRUE.
 lssodrag         = .TRUE.
 lmlo             = .FALSE.
 lice             = .FALSE.
 lmeltpond        = .FALSE.
 llandsurf        = .FALSE.
 ljsbach          = .TRUE.
 lhd              = .FALSE.
 lebudget         = .TRUE.
 lamip            = .TRUE.
/
&radiation_nml
 irad_h2o         = 1           ! prognostic vapor, liquid and ice
 irad_co2         = 2           ! constant co2 vmr
 irad_ch4         = 0           ! switch off ch4
 irad_n2o         = 0           ! switch off n2o
 irad_o3          = 8           ! 8: ozone for AMIP experiment
 irad_o2          = 0           ! switch off o2
 irad_cfc11       = 0           ! switch off cfc11
 irad_cfc12       = 0           ! switch off cfc12
 irad_aero        = 0           ! switch off aerosols
 ighg             = 1           ! select CMIP5 standard greenhouse gas scenario (as in ECHAM6 AMIP) 
 izenith          = 4           ! seasonal and diurnal cycle
 isolrad          = 1           ! transient solar irradiance (at 1 AE)
/
&echam_conv_nml
/
&gw_hines_nml
/
EOF

# land surface and soil
# ---------------------
cat > ${lnd_namelist} <<EOF
&jsb_model_nml
  usecase         = 'jsbach_lite'
/
&jsb_srf_nml
  bc_filename     = 'bc_land_phys.nc'
  bc_sso_filename = 'bc_land_sso.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_soil_nml
  active          = .TRUE.
  nsoil_energy    = 5
  nsoil_water     = 5
  bc_filename     = 'bc_land_soil.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_veg_nml
  active          = .TRUE.
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
EOF

#--------------------------------------------------------------------------------------------------

# (4) Define the input

# model files
#
add_required_file ${basedir}/data/rrtmg_lw.nc           ./
add_required_file ${basedir}/data/ECHAM6_CldOptProps.nc ./

# namelist files
#
add_required_file ${thisdir}/${atmo_namelist} ./
add_required_file ${thisdir}/${lnd_namelist}  ./

# initial conditions
#
INDATA=/pool/data/ICON/input/r0001
#
# - atmosphere: ECMWF analysis, 1979-01-01T00:00:00Z
add_required_file $INDATA/../../setup/prepiconR2B04_DOM01_ERA_INT_AMIP.nc    ./ifs2icon_R2B04_DOM01.nc
#
# - land: source?, date+time?
add_required_file $INDATA/r2b4_amip/lnd/ic_land_soil.nc                      ./

# boundary conditions
#
# - well mixed greenhouse gases
add_required_file $INDATA/global/atm/bc_greenhouse_rcp45_1765-2500.nc        ./bc_greenhouse_gases.nc
#
# - ozone
year=1978
while [[ $year -le 1983 ]]
do
  ozone_file=bc_ozone_cmip5_${year}.nc
  add_required_file $INDATA/r2b4_amip/atm/bc_ozone_cmip5/${ozone_file}       ./ozone${year}.nc
 (( year = year+1 ))
done
#
# - tropospheric aerosol
##year=1978
##while [[ $year -le 1980 ]]
##do
##  add_required_file $INDATA/r2b4_amip/atm/bc_aeropt_kinne/bc_..._${year}.nc  ./...${year}.nc
## (( year = year+1 ))
##done
#
# - stratospheric aerosol
##year=1978
##while [[ $year -le 1980 ]]
##do
##  add_required_file $INDATA/r2b4_amip/atm/bc_.../bc_..._${year}.nc         ./...${year}.nc
## (( year = year+1 ))
##done
#
# - sst and sic
add_required_file $INDATA/r2b4_amip/oce/bc_sic_pcmdi_1870-2010.nc            ./bc_sic.nc
add_required_file $INDATA/r2b4_amip/oce/bc_sst_pcmdi_1870-2010.nc            ./bc_sst.nc
#
# - ssi and tsi
add_required_file $INDATA/global/sun/bc_solar_irradiance_14band_1849-2399.nc ./bc_ssi.nc
#
# - land parameters
add_required_file $INDATA/r2b4_amip/lnd/bc_land_frac.nc                      ./
add_required_file $INDATA/r2b4_amip/lnd/bc_land_phys.nc                      ./
add_required_file $INDATA/r2b4_amip/lnd/bc_land_soil.nc                      ./
add_required_file $INDATA/r2b4_amip/lnd/bc_land_sso.nc                       ./


# dictionary for variable names
# -----------------------------
dict_file="dict.${EXPNAME}"
add_required_file ${basedir}/run/${dict_file}                                ./

#--------------------------------------------------------------------------------------------------

# (5) Define the output

# Parameters for all output files
# -------------------------------
cat >> ${atmo_namelist} << EOF
&io_nml
 dt_checkpoint    = ${dt_checkpoint}  ! [s] restart file interval
 output_nml_dict  = "${dict_file}"
 netcdf_dict      = "${dict_file}"
 itype_pres_msl   = 4
 lzaxis_reference = .FALSE. 
/
EOF

# Define grids for horizontal remapping
# -------------------------------------
#
# The ICON RmBn grid has 3*m*2**n rows of triangles between the vertices at the N and S pole.
# The number of triangles in a row around this axis increases linearly from 5 to 5*(1+2*(i-1))
# at the base of the "polar" icosahedral triangles. In the "tropical" icosahedral triangles
# all rows have a  5*(2*(m*2**n)) triangles. The triangles are either northward or southward
# pointing. Thus the smallest periodic element in a tropical row is a rhombus formed by two
# adjacent triangles. A tropical row has 5*(m*n**2) rhombi.
#
# The R2B4 grid has a total of 20480 triangular cells in 96 rows.
# The tropical rows have 320 triangles or 160 rhombi.
#
# Therefore the following regular lon-lat grids are of interest for remapping:
#
# regular  grid: nlat=96, nlon=192, npts=18432, dlat=1.875 deg, dlon=1.875 deg
reg_lat_def_reg=-89.0625,1.875,89.0625
reg_lon_def_reg=0.,1.875,358.125
#
# rhombus  grid: nlat=96, nlon=160, npts=15360, dlat=1.875 deg, dlon=2.250 deg
reg_lat_def_rmb=$reg_lat_def_reg
reg_lon_def_rmb=0.,2.25,357.75
#
# triangle grid: nlat=96, nlon=320, npts=30720, dlat=1.875 deg, dlon=1.125 deg
reg_lat_def_tri=$reg_lat_def_reg
reg_lon_def_tri=0.,1.125,358.875


# Define grids for vertical remapping
# -----------------------------------
#
cat >> ${atmo_namelist} << EOF
&nh_pzlev_nml
 nplev            = 25          ! number of pressure levels (plevels in [Pa] and top-down)
 plevels          = 100,200,300,500,700,1000,2000,3000,5000,7000,10000,15000,20000,25000,
                    30000,40000,50000,60000,70000,80000,85000,90000,92500,95000,100000
 nzlev            = 25          ! number of height levels (zlevels in [m] and top-down)
 zlevels          = 50000,45000,40000,35000,30000,25000,20000,18000,16000,14000,12000,
                    10000,8000,6000,5000,4000,3000,2000,1000,800,600,400,200,100,10
 nilev            = 14          ! number of isentropic levels (ilevels in [K] and top-down)
 ilevels          = 320, 360, 400, 440, 480, 520, 560, 600, 700, 800, 900, 1000, 1100, 1200
/
EOF


# Define output files
# -------------------
#
# remapping to be used
remap=1                         # 0=no, 1=yes
if [[ $remap == 1 ]]; then
   remapflag="_rmb"
else
   remapflag=""
fi
reg_lat_def=$reg_lat_def_rmb
reg_lon_def=$reg_lon_def_rmb

# output_<xyz>=yes : output file, no file for any other value

output_atm_dyn=yes
#
if [[ "$output_atm_dyn" == "yes" ]]; then
  if [[ "$dict_iconam_mpim" != "yes" ]]; then
    cat dict.iconam.mpim >> ${dict_file}
    dict_iconam_mpim="yes"
  fi
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_dyn${remapflag}"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 remap            = ${remap}
 reg_def_mode     = 1
 reg_lat_def      = ${reg_lat_def}
 reg_lon_def      = ${reg_lon_def}
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT10M"                          ! ISO-format interval
 file_interval    = "${file_interval}"               ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'ta','ua','va','hus','clw','cli','rho','dpres_mc','z_mc','pfull','ps','psl'
 pl_varlist       = 'ta','ua','va','hus','clw','cli'
 hl_varlist       = 'ta','ua','va','hus','clw','cli'
/
EOF
fi

output_atm_phy=yes
#
if [[ "$output_atm_phy" == "yes" ]]; then
  if [[ "$dict_echam_mpim" != "yes" ]]; then
    cat dict.echam.mpim >> ${dict_file}
    dict_echam_mpim="yes"
  fi
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_phy${remapflag}"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 remap            = ${remap}
 reg_def_mode     = 1
 reg_lat_def      = ${reg_lat_def}
 reg_lon_def      = ${reg_lon_def}
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT10M"                          ! ISO-format interval
 file_interval    = "${file_interval}"               ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'cosmu0'  , 'rsdt'    ,
                    'rsns'    , 'rlns'    , 'rsnt'    , 'rlnt'    ,
                    'rsns_wtr', 'rsns_ice', 'rsns_lnd',
                    'rlns_wtr', 'rlns_ice', 'rlns_lnd',
                    'ts_wtr'  , 'ts_ice'  , 'ts_lnd'  , 'ts'      ,
                    'sic'     , 'sit'     , 'alb'     ,
                    'clt'     ,
                    'prlr'    , 'prls'    , 'prcr'    , 'prcs'    ,
                    'pr'      , 'prw'     , 'cllvi'   , 'clivi'   ,
                    'hfls'    , 'hfss'    , 'evspsbl' ,
                    'hfls_wtr', 'hfls_ice', 'hfls_lnd',
                    'hfss_wtr', 'hfss_ice', 'hfss_lnd',
                    'tauu'    , 'tauv'    ,
                    'tauu_wtr', 'tauu_ice', 'tauu_lnd',
                    'tauv_wtr', 'tauv_ice', 'tauv_lnd',
                    'tauu_sso', 'tauv_sso', 'diss_sso', 
                    'sh_vdiff', 'qv_vdiff', 'ch_concloud',
                    'con_dtrl', 'con_dtri', 'con_iteqv',
                    'prm_rintop', 'prm_rtype', 'prm_topmax'
/
EOF
fi

output_atm_phy_tend_temp=yes
#
if [[ "$output_atm_phy_tend_temp" == "yes" ]]; then
  if [[ "$dict_echam_mpim" != "yes" ]]; then
    cat dict.echam.mpim >> ${dict_file}
    dict_echam_mpim="yes"
  fi
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_phy_tend_temp${remapflag}"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 remap            = ${remap}
 reg_def_mode     = 1
 reg_lat_def      = ${reg_lat_def}
 reg_lon_def      = ${reg_lon_def}
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT10M"                          ! ISO-format interval
 file_interval    = "${file_interval}"               ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'tend_temp', 'tend_temp_radlw', 'tend_temp_radsw', 'tend_temp_cld'
                    'tend_temp_cnv', 'tend_temp_vdf', 'tend_temp_gwh', 'tend_temp_sso'
/
EOF
fi

output_atm_phy_tend_wind=yes
#
if [[ "$output_atm_phy_tend_wind" == "yes" ]]; then
  if [[ "$dict_echam_mpim" != "yes" ]]; then
    cat dict.echam.mpim >> ${dict_file}
    dict_echam_mpim="yes"
  fi
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_phy_tend_wind${remapflag}"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 remap            = ${remap}
 reg_def_mode     = 1
 reg_lon_def      = ${reg_lon_def}
 reg_lat_def      = ${reg_lat_def}
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT10M"                          ! ISO-format interval
 file_interval    = "${file_interval}"               ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'tend_u', 'tend_u_cnv', 'tend_u_vdf', 'tend_u_gwh', 'tend_u_sso'
                    'tend_v', 'tend_v_cnv', 'tend_v_vdf', 'tend_v_gwh', 'tend_v_sso'
/
EOF
fi

output_atm_phy_tend_trac=yes
#
if [[ "$output_atm_phy_tend_trac" == "yes" ]]; then
  if [[ "$dict_echam_mpim" != "yes" ]]; then
    cat dict.echam.mpim >> ${dict_file}
    dict_echam_mpim="yes"
  fi
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_phy_tend_trac${remapflag}"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 remap            = ${remap}
 reg_def_mode     = 1
 reg_lat_def      = ${reg_lat_def}
 reg_lon_def      = ${reg_lon_def}
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT10M"                          ! ISO-format interval
 file_interval    = "${file_interval}"               ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'tend_qv', 'tend_qv_cld', 'tend_qv_cnv', 'tend_qv_vdf'
/
EOF
fi

output_lnd_phy=yes
#
if [[ "$output_lnd_phy" == "yes" ]]; then
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_phy${remapflag}"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 remap            = ${remap}
 reg_def_mode     = 1
 reg_lat_def      = ${reg_lat_def}
 reg_lon_def      = ${reg_lon_def}
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT10M"                          ! ISO-format interval
 file_interval    = "${file_interval}"               ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'fract', 'alb_vis_srf', 'alb_nir_srf', 't_srf', 'lai', 's_srf', 'qsat_srf'
                    'canopy_cond', 'ws_l', 'ws_fc_l', 'ws_pwp_l', 'ws_sat_l', 'ws'
                    'water_stress', 'ws_root', 'ws_fc_root', 'ws_pwp_root'
                    'albedo_srf', 't_air', 'q_air', 'lwrad_srf_down'
                    'swrad_srf_down', 'root_depth', 'root_depth_l', 'soil_depth', 'soil_depth_l'
                    'evapotrans', 'sensible_hflx', 'latent_hflx' 
                    'fact_qsat_srf', 'fact_qsat_trans_srf', 'fact_q_air', 'fract_fpc_max', 'fract_fpc'
                    't_srf_unfilt', 't_srf_unfilt_old', 't_srf_old'
                    't_soil', 'wsn_srf', 'wsr_srf', 't_rad_srf', 'grnd_hflx'
                    'sfract_srf', 'wfract_srf', 'sfract_soil', 'sfract_can', 'wfract_can', 'wfract_soil'
                    'rel_hum_srf', 'tte_corr', 'rough_m_srf', 'rough_h_srf'
/
EOF
fi

#--------------------------------------------------------------------------------------------------

#! /bin/ksh
#-----------------------------------------------------------------------------
#
# Luis Kornblueh,  MPI-M, 2008-04
# Marco Giorgetta, MPI-M, 2009-01-24
# Hui Wan,         MPI-M, 2009-05
# Guenther Zaengl, DWD,   2009-05
# Pilar,           DWD,   2009-06
#
# This script first creates the ICON graphs with root division 2 
# and up to level 6, then generates grids using two different optimization
# algorithms:
#  - Heikes-Randall (1998)
#  - spring dynamics with beta (i.e., the spring coefficient) = 0.9
# In addition, the patch generator is called to generate the nested domain
# configuration needed for the MRW case of this test suite.
#
# MODIFIED to generate grid and patch files for the SWM + ref test
# The graphs files have been previously generated
#-----------------------------------------------------------------------------
# blizzard@DKRZ
#
# @ shell = /client/bin/ksh
# @ job_type = serial
# @ job_name = ico_grd_R2B6
# @ output = $(job_name).o$(jobid)
# @ error = $(job_name).o$(jobid)
# @ notification = never
# @ resources = ConsumableCpus(1) ConsumableMemory(1000mb)
# @ wall_clock_limit = 01:00:00
# @ queue
#
#-----------------------------------------------------------------------------
# tornado@DKRZ
#
#$ -S /bin/bash
#$ -N ico_grd_R2B6 
#$ -o ico_grd_R2B6.$JOB_ID.o
#$ -j y
#$ -cwd
#$ -q serial
#
#-----------------------------------------------------------------------------
# hpc@DWD
#
#PBS -q lang
#PBS -j oe
#PBS -l select=1:ncpus=1
#PBS -m n
#
#-----------------------------------------------------------------------------
## NEC@DWD
#
##PBS -q normal@sx9esiox0
##PBS -j o
##PBS -l cpunum_job=1
##PBS -l elapstim_req=86400
##PBS -m n
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
#
# for PBS change to directory where job was submitted
# (without this job is started in HOME)
if [[ -n ${PBS_O_WORKDIR} ]] ; then
  cd ${PBS_O_WORKDIR}
fi
#
#-----------------------------------------------------------------------------
#
# determine base directory
dir=$(pwd -P)
basedir=${dir%/*}
#
# determine architecture
arch=$(${basedir}/config/config.guess)
#--------------------------------------------------------
# for $arch at DWD uncomment the corresponding line
#--------------------------------------------------------
# hpc:
arch=${arch}-noomp-hpc
#arch=${arch}-hpc
# nec:
#arch=sx6-nec-superux-sx9omp
#
#-----------------------------------------------------------------------------
#
# absolute paths of directories
GRIDDIR=${basedir}/grids            # graphs, grids and patches
BINDIR=${basedir}/build/${arch}/bin # binaries
#
# work directory
WRKDIR=$GRIDDIR
#-----------------------------------------------------------------------------
#
# the work directory will be created, if not already there
if [ ! -d $WRKDIR ]; then
    mkdir -p $WRKDIR
fi
#
cd $WRKDIR
#
#-----------------------------------------------------------------------------
#
# First generate graphs
#---------------------------------------
#R=2    # nroot
#B=6    # highest grid level to reach
#
#cat > NAMELIST_GRAPH << EOF
#&graph_ini 
#  nroot       = ${R}
#  grid_levels = ${B}
#/
#EOF
#
#${BINDIR}/graph_generator
#
#-----------------------------------------------------------------------------
# Then generate grids using the Heikes-Randall optimization
#
#cat > NAMELIST_GRID << EOF
#&grid_ini
#  nroot       = ${R}
#  grid_levels = ${B}
#/
#&grid_options
#  itype_optimize = 1     ! 1 = Heikes-Randall, 4 = spring dynamics
#/
#EOF
#
#${BINDIR}/grid_generator
#
#-----------------------------------------------------------------------------
# Generate grids for the test case with mesh refinement
# (using spring optimization) 
#
# We have to define the grid level of global model domain 
# already now, because it determines the highest grid level
# to which the spring optimization will be applied.
#
R=2
gd_list=" 4 5 6"
#STARTLEV=3     # grid level of global model domain
NDOM=2               # number of model domains

for STARTLEV in ${gd_list}
do

B=`expr $STARTLEV \+ $NDOM \- 1`
echo $STARTLEV $B
M=${STARTLEV}
BETA_S=0.95
#
# Namelist for grid generator
#
cat > NAMELIST_GRID << EOF
&grid_ini
  nroot       = ${R}
  grid_levels = ${B}
/
&grid_options
  itype_optimize = 4           ! 1 = Heikes-Randall, 4 = spring dynamics
  maxlev_optim   = ${STARTLEV} ! grid optimization stops at start_lev (needed for grid refinement to work)
  beta_spring    = ${BETA_S}         ! spring coefficient
/
EOF
#
${BINDIR}/grid_generator
#
#-----------------------------------------------------------------------------
#
# Now use patch generator to generate refined (nested) model domains
#
OPTFIX=spr${BETA_S}_M${M} # Suffix of grid generator output to be used for patch generation
                     # change to 'hro' to use Heikes-Randall-optimized grid
#NDOM=2               # number of model domains
#
# if optimization suffix is given, create symbolic links to grid files
if [ -n $OPTFIX ] ; then
   for gridfile in `ls -1 icon*grid_${OPTFIX}.nc`; do
      slname=${gridfile%_${OPTFIX}.nc}.nc
#      if [ ! -a  ${slname} ] ; then
         ln -sf ${gridfile} ${slname}
#      fi
   done
fi
#
#
# ICON patch generator namelist
#
cat > NAMELIST_PATCH << EOF
&hierarchy_ini 
  grid_root = ${R}
  start_lev = ${STARTLEV}
  depth     = ${NDOM}
  hier_case = 'zoom'
/
&patch_shape_ini1 
  lcirc             = .true.
  patch_radius1     =  30.
  patch_center_lon1 =  90.
  patch_center_lat1 =  30. 
  patch_hwidth_lon1 =  17.5
  patch_hwidth_lat1 =  19.
  patch_bdywidth    =  20.
/
EOF
#
${BINDIR}/patch_generator
BIS=$STARTLEV

while [ $BIS -le  $B ] 
do
 echo "rename" $BIS $B
 mv iconR${R}B0${BIS}_zoom.nc iconR${R}B0${BIS}_zoom_ST${STARTLEV}_REF${BIS}.nc
 BIS=`expr $BIS \+ 1`
done


done  

#
#
#-----------------------------------------------------------------------------
exit
#-----------------------------------------------------------------------------

#!/bin/bash
#
# The script is currently set up to automatically do a restart starting on 1980-01-01 00:00 using
# a restart file from /pool (see below) in order to start with a realistic topography.
#
#__________________________________________________________________________________________________
# SLURM destructs $0!
# +++ For automatic restarts to work, it is important to specify the actual run script here!!! ++++
job_name=exp.r2b4_amip_thunder.run
#
#__________________________________________________________________________________________________
# thunder batch job parameters
#
#SBATCH --job-name=exp.r2b4_amip_thunder.run
#SBATCH --output=LOG.exp.r2b4_amip_thunder.run.%j.out
#SBATCH --error=LOG.exp.r2b4_amip_thunder.run.%j.out
#SBATCH --partition=mpi-compute
#SBATCH --nodes=4
#SBATCH --ntasks-per-node=16
#__________________________________________________________________________________________________
#
# ICON AMIP run script.
#
# Authors:
#          Monika Esch, MPIM, March 2013 
#          Luis Kornblueh, MPIM, March 2013
#          Marco Giorgetta, MPIM, April 2013
#          Reiner Schnur, MPIM, April 2013  
# 
#__________________________________________________________________________________________________
# Restart status
#
restart=${restart:=".false."}
#
#AUTOMATIC_RESTART_SETUP:
restart=.true.
#END AUTOMATIC_RESTART_SETUP
restart_from_folder=/pool/data/ICON/restart/r0001/r2b4_amip/atm
restart_atmo_from=restart.r2b4_amip_19790101T000000Z_atm.nc
#__________________________________________________________________________________________________
# set error checking
set -eu
#__________________________________________________________________________________________________
# function definitions

if [[ ${ENVIRONMENT:-} = BATCH ]]
then 
    redln() { echo "${1}"; }
    blueln() { echo "${1}"; }
    greenln() { echo "${1}"; }
else
    red=$(tput setaf 1) 
    green=$(tput setaf 2)
    blue=$(tput setaf 4) 
    bgcolor=$(tput sgr0)
    redln() { echo "${red}${1}${bgcolor}"; }
    blueln() { echo "${blue}${1}${bgcolor}"; }
    greenln() { echo "${green}${1}${bgcolor}"; }
fi

os() { echo $(uname -s); }
fqdn() { echo $(perl -l -mNet::Domain -e 'print Net::Domain::hostfqdn()'); }

# Argument:
#   $1 = ICON base directory
system() { echo $(${1}/config/config.guess); }

# Arguments:
#   $1 = error status: 0 = OK, not 0 = ERROR
#   $2 = error message
check_error()
{
    if [[ "${STATUS_FILE:-}" = "" ]]
    then
      STATUS_FILE=${basedir}/.status.file
    fi
    echo "$1" > ${STATUS_FILE}
    echo "$1" > ${basedir}/run/${job_name}.status
    if [[ $1 != 0 ]] 
    then
        redln "check_error() : $2"
        exit $1
    fi
}

# Arguments:
#   $1 = warning level: 0 = OK, not 0 = ERROR
#   $2 = warning message
warning()
{
    if [ $1 != 0 ]
    then
        blueln "warning() : $2"
    fi
}
printenv | sort
#__________________________________________________________________________________________________
# 
case $(id -u) in
    1402)
	user="Monika"
	;;
    1417)
	user="Marco"
	;;
    1489)
	user="Luis"
	;;
    1836)
	user="Sebastian"
	;;
    1205)
	user="Reiner"
	;;
    1270)
        user="Thomas"
        ;;
    20736)
	user="Thorsten"
	;;
    *)
	user="Unknown"
	echo "Please, adapt the necessary setups ..."
	exit -1
	;;
esac

case $user in
    Luis)
	case $(hostname) in
	    thunder*|ctc*)
		basedir=/scratch/mpi/mh0033/m214089/Projects/icon-dev
		;;
	    wanglung*)
		basedir=/home/zmaw/m214089/Projects/eclipse/icon/icon
		;;
	esac
	;;
    Monika)
	basedir=/scratch/mpi/mh0287/users/m214002/icon-dev
	;;
    Marco)
	basedir=/scratch/mpi/mh0287/users/m214017/svn/icon/trunk/icon-dev
	;;
    Sebastian)
	basedir=""
	redln "Add the base directory of ICON here ..."
	exit 1
	;;
    Reiner)
	case $(hostname) in
	    thunder*|ctc*)
		basedir=/scratch/mpi/mj0060/m212005/icon-dev
		;;
	    ulme*)
		basedir=/scratch/local1/m212005/git/icon
		;;
	esac
	;;
    Thomas)
        case $(hostname) in
            thunder*|ctc*)
                basedir=/scratch/mpi/mj0060/m212070/icon-dev
                ;;
            ginkgo*)
                basedir=/scratch/local1/m212070/icon-dev
                ;;
        esac
        ;;
    Thorsten)
	basedir=/scratch/mpi/mh0730/m300057/icon-dev
	;;
esac

blueln "__________________________________________________________________________________________"
blueln "ICON base directory: $basedir" 
blueln "User: $user"

#__________________________________________________________________________________________________
# target parameters

site=$(fqdn); site=${site#*.*.};
target=$(fqdn); target=${target%%.*}

#__________________________________________________________________________________________________
# runtime options (nproma, MPI, OpenMP)

if [[ ${ENVIRONMENT:-} = BATCH ]]
then
    greenln "Run in batch mode"
    greenln "Submit directory: $SLURM_SUBMIT_DIR"
    greenln "Nodelist: $SLURM_NODELIST"
    submit=sbatch
else
    greenln "Run interactively"
    submit="/bin/bash"
fi

nproma=32
greenln "   nproma = $nproma"

export OMP_NUM_THREADS=1
export ICON_THREADS=1
export OMP_SCHEDULE=dynamic,1
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=32M
greenln "   OpenMP setup: OMP_NUM_THREADS = $OMP_NUM_THREADS"
greenln "                 OMP_SCHEDULE = $OMP_SCHEDULE" 
greenln "                 OMP_STACKSIZE = OMP_STACKSIZE"

case $user in
    Luis)
	case $(hostname) in
	    thunder*|ctc*)
		mpi_root=/sw/squeeze-x64/mpi/openmpi_ib-1.6.4-static-intel13
		mpiexec_cmd="mpiexec"
		mpiexec_options="--mca btl self,sm,openib --bind-to-core --bycore"
		;;
	    wanglung*)
		mpi_root=/opt/local
		mpiexec_cmd="openmpiexec" 
                mpiexec_options=""
		;;
	esac

	;;
    Monika|Marco|Thorsten|Thomas)
	mpi_root=/sw/squeeze-x64/mpi/openmpi_ib-1.6.2-static-gcc46
	mpiexec_cmd="mpiexec" 
	mpiexec_options="--mca btl self,sm,openib --bind-to-core --bycore"
	;;
    Reiner)
        mpi_root=/sw/squeeze-x64/mpi/openmpi_ib-1.6.4-static-intel13
        mpiexec_cmd="mpiexec"
        mpiexec_options="--mca btl self,sm,openib --bind-to-core --bycore"
        ;;
    Sebastian)
	mpi_root=""
	mpiexec_cmd=""
        mpiexec_options=""
	redln "Add mpi_root directory here ..."
	redln "Add mpiexec cmd here ..."
	exit 1
	;;
esac
 
case $(hostname) in
    wanglung*|thunder*)
        no_of_nodes=1
        mpi_procs_pernode=8
        ;;
    ctc*)
        no_of_nodes=$SLURM_NNODES
        mpi_procs_pernode=$SLURM_NTASKS_PER_NODE
        ;;    
    *)
        no_of_nodes=1
        mpi_procs_pernode=2
        ;;
esac
(( mpi_total_procs = no_of_nodes * mpi_procs_pernode ))

greenln "   MPI setup:"
greenln "                 MPI root  = $mpi_root"
greenln "                 MPI exec  = $mpiexec_cmd"
greenln "                 MPI tasks = $mpi_total_procs" 

#__________________________________________________________________________________________________
# experiment directory, with plenty of space, create if new

# ICON experiment name and runtime directory

EXPNAME=r2b4_amip

EXPDIR=$basedir/experiments/$EXPNAME

blueln "Experiment name     : $EXPNAME"
blueln "Experiment directory: $EXPDIR"

if [[ ! -d $EXPDIR ]] ;  then
  mkdir -p $EXPDIR
  check_error $? "$LINENO: $EXPDIR could not be created ..."
fi

cd $EXPDIR

#__________________________________________________________________________________________________
# define the experiment: set variables for ICON namelist

# horizontal grid(s)
grids_folder=/pool/data/ICON/grids/private/r2b4_amip
atmo_dyn_grids='r2b4_amip.nc'

blueln "Grid directory: $grids_folder"
blueln "Grid file     : $atmo_dyn_grids"

# vertical grid
nlev=47

# define model timing
#
second=1                                 # [s] 1 second
minute=60                                # [s] 1 minute
hour=3600                                # [s] 1 hour
day=86400                                # [s] 1 day
#
# RS 2013-05-30: If using the restart file from /pool for 1979-01-01, leave the 
# start_date at 1978-01-01.
start_date="1978-01-01T00:00:00Z"        # start and end date
  end_date="1980-01-01T00:00:00Z"        # of the experiment
#
(( dt_restart      = 30 * day         )) # [s] time between restarts = length of run
(( dt_checkpoint   =  1 * day         )) # [s] time between additional restart file writing
#
# atm_dyn output
(( dt_file_atm_dyn =  1 * day         )) # [s] data file interval
(( dt_data_atm_dyn =  1 * day         )) # [s] data output interval
(( steps_per_file_atm_dyn = dt_file_atm_dyn / dt_data_atm_dyn ))
#
# atm_phy output
(( dt_file_atm_phy =  1 * day        )) # [s] data file interval
(( dt_data_atm_phy =  1 * hour       )) # [s] data output interval
(( steps_per_file_atm_phy = dt_file_atm_phy / dt_data_atm_phy ))
#
# lnd_phy output
(( dt_file_lnd_phy =  1 * day        )) # [s] data file interval
(( dt_data_lnd_phy =  1 * hour       )) # [s] data output interval
(( steps_per_file_lnd_phy = dt_file_lnd_phy / dt_data_lnd_phy ))

# define model configuration
#
atmo_model_equations=1                   # 1 = hydrost. atm., 2 = non-hydrost. atm.
#
(( dt_dyn         =  5 * minute       )) # [s] dynamics time step
(( dt_rad         =  1 * hour         )) # [s] radiation time step

# define variable names
#
dict_file='dict.r2b4_amip__cmor'
#
#__________________________________________________________________________________________________
# define the experiment: write ICON namelist parameters

atm_namelist=NAMELIST_${EXPNAME}_atm
lnd_namelist=NAMELIST_${EXPNAME}_lnd

cat > ${atm_namelist} << EOF
!
&parallel_nml
 nproma         = ${nproma}
/
&grid_nml
 dynamics_grid_filename = "${atmo_dyn_grids}",
/
&run_nml
 num_lev          = ${nlev},     ! number of full levels of vertical grid
 output           = 'nml'
 dtime            = ${dt_dyn}    ! [s] dynamics time step
 ltestcase        = .TRUE.       ! run testcase                 --> testcase_nml
 ldynamics        = .TRUE.       ! dynamics                     --> dynamics_nml, diffusion_nml
 ltransport       = .TRUE.       ! switch on tracer transport   --> transport_nml
 ntracer          = 5            ! number of tracers
 iforcing         = 2            ! ECHAM physics                --> echam_phy_nml
 msg_level        = 10           ! detailed report during integration 
/
&ha_testcase_nml
 ctest_name       = 'AMIP'       ! test case identifier
 lrh_linear_pres  = .TRUE.       ! initial RH is a linear function of pressure
 rh_at_1000hpa    = 0.30         ! [] initial rel. humidity at 1000 hPa 
/
&dynamics_nml
 iequations       = ${atmo_model_equations}    ! 1: hydrost. atmosphere
/
&ha_dyn_nml
 ldry_dycore      = .FALSE.      ! moist dynamical core
/
&diffusion_nml
 hdiff_order      = 24           ! 2nd order near model top, 4th order on the other levels
 k2_klev_max      = 8            ! the 3 highest model levels use 2nd order diffusion
/
&transport_nml
 ctracer_list     = 'vwi45'      ! water vapour, cloud water, cloud ice, constant field, dummy for ozone
/
&echam_phy_nml
 lrad             = .TRUE.
 lvdiff           = .TRUE.
 lconv            = .TRUE.
 lcond            = .TRUE.
 lgw_hines        = .TRUE.
 lssodrag         = .TRUE.
 ljsbach          = .TRUE.
 dt_rad           = ${dt_rad}    ! [s] radiation time step
/
&radiation_nml
 irad_h2o         = 1            ! prognostic vapor, liquid and ice
 irad_co2         = 2            ! constant co2 vmr
 irad_ch4         = 0            ! switch off ch4
 irad_n2o         = 0            ! switch off n2o
 irad_o3          = 8            ! ozone for AMIP experiment
 irad_o2          = 0            ! switch off o2
 irad_cfc11       = 0            ! switch off cfc11
 irad_cfc12       = 0            ! switch off cfc12
 irad_aero        = 0            ! switch off aerosols
 ighg             = 1            ! select CMIP5 standard greenhouse gas scenario (as in ECHAM6 AMIP) 
 izenith          = 4            ! seasonal and diurnal cycle
/
&echam_conv_nml
/
&gw_hines_nml
/
&io_nml
dt_checkpoint     = ${dt_checkpoint} ! [s] trigger new restart file
 output_nml_dict  = '${dict_file}'
 netcdf_dict      = '${dict_file}'
/
&output_nml
 output_bounds    = ${dt_data_atm_dyn},${dt_restart},${dt_data_atm_dyn}   ! start, end, increment
 steps_per_file   = ${steps_per_file_atm_dyn}
 include_last     = .FALSE.
 output_filename  = "${EXPNAME}_atm_dyn"
 ml_varlist       = 'ps'      , 'ta'      ,
                    'hus'     , 'clw'     , 'cli'     ,
                    'ua'      , 'va'      , 'wap'     ,
                    'pfull'   , 'gpfull'
/
&output_nml
 output_bounds    = ${dt_data_atm_phy},${dt_restart},${dt_data_atm_phy}   ! start, end, increment
 steps_per_file   = ${steps_per_file_atm_phy}
 include_last     = .FALSE.
 output_filename  = "${EXPNAME}_atm_phy"
 ml_varlist       = 'cosmu0'  , 'rsdt'    ,
                    'rsns'    , 'rlns'    , 'rsnt'    , 'rlnt'    ,
                    'ts_wtr'  , 'ts_ice'  , 'ts_lnd'  , 'ts'      ,
                    'sic'     , 'sit'     , 'alb'     ,
                    'clt'     ,
                    'prlr'    , 'prls'    , 'prcr'    , 'prcs'    ,
                    'pr'      , 'prw'     , 'cllvi'   , 'clivi'   ,
                    'hfls'    , 'hfss'    , 
                    'tauu'    , 'tauv'    ,
                    'tauu_sso', 'tauv_sso', 'diss_sso'
/
&output_nml
 output_bounds    = ${dt_data_lnd_phy},${dt_restart},${dt_data_lnd_phy}   ! start, end, increment
 steps_per_file   = ${steps_per_file_lnd_phy}
 include_last     = .FALSE.
 output_filename  = "${EXPNAME}_lnd_phy"
 ml_varlist       = 'fract', 'alb_vis_srf', 'alb_nir_srf', 't_srf', 'lai', 's_srf', 'qsat_srf'
                    'canopy_cond', 'ws_l', 'ws_fc_l', 'ws_pwp_l', 'ws_sat_l', 'ws'
                    'water_stress', 'ws_root', 'ws_fc_root', 'ws_pwp_root'
                    'albedo_srf', 't_air', 'q_air', 'lwrad_srf_down'
                    'swrad_srf_down', 'root_depth', 'root_depth_l', 'soil_depth', 'soil_depth_l'
                    'evapotrans', 'sensible_hflx', 'latent_hflx' 
                    'fact_qsat_srf', 'fact_qsat_trans_srf', 'fact_q_air', 'fract_fpc_max', 'fract_fpc'
                    't_srf_unfilt', 't_srf_unfilt_old', 't_srf_old'
                    't_soil', 'wsn_srf', 'wsr_srf', 't_rad_srf', 'grnd_hflx'
                    'sfract_srf', 'wfract_srf', 'sfract_soil', 'sfract_can', 'wfract_can', 'wfract_soil'
                    'rel_hum_srf', 'tte_corr', 'rough_m_srf', 'rough_h_srf'
/
EOF

cat > ${lnd_namelist} <<EOF
&jsb_model_nml
  usecase         = 'jsbach_lite'
/

&jsb_srf_nml
  bc_filename     = 'bc_land_phys.nc'
  bc_sso_filename = 'bc_land_sso.nc'
  ic_filename     = 'ic_land_soil.nc'
/

&jsb_soil_nml
  active          = .TRUE.
  nsoil_energy    = 5
  nsoil_water     = 5
  bc_filename     = 'bc_land_soil.nc'
  ic_filename     = 'ic_land_soil.nc'
/

&jsb_veg_nml
  active          = .TRUE.
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
EOF

#__________________________________________________________________________________________________
# get horizontal grid files

HGRIDDIR=$grids_folder

all_grids="${atmo_dyn_grids} ${atmo_rad_grids:-}"

for gridfile in ${all_grids}
do
    # check if input file exists
    ls -l ${HGRIDDIR}/$gridfile > /dev/null
    check_error $? "$LINENO: ${HGRIDDIR}/$gridfile does not exist."
    if [[ -e $gridfile ]]
    then
	rm $gridfile
    fi
    ln -s ${HGRIDDIR}/$gridfile $gridfile
done
#
#__________________________________________________________________________________________________
# get vertical grid files

VGRIDDIR=${basedir}/vertical_coord_tables

if [[ $atmo_model_equations = 3 ]]
then
    VGRIDNAME=atm_hyb_sz_${nlev}
    if [[ -e ${VGRIDNAME} ]]
    then
	rm  ${VGRIDNAME}
    fi
    ln -s ${VGRIDDIR}/${VGRIDNAME} ${VGRIDNAME}
    warning $? "ln -s ${VGRIDDIR}/${VGRIDNAME} failed"
else
    VGRIDNAME=atm_hyb_sp_${nlev}
    if [[ -e ${VGRIDNAME} ]]
    then
	rm ${VGRIDNAME}
    fi
    ln -s ${VGRIDDIR}/${VGRIDNAME} ${VGRIDNAME}
    check_error $? "ln -s ${VGRIDDIR}/${VGRIDNAME}"
fi

#__________________________________________________________________________________________________
# copy initial and boundary conditions and ancilliary files

# model constants
# ---------------
cp -f ${basedir}/data/rrtmg_lw.nc                           ./ # LW radiation constants
cp -f ${basedir}/data/ECHAM6_CldOptProps.nc                 ./ # cloud optical properties   


INDATA=/pool/data/ICON/input/r0001

# initial conditions
# ------------------

# - atmosphere
#   t.b.d

# - land
cp -f $INDATA/r2b4_amip/lnd/ic_land_soil.nc                 ./


# boundary conditions
# -------------------

# - well mixed greenhouse gases
cp -f $INDATA/global/atm/bc_greenhouse_rcp45_1765-2500.nc   ./bc_greenhouse_gases.nc

# - ozone
year=1977
while [[ $year -le 2009 ]]
do
 cp -f $INDATA/r2b4_amip/atm/bc_ozone_cmip5/bc_ozone_cmip5_${year}.nc ./ozone${year}.nc
 (( year = year+1 ))
done

# - sst and sic
cp -f $INDATA/r2b4_amip/oce/bc_sic_pcmdi_1870-2010.nc            ./bc_sic.nc
cp -f $INDATA/r2b4_amip/oce/bc_sst_pcmdi_1870-2010.nc            ./bc_sst.nc

# - ssi and tsi
cp -f $INDATA/global/sun/bc_solar_irradiance_14band_1849-2399.nc ./bc_ssi.nc

# - land parameters
cp -f $INDATA/r2b4_amip/lnd/bc_land_frac.nc                      ./
cp -f $INDATA/r2b4_amip/lnd/bc_land_phys.nc                      ./
cp -f $INDATA/r2b4_amip/lnd/bc_land_soil.nc                      ./
cp -f $INDATA/r2b4_amip/lnd/bc_land_sso.nc                       ./

#__________________________________________________________________________________________________
# copy dictionary file for variable names

cp -f ${basedir}/run/${dict_file}                                ./

#__________________________________________________________________________________________________
# copy restart files eventually

# The restart file provided from restart_from_folder/restart_atmo_from is only used if the link
# restart_atm.nc doesn't already exist in the current work directory (usually for a new experiment).
if [[ "x${restart_atmo_from:-}" != "x" ]] && [[ ! -f restart_atm.nc ]]
then
    #rm -f restart_atm.nc
    if [[ "${restart_from_folder}" =~ ^/ ]]; then
      cp ${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
      #cp ${restart_from_folder}/restart.info .
    else
      cp ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
      #cp ${basedir}/experiments/${restart_from_folder}/restart.info .
    fi
    ln -s cp_restart_atm.nc restart_atm.nc
    cat > restart.info <<EOF
gridspec: grid_D01_atm.nc ! here should be the physical filename including path
EOF
    restart=".true."
fi

#__________________________________________________________________________________________________
# create master_namelist

master_namelist=icon_master.namelist
jsbach_master_namelist=jsbach_master.namelist

cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
/
&time_nml
 ini_datetime_string = "$start_date"
 end_datetime_string = "$end_date"
 dt_restart          = $dt_restart
 /
&master_model_nml
  model_name="atmo"
  model_namelist_filename="${atm_namelist}"
  model_restart_info_filename=""
  model_type=1
  model_min_rank=0
  model_max_rank=65535
  model_inc_rank=1
/
EOF

cat > $jsbach_master_namelist << EOF
&jsb_control_nml
 is_standalone      = .false.
 restart_jsbach     = .false.
/

&jsb_model_nml
 model_name = 'JSBACHlite'
 model_shortname = 'lite'
 model_description = 'JSBACH-lite model'
 model_namelist_filename = "${lnd_namelist}"
/
EOF

#__________________________________________________________________________________________________
# get model and run

bindir="${basedir}/build/$(system ${basedir})/bin"   # binaries
MODEL=${bindir}/control_model

ls -l ${MODEL} > /dev/null
check_error $? "$LINENO: ${MODEL} does not exist?"

# start experiment
#
if [[ "$(os)" = "Linux" ]]
then
    ulimit -s unlimited
fi

rm -f finish.status
#
date
$mpi_root/bin/$mpiexec_cmd $mpiexec_options -n $mpi_total_procs ${MODEL}
date
#
if [[ -r finish.status ]] 
then
  check_error 0 "$LINENO: ${MODEL} finished successfull ..."
else
  check_error -1 "$LINENO: ${MODEL} execution failed ..."
fi

finish_status=$(cat finish.status)
finish_status=${finish_status//[[:space:]]/}
greenln $finish_status
greenln "============================"
greenln "Script run successfully: $finish_status"
greenln "============================"

#__________________________________________________________________________________________________
# check if we have to restart (resubmit)

cd $basedir/run

if [[ "${finish_status}" = "RESTART" ]]
then
    greenln "restart next job..."
    if [[ $(grep -c "restart=.true." ${job_name}) -le 1 ]]
    then
        perl -pi -e 's/(^#AUTOMATIC_RESTART_SETUP.*)/\1\nrestart=\.true\./' $job_name
    fi
    ${submit} $job_name
fi


blueln "__________________________________________________________________________________________"
#__________________________________________________________________________________________________
#
exit 0
#__________________________________________________________________________________________________

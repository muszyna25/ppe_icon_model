#!/bin/bash
#__________________________________________________________________________________________________
#
this_script="$(pwd -P)/${0##*/}"
#
job_name=exp.r2b4_amip_thunder.run
#__________________________________________________________________________________________________
# thunder batch job parameters
#
#SBATCH --job-name=exp.r2b4_amip_thunder.run
#SBATCH --output=LOG.exp.r2b4_amip.run.%j.out
#SBATCH --error=LOG.exp.r2b4_amip.run.%j.out
#SBATCH --partition=mpi-compute
#SBATCH --nodes=4
#SBATCH --ntasks-per-node=16
#__________________________________________________________________________________________________
#
# ICON AMIP run script.
#
# Authors:
#          Monika Esch, MPIM, March 2013 
#          Luis Kornblueh, MPIM, March 2013
# 
#__________________________________________________________________________________________________
# Restart status (mode visible!)
#
restart=${restart:=".false."}
#
#AUTOMATIC_RESTART_SETUP:
#END AUTOMATIC_RESTART_SETUP
#__________________________________________________________________________________________________
# set error checking

set -eu

#__________________________________________________________________________________________________
# function definitions

red=$(tput setaf 1) 
green=$(tput setaf 2)
blue=$(tput setaf 4) 

bgcolor=$(tput sgr0)

redln() { echo "${red}${1}${bgcolor}"; }
blueln() { echo "${blue}${1}${bgcolor}"; }
greenln() { echo "${green}${1}${bgcolor}"; }

os() { echo $(uname -s); }
fqdn() { echo $(perl -l -mNet::Domain -e 'print Net::Domain::hostfqdn()'); }

# Argument:
#   $1 = ICON base directory
system() { echo $(${1}/config/config.guess); }

# Arguments:
#   $1 = error status: 0 = OK, not 0 = ERROR
#   $2 = error message
check_error()
{
    if [[ "${STATUS_FILE:-}" = "" ]]
    then
      STATUS_FILE=${basedir}/.status.file
    fi
    
    echo "$1" > ${STATUS_FILE}
    echo "$1" > ${basedir}/run/${job_name}.status

    if [[ $1 != 0 ]] 
    then
    	if [[ ${ENVIRONMENT:-} = BATCH ]]
    	then 
            redln "BATCH_SYSTEM_ERROR: JOB_%HOSTNAME%_%PID%: RC = $2"
	else
            redln "check_error() : $2"
        fi
        exit $1
    fi

}

# Arguments:
#   $1 = warning level: 0 = OK, not 0 = ERROR
#   $2 = warning message
warning()
{
    if [ $1 != 0 ]
    then
        blueln "warning() : $2"
    fi
}

#__________________________________________________________________________________________________
# settings:

redln "___________________________________________________________________________________________"
printenv | sort
redln "___________________________________________________________________________________________"

userid=$(id -u)
case $userid in
    1402)
	user="Monika"
	;;
    1417)
	user="Marco"
	;;
    1489)
	user="Luis"
	;;
    1836)
	user="Sebastian"
	;;
    1205)
	user="Reiner"
	;;
    20736)
	user="Thorsten"
	;;
    *)
	user="Unknown"
	echo "Please, adapt the necessary setups ..."
	exit -1
	;;
esac

# ICON base path:

case $user in
    Luis)
	case $(hostname) in
	    thunder*|ctc*)
		basedir=/scratch/mpi/mh0033/m214089/Projects/icon-dev
		;;
	    wanglung*)
		basedir=/home/zmaw/m214089/Projects/eclipse/icon/icon
		;;
	esac
	;;
    Monika)
	basedir=/scratch/mpi/mh0287/users/m214002/icon-dev
	;;
    Marco)
	basedir=/scratch/mpi/mh0287/users/m214017/svn/icon/trunk/icon-dev
	;;
    Sebastian)
	basedir=""
	redln "Add the base directory of ICON here ..."
	exit 1
	;;
    Reiner)
	case $(hostname) in
	    thunder*|ctc*)
		basedir=/scratch/mpi/mj0060/m212005/icon-dev
		;;
	    ulme*)
		basedir=/scratch/local1/m212005/git/icon
		;;
	esac
	;;
    Thorsten)
	basedir=/scratch/mpi/mh0730/m300057/icon-dev
	;;
esac

blueln "__________________________________________________________________________________________"
blueln "ICON base directory: $basedir" 
blueln "User: $user"

export ICON_BASE_PATH=$basedir

if [[ ${ENVIRONMENT:-} = BATCH ]]
then
    blueln "Running: $SLURM_JOB_NAME"
    blueln "Number of nodes: $SLURM_NNODES"
    blueln "Tasks per node: $SLURM_TASKS_PER_NODE"
fi

#__________________________________________________________________________________________________
# target parameters

site=$(fqdn); site=${site#*.*.};
target=$(fqdn); target=${target%%.*}

#__________________________________________________________________________________________________
# runtime options (nproma, MPI, OpenMP, limits)

if [[ ${ENVIRONMENT:-} = BATCH ]]
then
    greenln "Run in batch mode"
    submit=sbatch
    greenln "Submit directory: $SLURM_SUBMIT_DIR"
    greenln "Nodelist: $SLURM_NODELIST"
else
    greenln "Run interactively"
    submit=""
fi

nproma=32
greenln "   nproma = $nproma"

export OMP_NUM_THREADS=1
export ICON_THREADS=1
export OMP_SCHEDULE=dynamic,1
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=32M
greenln "   OpenMP setup: OMP_NUM_THREADS = $OMP_NUM_THREADS"
greenln "                 OMP_SCHEDULE = $OMP_SCHEDULE" 
greenln "                 OMP_STACKSIZE = OMP_STACKSIZE"

case $user in
    Luis)
	case $(hostname) in
	    thunder*|ctc*)
		mpi_root=/sw/squeeze-x64/mpi/openmpi_ib-1.6.2-static-nag52
		mpiexec_cmd="mpiexec" 
		;;
	    wanglung*)
		mpi_root=/opt/local
		mpiexec_cmd="openmpiexec" 
		;;
	esac

	;;
    Monika|Marco|Thorsten)
	mpi_root=/sw/squeeze-x64/mpi/openmpi_ib-1.6.2-static-gcc46
	mpiexec_cmd="mpiexec" 
	;;
    Sebastian)
	mpi_root=""
	mpiexec_cmd=""
	redln "Add mpi_root directory here ..."
	redln "Add mpiexec cmd here ..."
	exit 1
	;;
    Reiner)
	case $(hostname) in
	    thunder*|ctc*)
		mpi_root=/sw/squeeze-x64/mpi/openmpi_ib-1.6.2-static-gcc46
		mpiexec_cmd="mpiexec" 
		;;
	    ulme*)
		mpi_root=/sw/squeeze-x64/mpi/mpich2-1.4.1p1-static-gcc45
		mpiexec_cmd="mpiexec" 
		;;
	esac

	;;
esac
 
#if [[ ${ENVIRONMENT:-} = BATCH ]]
#then
#    no_of_nodes=$SLURM_NNODES
#    mpi_procs_pernode=$SLURM_TASKS_PER_NODE
#else
case $(hostname) in
    wanglung*|thunder*)
        no_of_nodes=1
        mpi_procs_pernode=8
        ;;
    ctc*)
        no_of_nodes=4
        mpi_procs_pernode=16
        ;;    
    *)
	    no_of_nodes=1
        mpi_procs_pernode=2
        ;;
esac
#fi
(( mpi_total_procs = no_of_nodes * mpi_procs_pernode ))

greenln "   MPI setup:"
greenln "                 MPI root = $mpi_root"
greenln "                 MPI exec = $mpiexec_cmd"
greenln "                 MPI tasks = $mpi_total_procs" 

if [[ "$(os)" = "Linux" ]]
then
    ulimit -s unlimited
fi

#__________________________________________________________________________________________________
# experiment directory, with plenty of space, create if new

# ICON experiment name and runtime directory

EXPNAME=r2b4_amip

EXPDIR=$basedir/experiments/$EXPNAME

blueln "Experiment name     : $EXPNAME"
blueln "Experiment directory: $EXPDIR"

if [[ ! -d $EXPDIR ]] ;  then
  mkdir -p $EXPDIR
  check_error $? "$LINENO: $EXPDIR could not be created ..."
fi

cd $EXPDIR

#__________________________________________________________________________________________________
# define the experiment: set variables for ICON namelist

# horizontal grid(s)
grids_folder=/pool/data/ICON/grids/private/r2b4_amip
atmo_dyn_grids='r2b4_amip.nc'

blueln "Grid directory: $grids_folder"
blueln "Grid file     : $atmo_dyn_grids"

# vertical grid
nlev=47              

# define model timing
dtime=300                            # time step [s]
start_date="1978-01-01T00:00:00Z"    # start of experiment
end_date="1978-01-03T00:00:00Z"      # stop of experiment
ndays=2                              # experiment duration 
ndays_restart=1                      # restart every 10 days

# derived model timings
(( dt_restart = ndays_restart * 86400 ))
dt_restart=3600
(( nsteps = ndays * 86400 / dtime ))
(( dt_diag = 6 * 3600 ))             # global integral output each 6 hours
(( dt_file = 86400 ))                # 1 day per file
(( dt_data = 6 * 3600 ))             # write output every 6 hour
(( dt_rad = 3600 ))                  # compute radiative transfer every other hour
(( dt_checkpoint = 5 * 86400 ))      # write restart file every 5 days 

# dynamical core
# 1 = hydrost. atm., 2 = non-hydrost. atm.
atmo_model_equations=1

#__________________________________________________________________________________________________
# define the experiment: write ICON namelist parameters

atmo_namelist=NAMELIST_${EXPNAME}_atmo
land_namelist=NAMELIST_${EXPNAME}_land

cat > ${basedir}/run/${atmo_namelist} << EOF
!
&parallel_nml
 nproma         = ${nproma}
/
&grid_nml
 dynamics_grid_filename = "${atmo_dyn_grids}",
/
&run_nml
 num_lev          = ${nlev},     ! number of full levels of vertical grid
 output           = 'vlist', 'nml'
 nsteps           = ${nsteps}    ! number of steps length of run
 dtime            = ${dtime}     ! [s] timestep in seconds
 ltestcase        = .TRUE.       ! run testcase                 --> testcase_ctl
 ldynamics        = .TRUE.       ! dynamics                     --> dynamics_ctl, diffusion_ctl
 ltransport       = .TRUE.       ! switch on tracer transport   --> transport_ctl
 ntracer          = 5            ! number of tracers
 iforcing         = 2            ! ECHAM physics                --> echam_phy_nml
 msg_level        = 10           ! detailed report during integration 
/
&ha_testcase_nml
 ctest_name       = 'AMIP'  ! test case identifier
 lrh_linear_pres  = .TRUE.   ! initial RH is a linear function of pressure
 rh_at_1000hpa    = 0.30     ! [] initial rel. humidity at 1000 hPa 
/
&io_nml
 out_expname      = '${EXPNAME}'     ! file name base
 dt_data          = ${dt_data}       ! [s] write output
 dt_file          = ${dt_file}       ! [s] trigger new output file
 dt_checkpoint    = ${dt_checkpoint} ! [s] trigger new restart file
 lwrite_radiation = .TRUE.           ! add radiation fields to output
 lwrite_cloud     = .TRUE.           ! add cloud fraction to output
 lwrite_precip    = .TRUE.           ! add precipitation to output
 lwrite_pres      = .FALSE.          ! remove pressure from output
 lkeep_in_sync    = .TRUE.           ! sync after each timestep
/
&dynamics_nml
 iequations       = ${atmo_model_equations}    ! 1: hydrost. atmosphere
/
&ha_dyn_nml
 ldry_dycore      = .FALSE.      ! moist dynamical core
/
&diffusion_nml
 hdiff_order      = 24      ! 2nd order near model top, 4th order on the other levels
 k2_klev_max      = 3       ! the 3 highest model levels use 2nd order diffusion
/
&transport_nml
 ctracer_list     = 'vwi45'       ! water vapour, cloud water, cloud ice, constant field, dummy for ozone
/
&echam_phy_nml
 lrad             = .TRUE.
 lvdiff           = .TRUE.
 lconv            = .TRUE.
 lcond            = .TRUE.
 lgw_hines        = .TRUE.
 ljsbach          = .TRUE.
 dt_rad           = ${dt_rad}     ! [s] compute radiative transfer every other hour
/
&radiation_nml
 irad_h2o         = 1             ! prognostic vapor, liquid and ice
 irad_co2         = 2             ! constant co2 vmr
 irad_ch4         = 0             ! switch off ch4
 irad_n2o         = 0             ! switch off n2o
 irad_o3          = 0             ! switch off o3
 irad_o2          = 0             ! switch off o2
 irad_cfc11       = 0             ! switch off cfc11
 irad_cfc12       = 0             ! switch off cfc12
 irad_aero        = 0             ! switch off aerosols
 ighg             = 1             ! select CMIP5 standard greenhouse gas scenario (as in ECHAM6 AMIP) 
 izenith          = 4             ! seasonal and diurnal cycle
! vmr_co2    =  353.9e-06    ! CMIP5 value of 1990
! vmr_ch4    = 1693.6e-09    ! CMIP5 value of 1990
! vmr_n2o    =  309.5e-09    ! CMIP5 value of 1990
! vmr_cfc11  =  252.8e-12    ! CMIP5 value of 1990
! vmr_cfc12  =  466.2e-12    ! CMIP5 value of 1990
/
&echam_conv_nml
/
&gw_hines_nml
/
&output_nml
 namespace        = 'MPIMET'
 filetype         = 4
 dom              = -1
 output_time_unit = 3 ! hours
 output_bounds    = 6.,240.,6.   !start, end, increment
 steps_per_file   = 4
 include_last     = .TRUE.
 remap            = 0   ! triangular grid
 output_filename  = "${EXPNAME}_`basename ${atmo_dyn_grids} .nc`_jsbach"
 output_grid      = .TRUE.
 ml_varlist       = 'fract', 'alb_vis_srf', 'alb_nir_srf', 'swrad_srf_net', 't_srf', 'lai', 's_srf', 'qsat_srf'
                    'canopy_cond', 'ws_l', 'ws', 'water_stress', 'ws_root', 'ws_fc_root', 'albedo_srf', 'sensible_hflx'
                    'evapotrans', 'fact_qsat_srf', 'fact_q_air', 't_srf_unfilt', 't_srf_unfilt_old', 't_srf_old'
                    't_soil', 'wsn_srf', 'wsr_srf'
 !map_file         ="mapfile_dcmip.txt"
/
EOF

cat > ${land_namelist} <<EOF
&jsb_model_nml
  usecase         = 'jsbach_lite'
/

&jsb_srf_nml
  bc_filename     = 'bc_srf.nc'
  bc_sso_filename = 'bc_land_sso.nc'
  ic_filename     = 'ic_srf.nc'
/

&jsb_soil_nml
  active          = .TRUE.
  nsoil_energy    = 5
  nsoil_water     = 5
  bc_filename     = 'bc_soil.nc'
  ic_filename     = 'ic_soil.nc'
/

&jsb_veg_nml
  active          = .TRUE.
  bc_filename     = 'bc_veg.nc'
  ic_filename     = 'ic_veg.nc'
/
EOF

#__________________________________________________________________________________________________
# get horizontal grid files

HGRIDDIR=$grids_folder

all_grids="${atmo_dyn_grids} ${atmo_rad_grids:-}"

for gridfile in ${all_grids}
do
    # check if input file exists
    ls -l ${HGRIDDIR}/$gridfile > /dev/null
    check_error $? "$LINENO: ${HGRIDDIR}/$gridfile does not exist."
    if [[ -e $gridfile ]]
    then
	rm $gridfile
    fi
    ln -s ${HGRIDDIR}/$gridfile $gridfile
done
#
#__________________________________________________________________________________________________
# get vertical grid files

VGRIDDIR=${basedir}/vertical_coord_tables
if [[ $atmo_model_equations = 3 ]]
then
    VGRIDNAME=atm_hyb_sz_${nlev}
    if [[ -e ${VGRIDNAME} ]]
    then
	rm  ${VGRIDNAME}
    fi
    ln -s ${VGRIDDIR}/${VGRIDNAME} ${VGRIDNAME}
    warning $? "ln -s ${VGRIDDIR}/${VGRIDNAME} failed"
else
    VGRIDNAME=atm_hyb_sp_${nlev}
    if [[ -e ${VGRIDNAME} ]]
    then
	rm ${VGRIDNAME}
    fi
    ln -s ${VGRIDDIR}/${VGRIDNAME} ${VGRIDNAME}
    check_error $? "ln -s ${VGRIDDIR}/${VGRIDNAME}"
fi

#__________________________________________________________________________________________________
# copy initial and boundary conditions and ancilliary files

# model constants

cp -f ${basedir}/data/rrtmg_lw.nc           ${EXPDIR} # LW radiation constants
cp -f ${basedir}/data/ECHAM6_CldOptProps.nc ${EXPDIR} # cloud optical properties   


# initial conditions
# - to be done


# boundary conditions

INIDATA=/pool/data/ICON/input/r0001

cp -f $INIDATA/global/atm/bc_greenhouse_rcp45_1765-2500.nc bc_greenhouse_gases.nc

# - ozone
#   !still wrong APE ozone!
cp -f ${basedir}/data/external/ape_ozone/ape_o3_R2B04_1Pa_spr0.90-cell.nc ./o3_icon_DOM01.nc

# - sst and sic
cp -f $INIDATA/r2b4_amip/oce/bc_sic_pcmdi_1870-2010.nc ./bc_sic.nc
cp -f $INIDATA/r2b4_amip/oce/bc_sst_pcmdi_1870-2010.nc ./bc_sst.nc

# - land parameters
#cp -f $INIDATA/r2b4_amip/lnd/bc_land_frac.nc           ./bc_land_frac.nc
#cp -f $INIDATA/r2b4_amip/lnd/bc_land_phys.nc           ./bc_land_phys.nc
#cp -f $INIDATA/r2b4_amip/lnd/bc_land_sso.nc            ./bc_land_sso.nc

#ls -l ${basedir}/jsbach_R2B04_v1.nc > /dev/null 2>&1
#check_error $? "copy /home/zmaw/m212070/jsbach_R2B04_v1.nc to $EXPDIR (2013-03-27)."
#cp -f ${basedir}/jsbach_R2B04_v1.nc                    ./extpar_${atmo_dyn_grids}
ls -l /home/zmaw/m212005/icon/r2b4_amip/bc_veg.nc > /dev/null 2>&1 || check_error $? "cannot copy /home/zmaw/m212005/icon/r2b4_amip/\* to $EXPDIR."
cp -f /home/zmaw/m212005/icon/r2b4_amip/ic_srf.nc                ./
cp -f /home/zmaw/m212005/icon/r2b4_amip/bc_*.nc                  ./
cp -f /home/zmaw/m212005/icon/r2b4_amip/extpar_${atmo_dyn_grids} ./

#__________________________________________________________________________________________________
# copy restart files eventually

if [[ "x${restart_atmo_from:-}" != "x" ]]
then
    rm -f restart_atm.nc
    cp ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
    ln -s cp_restart_atm.nc restart_atm.nc
    cp ${basedir}/experiments/${restart_from_folder}/restart.info .
    restart=".true."
fi

#__________________________________________________________________________________________________
# create master_namelist

master_namelist=icon_master.namelist
jsbach_master_namelist=jsbach_master.namelist

if [[ "x${end_date:-}" = "x" ]] 
then

cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
/
&time_nml
 ini_datetime_string = "$start_date"
 dt_restart          = $dt_restart
/
EOF
else
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
/
&time_nml
 ini_datetime_string = "$start_date"
 end_datetime_string = "$end_date"
 dt_restart          = $dt_restart
 /
EOF

fi

cat > $jsbach_master_namelist << EOF
&jsb_control_nml
 is_standalone      = .false.
 restart_jsbach     = .false.
/

&jsb_model_nml
 model_name = 'JSBACHlite'
 model_shortname = 'lite'
 model_description = 'JSBACH-lite model'
 model_namelist_filename = "${land_namelist}"
/
EOF

minrank_list[0]=0
maxrank_list[0]=65535
incrank_list[0]=1
namelist_list[0]="$atmo_namelist"
modelname_list[0]="atmo"
modeltype_list[0]=1

#__________________________________________________________________________________________________
# add model component to master_namelist, function definition

add_component_to_master_namelist()
{
    local model_namelist_filename="$1"
    local model_name=$2
    local model_type=$3
    local model_min_rank=$4
    local model_max_rank=$5
    local model_inc_rank=$6
  
    greenln " ... add model $model_name"

cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_restart_info_filename=""
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
/
EOF

}

# add model component to master_namelist

no_of_models=${#namelist_list[*]}

greenln "number of models: $no_of_models"

j=$no_of_models
while (( ( --j ) >= 0 ))
do
    add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]}
done

#__________________________________________________________________________________________________
# get model and run

bindir="${basedir}/build/$(system ${basedir})/bin"   # binaries
export MODEL=${bindir}/control_model

ls -l ${MODEL} > /dev/null
check_error $? "$LINENO: ${MODEL} does not exist?"

# start experiment
#

rm -f finish.status

date
$mpi_root/bin/$mpiexec_cmd -n $mpi_total_procs ${MODEL}
date
#
if [[ -r finish.status ]] 
then
  check_error 0 "$LINENO: ${MODEL} finished successfull ..."
else
  check_error -1 "$LINENO: ${MODEL} execution failed ..."
fi

finish_status=$(cat finish.status)
finish_status=${finish_status//[[:space:]]/}
greenln $finish_status
greenln "============================"
greenln "Script run successfully: $finish_status"
greenln "============================"

#__________________________________________________________________________________________________
# check if we have to restart, ie resubmit

if [[ "${finish_status}" = "RESTART" ]]
then
    greenln "restart next job..."
    perl -pi -e 's/(^#AUTOMATIC_RESTART_SETUP.*)/\1\nrestart=\.true\./' $this_script
    ${submit} $this_script
fi


blueln "__________________________________________________________________________________________"
#__________________________________________________________________________________________________
#
exit 0
#__________________________________________________________________________________________________

#!/bin/ksh

 ##
 echo "Trying to find out on which HPC the TESTSUITE is performed..." >&2
 HPC=`(hostname || uname -n) 2>/dev/null | sed 1q`
 case x"$HPC" in #(
   xic2*) :
     echo "...IC2 at KIT"; CENTER="IMK" ;; #(
   xhc3*) :
     echo "...HC3 at KIT"; CENTER="IMK" ;; #(
   xuc1*) :
     echo "...UC1 at KIT"; CENTER="IMK" ;; #(
   xfh2*) :
     echo "...FH2  at KIT"; CENTER="IMK" ;; #(
   xxce*) :
     echo "...XCE at DWD"; CENTER="DWD" ;; #(
   xlce*) :
     echo "...LCE at DWD"; echo "  ERROR: Testsuite has to be run and compiled on XCE !!!", exit 201 ;; #(
   *) :
     echo "...unknown HPC" ; exit 202 ;; #(
 esac
 ##
 echo "Reading configuration state for ICON-ART Testsuite" >&2
 . setup_testsuite.cfg
 ##

 d=`date -d today +%Y%m%d`

 ##
 # GET REVISION NUMBERS AND DO THE SVN CHECKOUT
 ##
#REVISION=`svn info https://svn.zmaw.de/svn/icon/${icon_branch} | grep '^Revision:' | sed -e 's/^Revision: //'`
# REVISION="$(ls -1rtd ${testers_home}/CHECKOUT/icon-art-${d}-r* | tail -1)"
# REVISION="${REVISION##*-r}"
# ICON_FOLDER="${testers_home}/CHECKOUT/icon-art-${d}-r${REVISION}"
#svn export https://svn.zmaw.de/svn/icon/${icon_branch} ${testers_home}/CHECKOUT/icon-art-${d}-r${REVISION}
 ##
#REVISION_ART=`svn info https://svnserver.informatik.kit.edu/imk/svn/ICON-ART/${art_branch} | grep '^Revision:' | sed -e 's/^Revision: //'`
# REVISION_ART="$(ls -1rtd ${testers_home}/CHECKOUT/icon-art-${d}-r${REVISION}/src/ART-r* | tail -1)"
# REVISION_ART="${REVISION_ART##*-r}"
# ART_FOLDER="${testers_home}/CHECKOUT/icon-art-${d}-r${REVISION}/src/ART-r${REVISION_ART}"
#svn export https://svnserver.informatik.kit.edu/imk/svn/ICON-ART/${art_branch} ${testers_home}/CHECKOUT/icon-art-${d}-r${REVISION}/src/ART-r${REVISION_ART}
 ##
 ICON_FOLDER=$(pwd)/../..
 ART_FOLDER=$ICON_FOLDER/src/art

# cd ${testers_home}/CHECKOUT/icon-art-${d}-r${REVISION}
  cd $ICON_FOLDER

 case ${CENTER} in
    IMK)
       ##
       # LOAD IC2 MODULES
       ##
       #module load compiler/intel/${compiler_version}
       ##module load openmpi/${openmpi_version}
       ##module load netcdf/${netcdf_version}
       ##
       ;;
    DWD)
       ##
       if [[ ":${PE_ENV}" != ':CRAY' ]] ; then
          module unload libdwd grib_api
          module unload cray-netcdf netcdf perftools stat
          module unload craype-hugepages2M
          case "{PE_ENV}" in
             GNU)   prgenv_="PrgEnv-gnu"   ;;
             INTEL) prgenv_="PrgEnv-intel" ;;
          esac
          module swap ${prgenv_} PrgEnv-cray
       fi
       module swap cce cce/${compiler_version}
       module load cray-netcdf perftools stat
       module load libdwd
       module load grib_api
       module list
       ##       
       ;;
 esac

 ##
 # Create checkout.info to store checkout information (e.g. which branches are checked out?)
 ##
 info_filename="Test-${d}-r${REVISION}.info"
 echo "Information file for ICON-ART Testsuite (Version 0.2)"          >${info_filename}
 echo "Tested by                        ${Tester}"                     >>${info_filename}
 echo "Date:                            ${d}"                          >>${info_filename}
 echo "----------------------------"                                   >>${info_filename}
 echo "--- Library Information  ---"                                   >>${info_filename}
 echo "----------------------------"                                   >>${info_filename}
 echo "Using compiler version:          ${compiler_version}"           >>${info_filename}
 ##if [[ ":${CENTER}" == ':IMK' ]] ; then
 ##   echo "Using OpenMPI version:           ${openmpi_version}"   >>${info_filename}
 ##   echo "Using NETCDF version:            ${netcdf_version}"    >>${info_filename}
 ##fi
 echo "----------------------------"                                   >>${info_filename}
 echo "--- Checkout Information ---"                                   >>${info_filename}
 echo "----------------------------"                                   >>${info_filename}
 echo "Config for the icon_branch:      ${icon_branch}"                >>${info_filename}
 echo "Revision Number ICON:            r${REVISION}"                  >>${info_filename}
 echo "Config for the art branch:       ${art_branch}"                 >>${info_filename}
 echo "Revision Number ART:             r${REVISION_ART}"              >>${info_filename}
 echo "----------------------------"                                   >>${info_filename}
 echo "--- I/O Information      ---"                                   >>${info_filename}
 echo "----------------------------"                                   >>${info_filename}
 echo "Using input folder:              ${input_folder}"               >>${info_filename}
 echo "Writing output to:               ${output_folder}"              >>${info_filename}
 echo "Filetype (2: GRIB2 / 4: NetCDF): ${FILETYPE}"                   >>${info_filename}
 echo "----------------------------"                                   >>${info_filename}
 echo "--- Testing Information  ---"                                   >>${info_filename}
 echo "----------------------------"                                   >>${info_filename}
 echo "Performing Natural Aerosol Test: ${perform_test_nataero}"       >>${info_filename}
 echo "Performing Nat. Aero. OMP Test:  ${perform_test_nataero_omp}"   >>${info_filename}
 echo "Performing Natural Aerosol Test: ${perform_test_nataero_norad}" >>${info_filename}
 echo "Performing Natural Aerosol Test: ${perform_test_nataero_rad}"   >>${info_filename}
 echo "Performing CHEM0 Test:           ${perform_test_CHEM0}"         >>${info_filename}
 echo "Performing CHEM1 Test:           ${perform_test_CHEM1}"         >>${info_filename}
 echo "Performing AMIP Test:            ${perform_test_AMIP}"         >>${info_filename}
 echo "Performing Volcano Test:         ${perform_test_VOLC}"          >>${info_filename}
 ##

 ##
 # DO A LAST CHECK FOR UPDATES (BECAUSE OF EXTERNAL LIBRARIES) AND CLEAN UP
#svn update
#make clean
 ##

 ##
 if [[ ":${CENTER}" == ':IMK' ]] ; then
    # UNSET -IPO AND OTHER MACHINE PRESETTINGS
    for VAR in `set | grep FLAGS | awk -F "=" '{print $1}'`; do unset $VAR ; done
 fi
 ##

 echo "---------------------------------------------------"      >>${info_filename}
 echo "------END OF INFORMATION / STARTING TESTSUITE------"      >>${info_filename}
 echo "---------------------------------------------------"      >>${info_filename}

 ##
 # First: Check Compilation without ART for inconsistencies (ifdefs)
 case ${CENTER} in
    IMK)
       ##
       #make distclean
       #./configure --with-fortran=intel --with-openmp --without-yac
       #gmake -j32
       ##
       ;;
    DWD)
       ##
       make distclean
       ./configure --with-fortran=cray
       gmake -j16
       ##
       ;;
 esac
 ##
 if [[ -f build/x86_64-unknown-linux-gnu/bin/icon ]] ; then
    echo "Compilation Status without ART: OK"                                >>${info_filename}
 else
    echo "Compiling ICON not successful. Executable not found!"
    echo "Compilation Status: ERROR"                             >>${info_filename}
    exit
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##
 # CONFIGURATION AND COMPILATION
 case ${CENTER} in
    IMK)
       ##
       #make distclean
	   ##make
       #./configure --with-fortran=intel --with-art #--with-openmp --without-yac
       #gmake -j32
       ##
       ;;
    DWD)
       ##
       make distclean
       ./configure --with-fortran=cray --with-art
       gmake -j16
       ##       
       ;;
 esac
 ##
 if [[ -f build/x86_64-unknown-linux-gnu/bin/icon ]] ; then
    echo "Compilation Status: OK"                                >>${info_filename}
 else
    echo "Compiling ICON-ART not successful. Executable not found!"
    echo "Compilation Status: ERROR"                             >>${info_filename}
    exit
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##

 (( ${FILETYPE} == 2 )) && exp_name_suffix="_GRIB2"

 ##
 # Run the test cases
 ##
 if [[ "${perform_test_nataero}" == "Yes" ]] ; then

    echo "Performing NATAERO Testsuite">>${info_filename}
    exp_name="NATAERO${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/${exp_name}
    chmod 750 ${ART_FOLDER}/runctrl_examples/run_scripts/exp.testsuite.nataero
    ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.nataero ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                       ${CENTER} ${FILETYPE} 2>&1

 else
    echo "NATAERO test skipped."                                 >>${info_filename}
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##
 if [[ "${perform_test_nataero_omp}" == "Yes" ]] ; then

    echo "Performing NATAERO OMP Testsuite">>${info_filename}
    exp_name="NATAERO_OMP${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/${exp_name}
    chmod 750 ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.nataero.omp
    ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.nataero.omp ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                           ${CENTER} ${FILETYPE} 2>&1

 else
    echo "NATAERO_OMP test skipped."                                 >>${info_filename}
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##
 if [[ "${perform_test_nataero_norad}" == "Yes" ]] ; then

    echo "Performing NATAERO_NORAD Testsuite">>${info_filename}
    exp_name="NATAERO_NORAD${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/${exp_name}
    chmod 750 ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.nataero.norad
    ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.nataero.norad ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                       ${CENTER} ${FILETYPE} 2>&1

 else
    echo "NATAERO_NORAD test skipped."                           >>${info_filename}
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##
 if [[ "${perform_test_nataero_rad}" == "Yes" ]] ; then

    echo "Performing NATAERO_RAD Testsuite">>${info_filename}
    exp_name="NATAERO_RAD${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/${exp_name}
    ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.nataero.rad
    ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.nataero.rad ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                       ${CENTER} ${FILETYPE} 2>&1

 else
    echo "NATAERO_RAD test skipped."                             >>${info_filename}
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##
 if [[ "${perform_test_CHEM0}" == "Yes" ]] ; then

    echo "Performing CHEM0 Testsuite">>${info_filename}
    exp_name="CHEM0${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/${exp_name}
    output_script=run/checksuite.icon-kit/$exp_name.run
cat > $output_script << EOF
#!/bin/bash

CENTER=$CENTER
INDIR=${input_folder}
EXP=$exp_name
ICONFOLDER=$ICON_FOLDER
ARTFOLDER=$ART_FOLDER
OUTDIR=$complete_output_folder
FILETYPE=-4
COMPILER=intel
EOF

 


    cat ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.chem0_base >> run/checksuite.icon-kit/$exp_name.run
	chmod +x run/checksuite.icon-kit/$exp_name.run
   
#	${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
#                                                    ${CENTER} ${FILETYPE} 	
    #${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.chem0 ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
    #                                                ${CENTER} ${FILETYPE} 

 else
    echo "CHEM0 test skipped."                                    >>${info_filename}
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##
 if [[ "${perform_test_CHEM0_EMISS}" == "Yes" ]] ; then

    echo "Performing CHEM0_EMISS Testsuite">>${info_filename}
    exp_name="CHEM0_EMISS${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/${exp_name}
    chmod 750 ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.chem0.emiss
    ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.chem0.emiss ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                    ${CENTER} ${FILETYPE} 2>&1

 else
    echo "CHEM0_EMISS test skipped."                                    >>${info_filename}
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##
 if [[ "${perform_test_CHEM1}" == "Yes" ]] ; then

    echo "Performing CHEM1 Testsuite">>${info_filename}
    exp_name="CHEM1${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/${exp_name}
    chmod 750 ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.chem1
    ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.chem1 ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                    ${CENTER} ${FILETYPE} 2>&1

 else
    echo "CHEM1 test skipped."                                    >>${info_filename}
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##
 if [[ "${perform_test_AMIP}" == "Yes" ]] ; then

    echo "Performing AMIP Testsuite">>${info_filename}
    exp_name="AMIP${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/${exp_name}
    chmod 750 ${ART_FOLDER}/runctrl_examples/run_scripts/exp.testsuite.chem1
    ${ART_FOLDER}/runctrl_examples/run_scripts/exp.testsuite.amip ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                    ${CENTER} ${FILETYPE} 2>&1

 else
    echo "CHEM1 test skipped."                                    >>${info_filename}
 fi
 if [[ "${perform_test_VOLC}" == "Yes" ]] ; then

    echo "Performing VOLC Testsuite">>${info_filename}
    exp_name="VOLC${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/${exp_name}
    chmod 750 src/ART-r${REVISION_ART}/run/exp.testsuite.volc
    src/ART-r${REVISION_ART}/run/exp.testsuite.volc ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                    ${CENTER} ${FILETYPE} 2>&1

 else
    echo "VOLC test skipped."                                    >>${info_filename}
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 
 
  ##
 if [[ "${perform_test_wwoART}" == "Yes" ]] ; then

    echo "Performing CHEM1 Testsuite">>${info_filename}
    exp_name="CHEM1${exp_name_suffix}"
    complete_output_folder=${output_folder}/${d}/wART
    chmod 750 ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.wART
    ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.wART ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                    ${CENTER} ${FILETYPE} 2>&1
	complete_output_folder=${output_folder}/${d}/woART
    chmod 750 ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.woART
    ${ART_FOLDER}/runctrl_examples/run_scripts//exp.testsuite.woART ${input_folder} ${exp_name} ${ICON_FOLDER} ${ART_FOLDER} ${complete_output_folder} \
                                                    ${CENTER} ${FILETYPE} 2>&1


 else
    echo "WWOART test skipped."                                    >>${info_filename}
 fi
 echo "---------------------------------------------------"      >>${info_filename}
 ##

 
 ##
 # further testcases

 ##


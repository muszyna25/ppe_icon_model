#!/bin/ksh
#-----------------------------------------------------------------------------
# Leonidas Linardakis   MPI-M,   2010-10 
#
# This script creates optimized ICON grids using
# a combination of optimizations
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# paths of directories
GRIDDIR=grids
WRKDIR=${basedir}/$GRIDDIR
echo $WRKDIR
if [ ! -d $WRKDIR ]; then
    mkdir -p $WRKDIR
fi
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
if [[ "x$target" = "xsx9" ]] ; then
  echo "Disabled for ${target}. Copying grids from buildbot.grids."
  cp  ../../../../buildbot.grids/* ${WRKDIR}
  check_error 0 "create_nested_grids"
  exit 0
fi
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
make_comb_opt_grids="true"
make_patches="true"
run_commmand="${start} $bindir/grid_command"
commandFile=command.grid
#-----------------------------------------------------------------------------
# define the levels to create
start_level=0
no_of_levels=5            
start_optimize=2
end_optimize=5
refinement_method=1     # 1=edge bisection, 2=dual centers
cd $WRKDIR
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
set_default_optimization_grids()
{
dual_iterations=0       # prime/dual iterations
max_iterations=10000

use_optimization='.false.'
use_barycenter_force='.false.'
barycenter_force_coeff="1.0"

use_isotropy_force='.false.'
isotropy_rotation_coeff="0.5"
isotropy_stretch_coeff="0.1"

use_edge_springs='.false.'
use_adaptive_spring_length='.false.'
use_local_reference_length='.false.'
local_reference_length_coeff=1.0

prime_ref_length_coeff=1.1
minedge_ref_length_weight=0.2
prime_soft_spring_stiffness=1.0  # the stiffness of "large" prime springs
prime_hard_spring_stiffness=1.0  # the stiffness of "small" prime springs

use_centers_spring_correction='.false.'
centers_springcorrection_coeff=0.25

use_prime_spring_cellcenters='.false.'
use_dual_spring_cellcenters='.false.'
centers_ref_length_coeff=0.9
centers_spring_stiffness=1.0  # the stiffness of vertex-cell center springs

spring_friction=1.6
spring_dt=1.6e-2
use_adaptive_dt='.false.'
max_dt_distance_ratio=5.0e-5

prime_total_force_condition=0.05  # exit condition for total force
prime_max_force_condition=0.01   # exit condition for max force
max_min_condition=1.1            # exit condition for max/min edge
centers_vertex_condition=1.005

centers_local_condition=1.0

#-----------------------------
optimize_vertex_depth=4

}
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
set_comb_optimization_grids()
{
  set_default_optimization_grids
  
  use_optimization='.true.'

  use_edge_springs='.true.'
  use_adaptive_spring_length='.true.'
  
  use_local_reference_length='.true.'
  local_reference_length_coeff=0.75
  
  use_prime_spring_cellcenters='.true.'
  centers_ref_length_coeff=1.0 
  centers_spring_stiffness=1.0  # the stiffness of vertex-cell center springs
  
  use_isotropy_force='.true.'
  isotropy_rotation_coeff=1.0
  isotropy_stretch_coeff=0.1
}
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
add_optimization_namelist()
{
parameterFile=$1
#-----------------------------------------------------------------------------
cat >> $parameterFile << EOF
&grid_optimization
  use_optimization              = $use_optimization
  max_iterations                = $max_iterations
  use_edge_springs              = $use_edge_springs
  use_adaptive_dt               = $use_adaptive_dt
  use_prime_spring_cellcenters  = $use_prime_spring_cellcenters
  use_dual_spring_cellcenters   = $use_dual_spring_cellcenters
  max_dt_distance_ratio         = $max_dt_distance_ratio
  prime_ref_length_coeff        = $prime_ref_length_coeff
  centers_ref_length_coeff      = $centers_ref_length_coeff
  minedge_ref_length_weight     = $minedge_ref_length_weight
  prime_soft_spring_stiffness   = $prime_soft_spring_stiffness
  prime_hard_spring_stiffness   = $prime_hard_spring_stiffness   
  centers_spring_stiffness      = $centers_spring_stiffness
  use_centers_spring_correction = $use_centers_spring_correction
  centers_springcorrection_coeff= $centers_springcorrection_coeff
  spring_friction               = $spring_friction
  spring_dt                     = $spring_dt
  p_total_force_condition       = $prime_total_force_condition
  p_max_force_condition         = $prime_max_force_condition
  max_min_condition             = $max_min_condition
  centers_vertex_condition      = $centers_local_condition
  use_adaptive_spring_length    = $use_adaptive_spring_length
  use_local_reference_length    = $use_local_reference_length
  local_reference_length_coeff  = $local_reference_length_coeff
  use_isotropy_force       = $use_isotropy_force
  isotropy_rotation_coeff       = $isotropy_rotation_coeff
  isotropy_stretch_coeff        = $isotropy_stretch_coeff
  use_barycenter_force          = $use_barycenter_force
  barycenter_force_coeff        = $barycenter_force_coeff
  optimize_vertex_depth         = $optimize_vertex_depth
/
EOF
}
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
create_grids()
{
parameterFile=create_icon_grid.namelist
command=create_icon_grid
#-----------------------------------------------------------------------------
# namelist
cat > $parameterFile << EOF
&icosahedron_grid
  no_of_levels = $no_of_levels
  start_level =  $start_level
  start_optimize= $start_optimize
  end_optimize  = $end_optimize
  refinement_method = $refinement_method
  output_file  = '$base_file_name'
  optimization_extension = '$optimization_extension'
  ! input_file = '${input_file}'
/
EOF
#-----------------------------------------------------------------------------
add_optimization_namelist $parameterFile
#-----------------------------------------------------------------------------
# run grid generator
echo $command $parameterFile > $commandFile
${run_commmand}
check_error $? "create icon grid"
}
#-----------------------------------------------------------------------------


#=============================================================================
# create symmetry grids
if [ "x$make_comb_opt_grids" == "xtrue" ] ; then
  set_comb_optimization_grids
  base_file_name=iconR2B
  optimization_extension="-grid"
  #-----------------------------------------------------------------------------
  create_grids
fi
#=============================================================================


#=============================================================================
# create_patches section
create_patches()
{
parameterFile=refine_icon_grid.namelist
command=refine_grid
#-----------------------------------------------------------------------------
# namelist
#   rectangle_xradious = $rectangle_xradious  ! half diameter of meridional extension in degrees
#   rectangle_yradious = $rectangle_yradious  ! half diameter of zonal extension in degrees
cat > $parameterFile << EOF
&grid_geometry_conditions
  no_of_conditions   = $no_of_conditions       ! 1: create ocean basin with patch_center and radius; 0: no conditions
  patch_shape        = $patch_shape            ! 1: rectangle; 2: circle_shape
  circle_radious     = $circle_radious
  patch_center_x     = $patch_center_x       ! longitude of center
  patch_center_y     = $patch_center_y       ! latitude  of center
/
&local_grid_refine
  input_file = "$input_file"
  output_file = "$output_file"
/
EOF
add_optimization_namelist $parameterFile 
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
echo $command $parameterFile > $commandFile
${run_commmand}
check_error $? "create icon grids"
}
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
create_hierarchy()
{
parameterFile=hierarchy_icon_grid.namelist
command=create_patch_hierarchy
#-----------------------------------------------------------------------------
# namelist
cat > $parameterFile << EOF
&local_patch_creation
  total_no_of_patches = $no_of_patches
  in_grid_file_names  = $hierInNameList
  out_grid_file_names = $hierOutNameList
  grid_ids = $hierIDList
  parent_ids = $hierParentList
  bdy_indexing_depth = 14
/
EOF
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
echo $command $parameterFile > $commandFile
${run_commmand}
check_error $? "create icon patch hierarchy"
}
#-----------------------------------------------------------------------------


#=============================================================================
if [ "x$make_patches" == "xtrue" ] ; then

  cp iconR2B04-grid.nc iconR2B04_DOM01.nc
  echo 'coarsen_grid iconR2B04_DOM01.nc iconR2B03-grid.nc iconR2B03_DOM00.nc' > $commandFile
  ${run_commmand}
  check_error $? "coarsen_grid"  
  startRefine=1
  
  no_of_patches=4
  patchNameList=(  iconR2B03_DOM00.nc iconR2B04_DOM01.nc iconR2B05_DOM02.nc iconR2B06_DOM03.nc)
  circleRadiousList=(   "none"            "none"                 35.0               18.0)
  patchIDList=(         1                   2                    3                   4  )
  patchParentIDList=(   0                   1                    2                   3)

  no_of_patches=3
  patchNameList=(  iconR2B03_DOM00.nc iconR2B04_DOM01.nc iconR2B05_DOM02.nc)
  circleRadiousList=(   none                none                 30.0 )
  patchIDList=(         1                   2                    3  )
  patchParentIDList=(   0                   1                    2  )

  patch_shape=2
  patch_center_x=-90.0
  patch_center_y=40.0

  set_comb_optimization_grids
#   set_default_optimization_grids

  # create patches
  i=$startRefine; j=$((startRefine+1));
  while [ $j -lt ${no_of_patches} ]
  do
    input_file="${patchNameList[$i]}"
    output_file="${patchNameList[$j]}"
    circle_radious=${circleRadiousList[$j]}
    no_of_conditions=1
    if [ $circle_radious =  "none" ] ; then
      no_of_conditions=0
      circle_radious=0
    fi
    echo $circle_radious $no_of_conditions $circle_radious
    create_patches
    i=$((i+1));
    j=$((j+1));
  done

  # create hierarchy
  hierInNameList=""
  hierOutNameList=""
  hierIDList=""
  hierParentList=""
  i=$((no_of_patches-1));
  while [ $i -ge 0 ]
  do
    hierInNameList="'${patchNameList[$i]}', $hierInNameList"
    hierOutNameList="'${patchNameList[$i]}', $hierOutNameList"
    hierIDList="${patchIDList[$i]}, $hierIDList"
    hierParentList="${patchParentIDList[$i]}, $hierParentList"
    i=$((i-1));
  done
  echo $hierInNameList
  echo $hierOutNameList
  echo $hierIDList
  echo $hierParentList
  create_hierarchy

  # recreate ids to start from 0 instead of 1
  parameterFile=null
  commandFile=command.grid
  command=shift_grid_ids
  i=0;
  while [ $i -lt ${no_of_patches} ]
  do
    echo "$command ${patchNameList[$i]} -1" > $commandFile
    cat $commandFile
    ${run_commmand}
    check_error $? "change_grid_ids"
    i=$((i+1));
  done

fi
#=============================================================================

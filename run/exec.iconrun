#!/bin/ksh
#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# bindir and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
#
# directories definition
#
ICONDIR=${ICON_BASE_PATH}
RUNSCRIPTDIR=${ICONDIR}/run
HGRIDDIR=${ICONDIR}/grids
EXPDIR=${ICONDIR}/experiments/${EXPNAME}
# data directories
DATADIR=${ICONDIR}/data
#-----------------------------------------------------------------------------
#
# experiment directory, with plenty of space, create if new
#
if [ ! -d ${EXPDIR} ] ;  then
  mkdir -p ${EXPDIR}
fi
#
ls -ld ${EXPDIR}
if [ ! -d ${EXPDIR} ] ;  then
    mkdir ${EXPDIR}
#else
#   rm -rf ${EXPDIR}
#   mkdir  ${EXPDIR}
fi
ls -ld ${EXPDIR}
check_error $? "${EXPDIR} does not exist?"


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}
atmo_namelist=${atmo_namelist:="none"}
radiation_namelist=${radiation_namelist:="none"}
ocean_namelist=${ocean_namelist:="none"}
dummy_1_namelist=${dummy_1_namelist:="none"}
dummy_2_namelist=${dummy_2_namelist:="none"}
dummy_3_namelist=${dummy_3_namelist:="none"}
nullmodel_namelist=${nullmodel_namelist:="none"}

#-----------------------------------------------------------------------------
validate_component_run()
{
  echo "----------------------"
  echo "validate_component_run $1"
  if [ "x$(eval echo \$run_$1)" != "x" ] ; then
    return
  fi
  
  eval "run_$1"="false"
  if [ "$(eval echo \$$1_namelist)" = "none" ] ; then
    echo "----------------------"
    return
  fi

  eval "run_$1"="true"
  let no_of_models=${no_of_models}+1
  echo "----------------------"
  
}
#-----------------------------------------------------------------------------

let no_of_models=0

validate_component_run atmo
validate_component_run ocean
validate_component_run radiation
validate_component_run dummy_1
validate_component_run dummy_2
validate_component_run dummy_3
validate_component_run nullmodel

echo "no_of_models=$no_of_models"
#-----------------------------------------------------------------------------

atmo_min_rank=${atmo_min_rank:=0}
atmo_max_rank=${atmo_max_rank:=65535}
atmo_inc_rank=${atmo_inc_rank:=1}

ocean_min_rank=${ocean_min_rank:=0}
ocean_max_rank=${ocean_max_rank:=65535}
ocean_inc_rank=${ocean_inc_rank:=1}

radiation_min_rank=${radiation_min_rank:=0}
radiation_max_rank=${radiation_max_rank:=65535}
radiation_inc_rank=${radiation_inc_rank:=1}

nullmodel_min_rank=${nullmodel_min_rank:=0}
nullmodel_max_rank=${nullmodel_max_rank:=65535}
nullmodel_inc_rank=${nullmodel_inc_rank:=1}

#-----------------------------------------------------------------------------
#split the number of procs in two (or three) for each of the dummy component
if [ $no_of_models = 2 ] ; then
  dummy_1_min_rank=${dummy_1_min_rank:=0}
  dummy_1_max_rank=${dummy_1_max_rank:=`expr ${mpi_total_procs} / 2 - 1`}
  dummy_1_inc_rank=${dummy_1_inc_rank:=1}

  dummy_2_min_rank=${dummy_2_min_rank:=`expr ${dummy_1_max_rank} + 1`}
  dummy_2_max_rank=${dummy_2_max_rank:=`expr ${mpi_total_procs} - 1`}
  dummy_2_inc_rank=${dummy_2_inc_rank:=1}
else

  procs_per_model=`expr ${mpi_total_procs} / 3`

  dummy_1_min_rank=${dummy_1_min_rank:=0}
  dummy_1_max_rank=${dummy_1_max_rank:=`expr ${procs_per_model} - 1`}
  dummy_1_inc_rank=${dummy_1_inc_rank:=1}

  dummy_2_min_rank=${dummy_2_min_rank:=${procs_per_model}}
  dummy_2_max_rank=${dummy_2_max_rank:=`expr ${procs_per_model} + ${procs_per_model} - 1`}
  dummy_2_inc_rank=${dummy_2_inc_rank:=1}

  dummy_3_min_rank=${dummy_3_min_rank:=`expr ${dummy_2_max_rank} + 1`}
  dummy_3_max_rank=${dummy_3_max_rank:=`expr ${mpi_total_procs} - 1`}
  dummy_3_inc_rank=${dummy_3_inc_rank:=1}
fi

#-----------------------------------------------------------------------------


cp_atmo_files="false"
if [ $run_atmo = "true" ] ;  then 
  cp_atmo_files="true"
fi
if [ $run_radiation = "true" ] ;  then
  cp_atmo_files="true"
fi
if [ $run_dummy_1 = "true" ] ;  then
  cp_atmo_files="true"
fi

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#
# get grid files
#
atmo_grids="${atmo_dyn_grids} ${atmo_rad_grids}"
all_grids="${atmo_grids} ${ocean_grids}"
for gridfile in ${all_grids}; do
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  rm ${EXPDIR}/$gridfile
  ln -s ${HGRIDDIR}/${gridfile} ${EXPDIR}/${gridfile}  
done
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
if [ $cp_atmo_files = "true" ] ;  then
   # =======================================================
   #
   # model constants
   # ---------------
   cp -f ${DATADIR}/rrtmg_lw.nc           ${EXPDIR} # LW radiation constants
   cp -f ${DATADIR}/ECHAM6_CldOptProps.nc ${EXPDIR} # cloud optical properties
   
   # APE ozone
   if [ x$ozon_file != "x" ] ;  then
     cp -f ${DATADIR}/external/ape_ozone/$ozon_file ${EXPDIR}/o3_icon_DOM01.nc
   else
     cp -f ${DATADIR}/external/ape_ozone/ape_o3_R2B04_1Pa_spr0.90-cell.nc ${EXPDIR}/o3_icon_DOM01.nc
   fi
#   cp -f ${DATADIR}/external/ape_ozone/ape_o3_R2B04_hex_1Pa_c.nc ${EXPDIR}/o3_icon_DOM01.nc
#   check_error $? "cp -f ${DATADIR}/external/ape_ozone/ape_o3_R2B04_1Pa.nc ${EXPDIR}/o3_icon_DOM01.nc"

   #
   # =======================================================
   # vertical grid
   # -------------
   VGRIDDIR=${ICONDIR}/vertical_coord_tables
   if [[ $atmo_model_equations = 3 ]] ; then
      VGRIDNAME=atm_hyb_sz_${nlev}
      rm  ${EXPDIR}/${VGRIDNAME}
      ln -s ${VGRIDDIR}/${VGRIDNAME} ${EXPDIR}/${VGRIDNAME}
      warning $? "ln -s ${VGRIDDIR}/${VGRIDNAME} failed"
   else
     VGRIDNAME=atm_hyb_sp_${nlev}
     rm ${EXPDIR}/${VGRIDNAME}
     ln -s ${VGRIDDIR}/${VGRIDNAME} ${EXPDIR}/${VGRIDNAME}
     check_error $? "ln -s ${VGRIDDIR}/${VGRIDNAME}"
   fi
fi
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
if [[ $run_ocean = 'true' ]]; then
   # =======================================================
   #
   # provide netcdf file for reading ocean forcing fluxes
   # ----------------------------------------------------
   if [[ "x$iforc" = "x12" ]] ; then
     FLUXNAME=iconR${R}B0${B}-flux.nc
     # general filename
     OMIPNAME=omip4icon-R${R}B0${B}-annual.nc
     if [[ "x$iforc_len" = "x1" ]] ; then
       OMIPNAME=omip4icon-R${R}B0${B}-annual.nc
     # filename for 12 monthly means
     elif [[ "x$iforc_len" = "x12" ]] ; then
       OMIPNAME=omip4icon-R${R}B0${B}-monmean.nc
     fi
     rm ${EXPDIR}/${FLUXNAME}
     ln -s ${HGRIDDIR}/${OMIPNAME} ${EXPDIR}/${FLUXNAME}
     check_error $? "ln -s ${HGRIDDIR}/${OMIPNAME}"
   fi
   # =======================================================
   #
   # provide netcdf file for initialization of ocean prognostic variables
   # --------------------------------------------------------------------
   if [[ "x$init_oce" = "x1" ]] ; then
     PROGNAME=iconR${R}B0${B}-prog.nc
     OININAME=ts_phc_annual-iconR${R}B0${B}-L10x500m.nc
     rm ${EXPDIR}/${PROGNAME}
     ln -s ${HGRIDDIR}/${OININAME} ${EXPDIR}/${PROGNAME}
     check_error $? "ln -s ${HGRIDDIR}/${OININAME}"
   fi
   # =======================================================
   #
   # provide netcdf file for initialization of temp/sal relaxation
   # --------------------------------------------------------------------
   if [[ "x$init_relax" = "x1" ]] ; then
     RELAXNAME=iconR${R}B0${B}-relax.nc
     ORELNAME=ts_surf_annual-iconR${R}B0${B}-50m.nc
     rm ${EXPDIR}/${RELAXNAME}
     ln -s ${HGRIDDIR}/${ORELNAME} ${EXPDIR}/${RELAXNAME}
     check_error $? "ln -s ${HGRIDDIR}/${ORELNAME}"
   fi
   # =======================================================
   #
   # replace ocean grid file from pool set in experiment file above
   # --------------------------------------------------------------
   if [[ "x$USE_POOLD" = "xY" ]] ; then
     ls -l ${POOLDIR}/$OCEGRID
     check_error $? "${POOLDIR}/$OCEGRID does not exist."
     rm ${EXPDIR}/$gridfile
     cp ${POOLDIR}/$OCEGRID ${EXPDIR}/$gridfile
   fi
fi

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# get restart files
if  [ x$restart_from_folder != "x" ] ; then
  cp ${ICONDIR}/experiments/${restart_from_folder}/restart.info      ${EXPDIR}/restart.info
  ln -s ${ICONDIR}/experiments/${restart_from_folder}/restart_atm.nc ${EXPDIR}/restart_atm.nc
  ln -s ${ICONDIR}/experiments/${restart_from_folder}/restart_oce.nc ${EXPDIR}/restart_oce.nc
  restart=".true."
fi

if  [ x$restart_atmo_from != "x" ] ; then
  rm  ${EXPDIR}/restart_atm.nc
  ln -s ${ICONDIR}/experiments/${restart_from_folder}/${restart_atmo_from} ${EXPDIR}/restart_atm.nc
fi
if  [ x$restart_ocean_from != "x" ] ; then
  rm  ${EXPDIR}/restart_oce.nc
  ln -s ${ICONDIR}/experiments/${restart_from_folder}/${restart_ocean_from} ${EXPDIR}/restart_oce.nc
fi
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

cd ${EXPDIR}

#-----------------------------------------------------------------------------
# create master_namelist
master_namelist=icon_master.namelist
if [ x$end_date = x ]; then
cat > $master_namelist << EOF
&master_nml
 lrestart               = $restart
/
&time_nml
 ini_datetime_string = "$start_date"
 dt_restart          = $dt_restart
/
EOF
else
cat > $master_namelist << EOF
&master_nml
 lrestart               = $restart
/
&time_nml
 ini_datetime_string = "$start_date"
 end_datetime_string = "$end_date"
 dt_restart          = $dt_restart
/
EOF
fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
  
  if [ "x$(eval echo \$run_$1)" != "xtrue" ] ; then
    return
  fi
  
  model_namelist_filename="$(eval echo \$$1_namelist)"
  model_type=$2
  model_min_rank="$(eval echo \$$1_min_rank)"
  model_max_rank="$(eval echo \$$1_max_rank)"
  model_inc_rank="$(eval echo \$$1_inc_rank)"
  
cat >> $master_namelist << EOF
&master_model_nml
  model_name="$1"
  model_namelist_filename="$model_namelist_filename"
  model_restart_info_filename=""
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
/
EOF

#-----------
#get namelist
  if [ -f ${RUNSCRIPTDIR}/$model_namelist_filename ] ; then
    mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "cp -f ${RUNSCRIPTDIR}/$model_namelist_filename"
  else
    check_error 1 "${RUNSCRIPTDIR}/$model_namelist_filename does not exist"
  fi  

}
#-----------------------------------------------------------------------------

add_component_to_master_namelist nullmodel 0
add_component_to_master_namelist atmo      1
add_component_to_master_namelist ocean     2
add_component_to_master_namelist radiation 3
add_component_to_master_namelist dummy_1   99
add_component_to_master_namelist dummy_2   99
add_component_to_master_namelist dummy_3   99

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
#
#  get model
#
MODEL=${bindir}/control_model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#
# start experiment
#
cd ${EXPDIR}
#
date
${START} ${MODEL}
date
#
if [ -r finish.status ] ; then
  check_error 0 "${START} ${MODEL}"
else
  check_error -1 "${START} ${MODEL}"
fi
#
#-----------------------------------------------------------------------------
#
echo "============================"
echo "Script run successfully"
echo "============================"
#-----------------------------------------------------------------------------
cd $RUNSCRIPTDIR
# exit 0
#-----------------------------------------------------------------------------

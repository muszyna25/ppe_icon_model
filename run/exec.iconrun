#!/bin/ksh
#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# bindir and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
#
# directories definition
#
ICONDIR=${ICON_BASE_PATH}
RUNSCRIPTDIR=${ICONDIR}/run
HGRIDDIR=${ICONDIR}/grids
EXPDIR=${ICONDIR}/experiments/${EXPNAME}
# data directories
DATADIR=${ICONDIR}/data
#-----------------------------------------------------------------------------
# set up the model lists if they do not exist
# this works for subngle model runs
# for coupled runs the lists should be declared explicilty
if [ x$namelist_list = x ]; then
#  minrank_list=(        0           )
#  maxrank_list=(     65535          )
#  incrank_list=(        1           )
  minrank_list[0]=0
  maxrank_list[0]=65535
  incrank_list[0]=1
  if [ x$atmo_namelist != x ]; then
    # this is the atmo model
    namelist_list[0]="$atmo_namelist"
    modelname_list[0]="atmo"
    modeltype_list[0]=1
    run_atmo="true"
  elif [ x$ocean_namelist != x ]; then
    # this is the ocean model
    namelist_list[0]="$ocean_namelist"
    modelname_list[0]="ocean"
    modeltype_list[0]=2
  elif [ x$testbed_namelist != x ]; then
    # this is the testbed model
    namelist_list[0]="$testbed_namelist"
    modelname_list[0]="testbed"
    modeltype_list[0]=99
  else
    check_error 1 "No namelist is defined"
  fi 
fi

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
#
# experiment directory, with plenty of space, create if new
#
if [ ! -d ${EXPDIR} ] ;  then
  mkdir -p ${EXPDIR}
fi
#
ls -ld ${EXPDIR}
if [ ! -d ${EXPDIR} ] ;  then
    mkdir ${EXPDIR}
#else
#   rm -rf ${EXPDIR}
#   mkdir  ${EXPDIR}
fi
ls -ld ${EXPDIR}
check_error $? "${EXPDIR} does not exist?"


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}

#-----------------------------------------------------------------------------
# fill some checks

run_atmo=${run_atmo="false"}
if [ x$atmo_namelist != x ]; then
  run_atmo="true"
fi
run_ocean=${run_ocean="false"}
if [ x$ocean_namelist != x ]; then
  run_ocean="true"
fi

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#
# get grid files
#
#atmo_grids="${atmo_dyn_grids} ${atmo_rad_grids}"
# ocean grid provided below
#all_grids="${atmo_grids} ${ocean_grids}"
all_grids="${atmo_dyn_grids} ${atmo_rad_grids}"
for gridfile in ${all_grids}; do
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  rm ${EXPDIR}/$gridfile
  ln -s ${HGRIDDIR}/${gridfile} ${EXPDIR}/${gridfile}
  echo $division_method
  if [ x$division_method = x0 ] ; then
     name="`echo $gridfile | cut -d '.' -f1`".cell_domain_ids
     if [ -r ${HGRIDDIR}/$name ] ; then
       ln -s ${HGRIDDIR}/$name ${EXPDIR}/$name
     fi
  fi 
done
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
if [ $run_atmo = "true" ] ;  then
   # =======================================================
   #
   # model constants
   # ---------------
   cp -f ${DATADIR}/rrtmg_lw.nc           ${EXPDIR} # LW radiation constants
   cp -f ${DATADIR}/ECHAM6_CldOptProps.nc ${EXPDIR} # cloud optical properties
   
   # APE ozone
   if [ x$ozon_file != "x" ] ;  then
     cp -f ${DATADIR}/external/ape_ozone/$ozon_file ${EXPDIR}/o3_icon_DOM01.nc
   else
     cp -f ${DATADIR}/external/ape_ozone/ape_o3_R2B04_1Pa_spr0.90-cell.nc ${EXPDIR}/o3_icon_DOM01.nc
   fi
#   cp -f ${DATADIR}/external/ape_ozone/ape_o3_R2B04_hex_1Pa_c.nc ${EXPDIR}/o3_icon_DOM01.nc
#   check_error $? "cp -f ${DATADIR}/external/ape_ozone/ape_o3_R2B04_1Pa.nc ${EXPDIR}/o3_icon_DOM01.nc"

   #
   # =======================================================
   # vertical grid
   # -------------
   VGRIDDIR=${ICONDIR}/vertical_coord_tables
   if [[ $atmo_model_equations = 3 ]] ; then
      VGRIDNAME=atm_hyb_sz_${nlev}
      rm  ${EXPDIR}/${VGRIDNAME}
      ln -s ${VGRIDDIR}/${VGRIDNAME} ${EXPDIR}/${VGRIDNAME}
      warning $? "ln -s ${VGRIDDIR}/${VGRIDNAME} failed"
   else
     VGRIDNAME=atm_hyb_sp_${nlev}
     rm ${EXPDIR}/${VGRIDNAME}
     ln -s ${VGRIDDIR}/${VGRIDNAME} ${EXPDIR}/${VGRIDNAME}
     check_error $? "ln -s ${VGRIDDIR}/${VGRIDNAME}"
   fi
fi
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
if [[ $run_ocean = 'true' ]]; then

   # =======================================================
   #
   # Main pool directories to provide ocean input data:
   #   all files for ocean init/forcing from pool will be copied to $HGRIDDIR
   # --------------------------------------------------
   POOL_ICON=/pool/data/ICON
   POOL_GRID=${POOL_ICON}/ocean_data/ocean_grid
   POOL_FORC=${POOL_ICON}/ocean_data/ocean_forcing
   POOL_INIT=${POOL_ICON}/ocean_data/ocean_init

   # provide $HGRIDDIR since ocean model can be run without grid generator
   if [ ! -d ${HGRIDDIR} ] ;  then
     mkdir -p ${HGRIDDIR}
   fi
    
   # DWD systems: $POOL_ICON does not exist
   if [ "x$BB_SYSTEM" = "xhpc" -o "x$BB_SYSTEM" = "xnec" ] ; then
      LOC='othr'
   fi

   # =======================================================
   #
   # provide ocean grid file
   # -----------------------
   if [[ "x$LOC" = "xPOOL" ]] ; then
     OCEGRID=${POOL_GRID}/$ocean_grids
     ls -l $OCEGRID
     #check_error $? "$OCEGRID does not exist."
     if [ $? -eq 0 ]; then
       rm ${HGRIDDIR}/$ocean_grids
       cp -p $OCEGRID ${HGRIDDIR}/$ocean_grids
       chmod u+w ${HGRIDDIR}/$ocean_grids
     else
       echo "WARNING: $OCEGRID does not exist - proceed from local disk"
     fi
   fi
   # copy file to EXPDIR
   rm ${EXPDIR}/$ocean_grids
   ln -s ${HGRIDDIR}/$ocean_grids ${EXPDIR}/$ocean_grids
   check_error $? "ln -s ${HGRIDDIR}/$ocean_grids"

   # =======================================================
   #
   # provide netcdf file for reading ocean forcing fluxes
   # ----------------------------------------------------
   if [[ "x$iforc" = "x12" ]] ; then
     # filename on EXPDIR read by ocean model
     FLUXNAME=iconR${R}B0${B}-flux.nc

     # general filename: OMIP annual file
     if [[ "x$iforc_len" = "x1" ]] ; then
       FORCNAME=omip4icon-R${R}B0${B}-annual.nc
     # filename for OMIP 12 sets of monthly means
     elif [[ "x$iforc_len" = "x12" ]] ; then
       FORCNAME=omip4icon-R${R}B0${B}-monmean.nc
       # provide netcdf file for NCEP ocean forcing - length of 12 months for annual reading
       if [[ "x$iforc_type" = "x5" ]] ; then
         FORCNAME=ncep4icon_R${R}B0${B}.nc
       fi
     # filename for OMIP 365 sets of daily data
     elif [[ "x$iforc_len" = "x365" ]] ; then
       FORCNAME=omip4icon-R${R}B0${B}-daily.nc
     fi
     rm ${EXPDIR}/${FLUXNAME}

     # copy file from pool to grids directory $HGRIDDIR
     if [[ "x$LOC" = "xPOOL" ]] ; then
       FLUXFILE=${POOL_FORC}/$FORCNAME
       ls -l $FLUXFILE
       #check_error $? "$FLUXFILE does not exist."
       if [ $? -eq 0 ]; then
         rm ${HGRIDDIR}/$FORCNAME
         cp -p $FLUXFILE ${HGRIDDIR}/$FORCNAME
       else
         echo "WARNING: $FLUXFILE does not exist - proceed from local disk"
       fi
     fi
     # copy file to EXPDIR
     rm ${EXPDIR}/${FLUXNAME}
     ln -s ${HGRIDDIR}/${FORCNAME} ${EXPDIR}/${FLUXNAME}
     check_error $? "ln -s ${HGRIDDIR}/${FORCNAME}"
   fi

   # =======================================================
   #
   # provide netcdf file for initialization of ocean prognostic variables
   # --------------------------------------------------------------------
   if [[ "x$init_oce" = "x1" ]] ; then

     PROGNAME=iconR${R}B0${B}-prog.nc
     OININAME=ts_phc_annual-iconR${R}B0${B}-${init_oce_suff}

     # copy file from pool to grids directory $HGRIDDIR
     if [[ "x$LOC" = "xPOOL" ]] ; then
       INITFILE=${POOL_INIT}/$OININAME
       ls -l $INITFILE
       #check_error $? "$INITFILE does not exist."
       if [ $? -eq 0 ]; then
         rm ${HGRIDDIR}/$OININAME
         cp -p $INITFILE ${HGRIDDIR}/$OININAME
       else
         echo "WARNING: $INITFILE does not exist - proceed from local disk"
       fi
     fi

     # copy file to EXPDIR
     rm ${EXPDIR}/${PROGNAME}
     ln -s ${HGRIDDIR}/${OININAME} ${EXPDIR}/${PROGNAME}
     check_error $? "ln -s ${HGRIDDIR}/${OININAME}"

   fi
   # =======================================================
   #
   # provide netcdf file for initialization of temperature/salinity relaxation
   # -------------------------------------------------------------------------
   if [[ "x$init_relax" = "x1" ]] ; then

     RELAXNAME=iconR${R}B0${B}-relax.nc
     ORELNAME=ts_surf_annual-iconR${R}B0${B}-${init_rel_suff}

     # copy file from pool to grids directory $HGRIDDIR
     if [[ "x$LOC" = "xPOOL" ]] ; then
       ORELFILE=${POOL_INIT}/$ORELNAME
       ls -l $ORELFILE
       #check_error $? "$ORELFILE does not exist."
       if [ $? -eq 0 ]; then
         rm ${HGRIDDIR}/$ORELNAME
         cp -p $ORELFILE ${HGRIDDIR}/$ORELNAME
       else
         echo "WARNING: $ORELFILE does not exist - proceed from local disk"
       fi
     fi
     
     # copy file to EXPDIR
     rm ${EXPDIR}/${RELAXNAME}
     ln -s ${HGRIDDIR}/${ORELNAME} ${EXPDIR}/${RELAXNAME}
     check_error $? "ln -s ${HGRIDDIR}/${ORELNAME}"
     
   fi
fi

#-----------------------------------------------------------------------------

cd ${EXPDIR}

#-----------------------------------------------------------------------------
# get restart files
# try copying instead of linking
#
#if  [ x$restart_from_folder != "x" ] ; then
#  cp ${ICONDIR}/experiments/${restart_from_folder}/restart.info      ${EXPDIR}/restart.info
#  ln -s ${ICONDIR}/experiments/${restart_from_folder}/restart_atm.nc ${EXPDIR}/restart_atm.nc
#  ln -s ${ICONDIR}/experiments/${restart_from_folder}/restart_oce.nc ${EXPDIR}/restart_oce.nc
#fi

if  [ x$restart_atmo_from != "x" ] ; then
  rm -f restart_atm.nc
#  ln -s ${ICONDIR}/experiments/${restart_from_folder}/${restart_atmo_from} ${EXPDIR}/restart_atm.nc
  cp ${ICONDIR}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
  ln -s cp_restart_atm.nc restart_atm.nc
  cp ${ICONDIR}/experiments/${restart_from_folder}/restart.info .
  restart=".true."
fi
if  [ x$restart_ocean_from != "x" ] ; then
  rm -f restart_oce.nc
#  ln -s ${ICONDIR}/experiments/${restart_from_folder}/${restart_ocean_from} ${EXPDIR}/restart_oce.nc
  cp ${ICONDIR}/experiments/${restart_from_folder}/${restart_ocean_from} cp_restart_oce.nc
  ln -s cp_restart_oce.nc restart_oce.nc
  cp ${ICONDIR}/experiments/${restart_from_folder}/restart.info .
  restart=".true."
fi
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

#-----------------------------------------------------------------------------
# create master_namelist
master_namelist=icon_master.namelist
if [ x$end_date = x ]; then
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
/
&time_nml
 ini_datetime_string = "$start_date"
 dt_restart          = $dt_restart
/
EOF
else
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
/
&time_nml
 ini_datetime_string = "$start_date"
 end_datetime_string = "$end_date"
 dt_restart          = $dt_restart
/
EOF
fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
    
  model_namelist_filename="$1"
  model_name=$2
  model_type=$3
  model_min_rank=$4
  model_max_rank=$5
  model_inc_rank=$6
  
cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_restart_info_filename=""
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
/
EOF

#-----------
#get namelist
  if [ -f ${RUNSCRIPTDIR}/$model_namelist_filename ] ; then
    mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "cp -f ${RUNSCRIPTDIR}/$model_namelist_filename"
  else
    check_error 1 "${RUNSCRIPTDIR}/$model_namelist_filename does not exist"
  fi  

}
#-----------------------------------------------------------------------------


no_of_models=${#namelist_list[*]}
echo "no_of_models=$no_of_models"

j=0
while [ $j -lt ${no_of_models} ]
do
  add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]}
  j=`expr ${j} + 1`
done

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
#
#  get model
#
export MODEL=${bindir}/control_model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#
# start experiment
#
cd ${EXPDIR}

rm -f finish.status
#
#if [ x$target = "xblizzard" ] ; then
#  run_model
#else
  date
  ${START} ${MODEL}
  date
#fi
#
if [ -r finish.status ] ; then
  check_error 0 "${START} ${MODEL}"
else
  check_error -1 "${START} ${MODEL}"
fi
#
#-----------------------------------------------------------------------------
#
finish_status=`cat finish.status`
echo $finish_status
echo "============================"
echo "Script run successfully: $finish_status"
echo "============================"
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
namelist_list=""
#-----------------------------------------------------------------------------
# check if we have to restart, ie resubmit
#   Note: this is a different mechanism from checking the restart
if [ $finish_status = "RESTART" ] ; then
  echo "restart next experiment..."
  cd $RUNSCRIPTDIR
  this_script=$job_name
  mv $this_script $this_script.tmp
  echo  "restart=.true." > $this_script
  cat $this_script.tmp >> $this_script
  chmod +x $this_script
  $submit $this_script    
fi


#-----------------------------------------------------------------------------
# check if we test the restart mechanism
get_last_1_restart()
{
  model_restart_param=$1
  restart_list=`ls restart.*${model_restart_param}.nc`
  
  last_restart=""
  last_1_restart=""  
  for restart_file in $restart_list
  do
    last_1_restart=$last_restart
    last_restart=$restart_file

    echo $restart_file $last_restart $last_1_restart
  done  
}


restart_atmo_from=""
restart_ocean_from=""
if [ x$test_restart = "xtrue" ] ; then
  # follows a restart run in the same script
  # set up the restart parameters
  restart_from_folder=${EXPNAME}
  # get the previous from last rstart file for atmo
  get_last_1_restart "atm"
  if [ x$last_1_restart != x ] ; then
    restart_atmo_from=$last_1_restart
  fi
  get_last_1_restart "oce"
  if [ x$last_1_restart != x ] ; then
    restart_ocean_from=$last_1_restart
  fi
  
  EXPNAME=${EXPNAME}_restart
  test_restart="false"
fi

#-----------------------------------------------------------------------------

cd $RUNSCRIPTDIR

#-----------------------------------------------------------------------------

	
# exit 0
#-----------------------------------------------------------------------------

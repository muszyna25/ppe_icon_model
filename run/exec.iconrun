#!/bin/ksh
#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# bindir and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
#
# directories definition
#
DIR=$(pwd -P)
ICONDIR=${DIR%/*}
HGRIDDIR=${ICONDIR}/grids
EXPDIR=${ICONDIR}/experiments/${EXPNAME}
# data directories
DATADIR=${ICONDIR}/data
#-----------------------------------------------------------------------------
#
# experiment directory, with plenty of space, create if new
#
if [ ! -d ${EXPDIR} ]; then
  mkdir -p ${EXPDIR}
fi
#
ls -ld ${EXPDIR}
if [ ! -d ${EXPDIR} ]; then
    mkdir ${EXPDIR}
#else
#   rm -rf ${EXPDIR}
#   mkdir  ${EXPDIR}
fi
ls -ld ${EXPDIR}
check_error $? "${EXPDIR} does not exist?"


#-----------------------------------------------------------------------------
if [[ x$atmo_namelist != x ]]; then
  run_atmo=${run_atmo:=".true."}
fi

if [[ x$ocean_namelist != x ]]; then
  run_ocean=${run_ocean:=".true."}
fi

if [[ x$dummy_1_namelist != x ]]; then
  run_dummy_1=${run_dummy_1:=".true."}
fi

if [[ x$dummy_2_namelist != x ]]; then
  run_dummy_2=${run_dummy_2:=".true."}
fi
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#
# get grid files
#
atmo_grids="${atmo_dyn_grids} ${atmo_rad_grids}"
all_grids="${atmo_grids} ${ocean_grids}"
for gridfile in ${all_grids}; do
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  rm ${EXPDIR}/$gridfile
  ln -s ${HGRIDDIR}/${gridfile} ${EXPDIR}/${gridfile}  
done
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
if [[ $run_atmo = '.true.' ]]; then
   # =======================================================
   #
   # model constants
   # ---------------
   cp -f ${DATADIR}/rrtmg_lw.nc           ${EXPDIR} # LW radiation constants
   cp -f ${DATADIR}/ECHAM6_CldOptProps.nc ${EXPDIR} # cloud optical properties
   #
   # =======================================================
   # vertical grid
   # -------------
   VGRIDDIR=${ICONDIR}/vertical_coord_tables
   if [[ $atmo_model_equations = 3 ]] ; then
      VGRIDNAME=atm_hyb_sz_${nlev}
      rm  ${EXPDIR}/${VGRIDNAME}
      ln -s ${VGRIDDIR}/${VGRIDNAME} ${EXPDIR}/${VGRIDNAME}
      warning $? "ln -s ${VGRIDDIR}/${VGRIDNAME} failed"
   else
     VGRIDNAME=atm_hyb_sp_${nlev}
     rm ${EXPDIR}/${VGRIDNAME}
     ln -s ${VGRIDDIR}/${VGRIDNAME} ${EXPDIR}/${VGRIDNAME}
     check_error $? "ln -s ${VGRIDDIR}/${VGRIDNAME}"
   fi
   #
fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

cd ${EXPDIR}


restart=${restart:=".false."}
run_ocean=${run_ocean:=".false."}
run_atmo=${run_atmo:=".false"}
run_dummy_1=${run_dummy_1:=".false."}
run_dummy_2=${run_dummy_2:=".false."}
atmo_namelist=${atmo_namelist:="none"}
ocean_namelist=${ocean_namelist:="none"}
dummy_1_namelist=${dummy_1_namelist:="none"}
dummy_2_namelist=${dummy_2_namelist:="none"}

ocean_min_rank=${ocean_min_rank:=0}
ocean_max_rank=${ocean_max_rank:=65535}
ocean_inc_rank=${ocean_inc_rank:=1}
atmo_min_rank=${atmo_min_rank:=0}
atmo_max_rank=${atmo_max_rank:=65535}
atmo_inc_rank=${atmo_inc_rank:=1}

#-----------------------------------------------------------------------------
master_namelist=icon_master.namelist

cat > $master_namelist << EOF
&master_nml
 lrestart               = $restart
/
&time_nml
 ini_datetime_string = "$start_date"
 dt_restart          = $dt_restart
/
EOF
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# create master_model_nml
if [[ $run_atmo = '.true.' ]]; then
cat >> $master_namelist << EOF
&master_model_nml
  model_name="ATMO"
  model_namelist_filename="$atmo_namelist"
  model_restart_info_filename=""
  model_type=1
  model_min_rank=$atmo_min_rank
  model_max_rank=$atmo_max_rank
  model_inc_rank=$atmo_inc_rank
/
EOF
fi

if [[ $run_ocean = '.true.' ]]; then
cat >> $master_namelist << EOF
&master_model_nml
  model_name="OCEAN"
  model_namelist_filename="$ocean_namelist"
  model_restart_info_filename=""
  model_type=2
  model_min_rank=$ocean_min_rank
  model_max_rank=$ocean_max_rank
  model_inc_rank=$ocean_inc_rank
/
EOF
fi

#split the number of procs in two for each of the dummy component
dummy_1_min_rank=0
dummy_1_max_rank=`expr ${mpi_total_procs} / 2 - 1`
dummy_1_inc_rank=1
dummy_2_min_rank=`expr ${dummy_1_max_rank} + 1`
dummy_2_max_rank=`expr ${mpi_total_procs} - 1`
dummy_2_inc_rank=1


if [[ $run_dummy_1 = '.true.' ]]; then
cat >> $master_namelist << EOF
&master_model_nml
  model_name="dummy_1"
  model_namelist_filename="$dummy_1_namelist"
  model_restart_info_filename=""
  model_type=99
  model_min_rank=$dummy_1_min_rank
  model_max_rank=$dummy_1_max_rank
  model_inc_rank=$dummy_1_inc_rank
/
EOF
fi

if [[ $run_dummy_2 = '.true.' ]]; then
cat >> $master_namelist << EOF
&master_model_nml
  model_name="dummy_2"
  model_namelist_filename="$dummy_2_namelist"
  model_restart_info_filename=""
  model_type=99
  model_min_rank=$dummy_2_min_rank
  model_max_rank=$dummy_2_max_rank
  model_inc_rank=$dummy_2_inc_rank
/
EOF
fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# get namelist
#
if [[ x$atmo_namelist != xnone  && x$atmo_namelist != x ]] ; then
  if [[ -f ${DIR}/$atmo_namelist ]] ; then
    mv -f ${DIR}/$atmo_namelist ${EXPDIR}/$atmo_namelist
    check_error $? "cp -f ${DIR}/$atmo_namelist"
  else
    check_error 1 "${DIR}/$atmo_namelist does not exist"
  fi  
fi

if [[ x$ocean_namelist != xnone  && x$ocean_namelist != x ]] ; then
  if [[ -f ${DIR}/$ocean_namelist ]] ; then
    mv -f ${DIR}/$ocean_namelist ${EXPDIR}/$ocean_namelist
    check_error $? "mv -f ${DIR}/$ocean_namelist"
  else
    check_error 1 "${DIR}/$ocean_namelist does not exist"
  fi  
fi

if [[ x$dummy_1_namelist != xnone  && x$dummy_1_namelist != x ]] ; then
  if [[ -f ${DIR}/$dummy_1_namelist ]] ; then
    mv -f ${DIR}/$dummy_1_namelist ${EXPDIR}/$dummy_1_namelist
    check_error $? "mv -f ${DIR}/$dummy_1_namelist"
  else
    check_error 1 "${DIR}/$dummy_1_namelist does not exist"
  fi
fi

if [[ x$dummy_2_namelist != xnone  && x$dummy_2_namelist != x ]] ; then
  if [[ -f ${DIR}/$dummy_2_namelist ]] ; then
    mv -f ${DIR}/$dummy_2_namelist ${EXPDIR}/$dummy_2_namelist
    check_error $? "mv -f ${DIR}/$dummy_2_namelist"
  else
    check_error 1 "${DIR}/$dummy_2_namelist does not exist"
  fi
fi

#-----------------------------------------------------------------------------
#
# model
#
MODEL=${bindir}/control_model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#
# start experiment
#
cd ${EXPDIR}
#
${START} ${MODEL}
#
check_error $? "${START} ${MODEL}"
#
#-----------------------------------------------------------------------------
#
echo "============================"
echo "Script run successfully"
echo "============================"
exit 0
#-----------------------------------------------------------------------------

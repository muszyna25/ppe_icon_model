#-----------------------------------------------------------------------------
# Creation of atmosphere grids for ICON
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# absolute paths of directories
GRIDDIR=${basedir}/grids            # graphs, grids and patches
WRKDIR=$GRIDDIR                     # work directory
# the work directory will be created, if not already there
if [ ! -d $WRKDIR ]; then
    mkdir -p $WRKDIR
fi
cd $WRKDIR
#-----------------------------------------------------------------------------


if [[ "x$target" = "xmpipc" ]] ; then
  if [[ "x$compiler" = "xnag" ]]; then
    echo "Disabled for ${compiler}."
    check_error 0 "create_global_grids"
    exit 0    
  fi
else  
  if [[ "x$compiler" = "xnag" || "x$compiler" = "xpgi" ]]; then
    echo "Disabled for ${compiler}. Copying grids from buildbot.grids."
    cp  ../../../../buildbot.grids/* .
    check_error 0 "create_global_grids"
    exit 0
  fi
fi
#-----------------------------------------------------------------------------

commandFile=command.grid
run_commmand="$bindir/grid_command"

#-----------------------------------------------------------------------------
# ICON grid generator namelist parameters
#
# For a complete list see Namelist_overview and Namelist_overview.pdf
#
# nroot       =  Number of sections into which the edges of the original 
#                icosahedron are divided in the initial refinement step.
#                (icosahedron = "grid -1" --> "nroot" grid = grid "0")
#                
# grid_levels =  Number of refinement steps applying edge bisection,
#                follows the initial "nroot" refinement step.
#                (grid "0" --> grid "1" --> ... --> grid "grid_levels")
#
# itype_optimize grid optimization method applied from grid level 1 onward.
#                i | optimization    | suffix fo grid output file
#                ------------------------------------------------
#                0 | none            | noo
#                1 | Heikes Randall  | hro
#                4 | spring dynamics | spr
#
# beta_spring = Tuning parameter for spring dynamics to be chosen in the 
#               range [0.9,1.1]. Weights the target length between the
#               grid points.
#
#-----------------------------------------------------------------------------
# First generate graphs
R=2    # nroot (the first dissection will be a bisection)
B=6    # highest grid level to reach (number of consequent bisections)
maxlev_optim=6  # highest grid level to apply optimizations

cat > NAMELIST_GRAPH << EOF
&graph_ini 
  nroot       = ${R}
  grid_levels = ${B}
/
EOF

echo global_graph_generator null > $commandFile
${start} ${run_commmand}
check_error $? "global_graph_generator"
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Generate unoptimized grids
# cat > NAMELIST_GRID << EOF
# &grid_ini
#   nroot       = ${R}
#   grid_levels = ${B}
# /
# &grid_options
#   itype_optimize = 0
# /
# EOF
# 
# echo global_grid_generator null > $commandFile
# ${start} ${bindir}/grid_command
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# delete existing global grid files
rm iconR${R}B0?-grid.nc
rm iconR${R}B0?-grid_spr0.90_M?.nc
rm iconR${R}B0?-grid_spr0.90.nc


#-----------------------------------------------------------------------------
# Generate grids using the spring dynamics optimization
cat > NAMELIST_GRID << EOF
&grid_ini
  nroot       = ${R}
  grid_levels = ${B}
/
&grid_options
  itype_optimize = 4     ! 1 = Heikes-Randall, 4 = spring dynamics
  maxlev_optim = $maxlev_optim       ! the maximum level to optimize
/
EOF

echo global_grid_generator null > $commandFile
${start} ${run_commmand}
check_error $? "global_grid_generator"
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Generate grids using the Heikes Randall optimization
# cat > NAMELIST_GRID << EOF
# &grid_ini
#   nroot       = ${R}
#   grid_levels = ${maxlev_optim}
# /
# &grid_options
#   itype_optimize = 1     ! 1 = Heikes-Randall, 4 = spring dynamics
# /
# EOF
# 
# echo global_grid_generator null > $commandFile
# ${start} ${run_commmand}
# check_error $? "global_grid_generator"
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# copy spring dynamics grids to standard grids
mv iconR${R}B0${maxlev_optim}-grid_spr0.90_M$maxlev_optim.nc iconR${R}B0${maxlev_optim}-grid_spr0.90.nc
check_error $? "mv iconR${R}B0${maxlev_optim}-grid_spr0.90_M$maxlev_optim.nc iconR${R}B0${maxlev_optim}-grid_spr0.90.nc"
# ln -s iconR${R}B0${maxlev_optim}-grid_spr0.90.nc iconR${R}B0${maxlev_optim}-grid_spr0.90_M$maxlev_optim.nc 
check_error $? "mv ln -s iconR${R}B0${maxlev_optim}-grid_spr0.90.nc iconR${R}B0${maxlev_optim}-grid_spr0.90_M$maxlev_optim.nc"
level=1;
while [[ $level -le $maxlev_optim ]] ; do
    ln -s iconR${R}B0${level}-grid_spr0.90.nc iconR${R}B0${level}-grid.nc
    check_error $? "ln -s iconR${R}B0${level}-grid_spr0.90.nc iconR${R}B0${level}-grid.nc"
    ((level=$level+1))
done
while [[ $level -le $B ]] ; do
    ln -s iconR${R}B0${level}-grid_spr0.90_M$maxlev_optim.nc iconR${R}B0${level}-grid.nc
    check_error $? "ln -s iconR${R}B0${level}-grid_spr0.90_M$maxlev_optim.nc iconR${R}B0${level}-grid.nc"
    ((level=$level+1))
done

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Next the patches will be created.
# If the pathes are not needed then uncomment the next exit command
#
#exit
#
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#
# ICON prepare_gridref namelist
#
# Parameter overview:
#
# grid_root: Number of root bisections
#
# start_lev: Grid level of global domain
#
# n_dom:     Total number of model domains (including the global one)
#
# parent_id: List of parent domain ID's (starts at first nested domain,
#            which has ID=2)
#
# l_circ:    true = circular subdomains, false = rectangular (lat/lon) subdomains
#
# l_rotate:  true: rotate center point into equator in case of l_circ=false
#            this yields truly rectangular subdomains, whereas subdomains
#            are conical otherwise because of the convergence of meridians
#
# NOTE:      For subdomains crossing a pole, either l_circ=true or l_rotate=true
#            is required
#
# l_plot:    true: Generates GMT files for domain configuration
#
# NOTE:      The following parameters have to be specified for each nested
#            domain!
#
# radius:    radius (deg) of nested domains  (for l_circ=true)
#
# center_lon: Center longitude of nested domains
#
# center_lon: Center latitude of nested domains
#
# hwidth_lon: half-width longitude of nested domains (for l_circ=false)
#
# hwidth_lat: half-width latitude of nested domains (for l_circ=false)
#
#-----------------------------------------------------------------------------
# suffix of grid files which specifies optimization type
# (without optimization leave empty)
#OPTFIX=spr0.90_M4
# NOTE: _M4 means that maxlev_optim = 4 has to be set in the grid generator
# maxlev_optim is not needed for Heikes-Randall optimization
#
#-----------------------------------------------------------------------------
# Create plots of domain configuration
PLOTS=.false.
#-----------------------------------------------------------------------------
#
cat > NAMELIST_GRIDREF << EOF
&gridref_ini 
  grid_root  = 2
  start_lev  = 4
  n_dom      = 2
  parent_id  = 1,
  l_circ     = .true.
  l_rotate   = .true.
  l_plot     = .true.
  radius     =  30.,
  center_lon =  -90.,
  center_lat =  40.,
  hwidth_lon =  55.,
  hwidth_lat =  55.,
  bdy_indexing_depth = 14
/
EOF
#
#-----------------------------------------------------------------------------
#
rm -f cells*.gmt
#
#
echo global_grid_refine null > $commandFile
${start} ${run_commmand}
check_error $? "global_grid_refine"
#
#if [ ${PLOTS} == .true. ] ; then
#  ${basedir}/scripts/gmt_scripts/plot_model_domains
#fi
#
#-----------------------------------------------------------------------------
# some clean-up
rm iconR2B0?-graph.nc
rm iconR2B0?-statistics_*
#-----------------------------------------------------------------------------
#
exit 0
#
#-----------------------------------------------------------------------------

#!/bin/ksh
#=============================================================================
#=============================================================================
#
# ICON run script. Created by ./config/make_target_runscript
# target machine is mpipc
# target use_compiler is gcc
# with mpi=no
# with openmp=no
# memory_model=default
# submit with 
# 
#=============================================================================
set -x
#-----------------------------------------------------------------------------
check_error()
{
    # Check if the first parameter (return status) is not OK
    # Arguments:
    #   $1 = error status: 0 = OK, not 0 = ERROR
    #   $2 = error message

    if [ "${STATUS_FILE}" = "" ]
    then
      STATUS_FILE=${basedir}/.status.file
    fi
    
    echo "$1" > ${STATUS_FILE}
    echo "$1" > ${basedir}/run/${job_name}.status

    if [ $1 != 0 ] 
    then
        echo "QSUBW_ERROR: JOB_%HOSTNAME%_%PID%: RC = "
        echo "check_error()"
        echo "   ERROR : $2"
        exit $1
    fi

}

warning()
{
    # Warning if the first parameter (return status) is not OK
    # Arguments:
    #   $1 = error status: 0 = OK, not 0 = ERROR
    #   $2 = error message
    if [ $1 != 0 ]
    then
        echo "   WARNING : $2"
    fi
}

#-----------------------------------------------------------------------------
# target parameters
# ----------------------------
site="zmaw.de"
target="mpipc"
compiler="gcc"
loadmodule="gcc/4.5.2 ncl/5.2.1-bin "
job_name="exp.sl_lsmfl.run"
# ----------------------------
# restart sepicifics
# ----------------------------
export F_NORCW=65535
# ----------------------------
nproma=64
#-----------------------------------------------------------------------------
# MPI variables
# ----------------------------
mpi_root=
no_of_nodes=1
mpi_procs=1
mpi_total_procs=1
start=""
START="$start"
# ----------------------------
# openmp environment variables
# ----------------------------
export OMP_NUM_THREADS=1
export ICON_THREADS=1
export OMP_SCHEDULE="static"
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=200M
#-----------------------------------------------------------------------------
# absolute paths of directories
calldir=$(pwd)
# cd $(dirname $0)
thisdir=$(pwd)
basedir=${thisdir%/*}                   # determine base directory
 bindir="${basedir}/build/x86_64-unknown-linux-gnu/bin"   # binaries
 BUILDDIR=build/x86_64-unknown-linux-gnu
 export ICON_BASE_PATH=$basedir
#bindir="${basedir}/build/i686-pc-linux-gnu/bin"   # binaries
#BUILDDIR=build/i686-pc-linux-gnu
#export ICON_BASE_PATH=$basedir
#-----------------------------------------------------------------------------
# load ../setting if exists  
if [ -a ../setting ]
then
  echo "Load Setting"
  . ../setting
fi
#-----------------------------------------------------------------------------
#=============================================================================
# load profile
if [ -a  /client/etc/profile.zmaw ] ; then
. /client/etc/profile.zmaw
#=============================================================================
#=============================================================================
# load modules
module purge
module load "$loadmodule"
module list
#=============================================================================
fi
#=============================================================================
export LD_LIBRARY_PATH=/sw/lenny-x64/netcdf-4.1.1-static-gcc45/lib:$LD_LIBRARY_PATH
#=============================================================================
#EXPNAME=sl_lsmfl
# EXPNAME=sl_xtst2
EXPNAME=Channel_1
#=============================================================================
#----------------------------------
ulimit -s unlimited
#----------------------------------
#=============================================================================
#
# This section of the run script containes the specifications of the ocean experiment.
# The specifications are passed by namelist to the program.
# For a complete list see Namelist_overview.pdf
#
# Default EXPNAME is the suffix of this script after "exp."
#
# Stephan Lorenz, MPI-M, 2011-01-26
#
#-----------------------------------------------------------------------------
#
# Preliminary test phase: run on specific systems and compiler only
#  - 2011-01-31: mpipc/tornado/squall - all compilers
#  - 2011-03-03: blizzard serial run included
#  - 2011-03-04: error test
if [ -z "$BB_SYSTEM" ]
then
  echo " ===== (no buildbot) ======="
  echo " Run ocean testcase $EXPNAME"
  echo " ==========================="
else
  if [ "$BB_SYSTEM" == "mpipc" -o "$BB_SYSTEM" == "squall" -o "$BB_SYSTEM" == "tornado" ]
  then 
# if [ "$BB_SYSTEM" == "mpipc" -o "$BB_SYSTEM" == "squall" -o "$BB_SYSTEM" == "tornado" -o [ "$BB_SYSTEM" == "blizzard" -a "$BB_SLAVE" == "blizz_nMnO" ] ]
    echo " ================================================="
    echo " Run ocean testcase $EXPNAME on BB_SLAVE=$BB_SLAVE"
    echo " ================================================="
  else
    if [ "$BB_SYSTEM" == "blizzard" -a "$BB_SLAVE" == "blizz_nMnO" ] 
    then
      echo " ================================================="
      echo " Run ocean testcase $EXPNAME on BB_SLAVE=$BB_SLAVE"
      echo " ================================================="
    else
      echo " ========================================================="
      echo " No ocean testcase is run on BB_SLAVE=$BB_SLAVE - exit now"
      echo " ========================================================="
      exit 0
    fi
  fi
fi

#-----------------------------------------------------------------------------
#
# Basic specifications of the simulation
# --------------------------------------
#
# These variables are set in the header section of the completed run script:
#
# EXPNAME = experiment name
# NPROMA  = array blocking length / inner loop length
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
# The following values must be set here as shell variables so that they can be used
# also in the executing section of the completed run script
#
#-----------------------------------------------------------------------------
# the namelist filename
ocean_namelist=NAMELIST_${EXPNAME}
#
#-----------------------------------------------------------------------------
# global resolution
R=2   # nroot
B=4   # number of bisections applied
#
#-----------------------------------------------------------------------------
# ocean initialization (init_oce=1) needs an additional file for prognostic variables
init_oce=0     # 1: use ocean initialization file; 0: init with constants or analytically
# prognostic ocean initialization files ust be provided and named as
# $HGRIDDIR/ts_phc_season-iconR${R}B0{B}-L11.nc
#
#-----------------------------------------------------------------------------
# ocean forcing = 12 needs an additional flux file 
iforc=11
iforc_omip=2   # type of OMIP forcing to read: 1 = u/v-stress;     2 = full 12 OMIP datasets
iforc_len=12   # length of forcing dataset:   12 = monthly data; 366 = daily data
# flux files must be provided and named as as
# $HGRIDDIR/omip4icon-R${R}B0{B}-monmean.nc
#
#-----------------------------------------------------------------------------
# global timing
start_date="2000-03-01T00:00:00Z"
#
#-----------------------------------------------------------------------------
# model timing
dtime=1800           # ocean model timestep [s]
ndays=30        #3650           # ocean model run in days
dt_data=86400.       #21600  ocean model output interval [s]
ndays_file=4000      # new output file generation interval [days]
ndays_checkp=360    #180      # write restart file interval [days]
ndays_restart=4000    # stop model for restart [days]
#
#-----------------------------------------------------------------------------
# calculate model timesteps using $ndays
nsteps=`expr ${ndays} \* 86400 / ${dtime}` 
#nsteps=3
# diagnostic output (not in ocean model)
dt_diag=`expr 4 \* 3600 `    #  output each 4 hours
dt_file=`expr ${ndays_file} \* 86400`
dt_checkpoint=`expr ${ndays_checkp} \* 86400`
dt_restart=`expr ${ndays_restart} \* 86400`
#
#-----------------------------------------------------------------------------
# model parameters
ocean_model_equations=-1 # equation system
#                      0=shallow water model
#                     -1=hydrost. ocean
#
#-----------------------------------------------------------------------------
# the grid files
 USE_BASIN="Y"      # "Y": ocean horizontal gridfile base is "bas0-60N"
# USE_AQUAP="Y"      # "Y": ocean horizontal gridfile base is "aqua_planet"
# USE_FLATB="Y"      # "Y": ocean horizontal gridfile base is "etopo40_flat"
#  USE_BATHY="Y"      # "Y": ocean horizontal gridfile base is "etopo40_planet"
# USE_POOLD="Y"      # "Y": overwrite ocean gridfile from pool
#-----------------------------------------------------------------------------
if [ "x$USE_FLATB" == "xY"  ] ; then
  grid_ext="etopo40_flat"
# USE_POOLD="Y"
elif [ "x$USE_BATHY" == "xY"  ] ; then
  grid_ext="etopo40_planet"
# USE_POOLD="Y"
elif [ "x$USE_AQUAP" == "xY"  ] ; then
  grid_ext="aqua_planet"
elif [ "x$USE_BASIN" == "xY"  ] ; then
# grid_ext="bas10-80N"
  grid_ext="bas0-60N"
else
  echo " No ocean topography file chosen - exit now"
  exit 1
fi
#ocean_grids="iconR${R}B0${B}-ocean_${grid_ext}.nc"
#ocean_grids="iconR2B04-ocean_aqua_planet.nc"
#ocean_grids="ocegridR2B04.cde3.3.planet.nc"
ocean_grids="iconR2B04-ocean_chan-45N.nc"
#-----------------------------------------------------------------------------
# 
#  USE_POOLD="Y"      # "Y": ocean gridfile is read from $POOLDIR/$OCEGRID
if [ "x$USE_POOLD" == "xY" ] ; then
   POOLDIR="/pool/data/ICON/grids"
   if [ "x$USE_FLATB" == "xY" ] ; then
   # OCEGRID="ocegridR${R}B0${B}.cde2.flat.nc"
   # OCEGRID="ocegridR${R}B0${B}.cde3.1.flat.nc"
     OCEGRID="ocegridR${R}B0${B}.cde3.3.flat.nc"
   fi
   if [ "x$USE_BATHY" == "xY" ] ; then
   # OCEGRID="ocegridR${R}B0${B}.cde2.planet.nc"
   # OCEGRID="ocegridR${R}B0${B}.cde3.1.planet.nc"
     OCEGRID="ocegridR${R}B0${B}.cde3.3.planet.nc"
   fi
   # other ocean grid files can be added here
fi
#
#
#ocean_grids="ocegridR2B04.cde3.3.planet.nc"
ocean_grids="iconR2B04-ocean_chan-45N.nc"
# ocean_grids="iconR2B04-ocean_aqua_planet.nc"
#-----------------------------------------------------------------------------
#
# write ICON namelist parameters
# ------------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf
#
cat > ${ocean_namelist} << EOF
!
&parallel_nml
 nproma         = ${nproma}
 p_test_run     = .false.
 l_test_openmp  = .false.
 l_log_checks   = .false.
/
&grid_nml
 cell_type = 3            ! triangular cells
 dynamics_grid_filename = "${ocean_grids}",
/
&run_nml
 nsteps      = ${nsteps}    ! number of steps length of run
 dtime       = ${dtime}     ! [s] timestep in seconds
 msg_level   = 10           ! detailed report during integration
/
&dynamics_nml
 iequations  = ${ocean_model_equations}       ! -1: hydrost. ocean model
/
&extpar_nml
 itopo       = 0                 ! read external ocean data from gridfile
/
&octst_nml
  i_dbg_oce=1                    ! initialize MIN/MAX  debug output via mo_index_oce
  i_dbg_inx=0                    ! initialize one cell debug output via mo_index_oce
  str_proc_tst = 'all' 'abt', 'vel', 'dif', 'trc', 'bul', '   ', '   ', '   ', '   '
                                 ! define strings for processes to be printed out in debug mode
  rlat_in = 50.0 rlon_in = -30.0 ! lat/lon-location of one cell debug output
  h_val=1.0 t_val=1.0            ! initial values for elevation and temperature at one cell
/
&ocean_dynamics_nml
n_zlev             =   10      ! number of vertical levels and (dzlev_m) thicknesses
! 20 unevenly spaced levels used by MITGCM global ocean model example - reduced at bottom to 5400m
! dzlev_m(1:20)      =   50.0,   50.0,   55.0,   60.0,   65.0,   70.0,   80.0,   95.0,  120.0,  155.0,
!                       200.0,  260.0,  320.0,  400.0,  480.0,  540.0,  600.0,  600.0,  600.0,  600.0
! 20 unevenly spaced levels by Helmuth for MPIOM/GR60, limited to 700m at bottom
 !dzlev_m(1:20)      =   20.0,   20.0,   20.0,   30.0,   40.0,   50.0,   70.0,   90.0,  120.0,  150.0,
 !                      180.0,  210.0,  250.0,  300.0,  400.0,  500.0,  600.0,  700.0,  700.0,  700.0
!  n_zlev             =   20      ! number of vertical levels and (dzlev_m) thicknesses
  dzlev_m(1:20)      =   50.0,  100.0,  200.0,  300.0,  450.0,  600.0,  800.0, 1000.0, 1000.0, 1000.0,
                       1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0
! 20 evenly spaced levels beginning with 500m depth
!dzlev_m(1:20)      =  500.0,  500.0,  500.0,  500.0,  500.0,  500.0,  500.0,  500.0,  500.0,  500.0,
!                     200.0  200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0
  iswm_oce           =    0      ! switch for one layer shallow water model (iswm_oce=1) or 3-d
  idisc_scheme       =    1      ! 1=mimetic discretization, 2=rbf discretization
  l_inverse_flip_flop= .FALSE.   ! within mimetic discretization:
                                 ! TRUE : full scalar product (slow)
                                 ! FALSE: reduced scalarproduct variant (fast and default)
  l_rigid_lid        = .FALSE.   ! TRUE : use rigid lid as upper boundary condition 
                                 ! FALSE: use the free surface dynamics
  ab_beta            =    0.6    ! parameter for Adam-Bashforth time-stepping
  ab_gam             =   0.6    ! parameter for Adam-Bashforth time-stepping
  solver_tolerance   = 1.0E-6
  i_bc_veloc_lateral =    0      ! Boundary condition for normal velocity for lateral walls
  i_bc_veloc_top     =    1      ! Boundary condition for normal velocity for ocean top
  i_bc_veloc_bot     =    1      ! Boundary condition for normal velocity for ocean bottom
  basin_center_lat   =   -45.0    ! lat-lon coordinate of basin center, used 
  basin_center_lon   =    0.0    ! in (non-global) basin configuration such as the Stommel-type tests
  basin_width_deg    =   180.0    ! basin extension in x-direction, units are degrees
  basin_height_deg   =   15.0    ! basin extension in y-direction, units are degrees
  coriolis_type      =    1      ! 0=zero Coriolis, the non-rotating case
                                 ! 1=full varying Coriolis
                                 ! 2=beta-plane (linear) approximation to Coriolis
                                 ! 3=f-plane (constant) approximation to Coriolis
                                 ! IMPORTANT: SOME TESTCASES REQUIRE SPECIFIC SETTINGS: 
                                 !  for Stommel-type basin (2D- and 3D, testcase 27 and/or 30) select
                                 !  f- or beta-plane.
  expl_vertical_velocity_diff = 1  ! 0=explicit, 1 = implicit  
  expl_vertical_tracer_diff   = 1  ! 0=explicit, 1 = implicit
/
&ocean_physics_nml
  no_tracer          =    1      ! tracer-transport: 0=no transport, 1=temperature, 2=temp. and salinity
  EOS_TYPE           =    1      ! 1=linear EOS
                                 ! 2= (nonlinear) EOS from MPI-OM 
                                 ! 3= not recommended: (nonlinear) Jacket-McDoudgall density-formulation
  k_veloc_h          =  2.0E+4 ! 1.5E+5   ! [m2/s] horizontal viscosity coefficient for velocity
  k_veloc_v          = 1.0E-3    ! [m/s]  vertical viscosity coefficient for velocity
  MAX_VERT_DIFF_VELOC=    1.0    ! max diffusion coeff, used in impl.vert.velocity diffusion, if stabil. crit.is met
  k_pot_temp_h       = 1.0E+3    ! [m2/s] horizontal viscosity coefficient for temperature
  k_pot_temp_v       = 3.0E-5    ! [m/s]  vertical viscosity coefficient for temperature
  k_sal_h            = 1.0E+3    ! [m2/s] horizontal viscosity coefficient for salinity
  k_sal_v            = 3.0E-5    ! [m/s]  vertical viscosity coefficient for salinity
  MAX_VERT_DIFF_TRAC = 3.0E-0    ! max diffusion coeff, used in impl.vert.tracer diffusion, if stability crit.is met
  HORZ_VELOC_DIFF_TYPE =  1      ! 0=no horizontal diffusion
                                 ! 1= constant Laplacian viscosity coefficient given in namelist (k_veloc_h)
                                 ! 2= constant Laplacian viscosity coefficient determined by requirement to
                                 !    have at least one gridpoint in boundary layer. The namelist value is overwritten.
                                 ! 3= spatially variable Laplacian viscosity coefficient determined by requirement to
                                 !    have at least one gridpoint in boundary layer. The namelist value is overwritten.
  CWA                = 0.5E-3    ! Tuning parameters for vertical mixing of tracer and velocity
  CWT                = 0.5E-3    ! Set to standard values
  bottom_drag_coeff  =    0.0025 ! Chezy coefficient for bottom friction
  wstress_coeff      =    0.3    ! wind stress coefficient for top boundary forcing
/
&ocean_forcing_and_init_nml
  iforc_oce          =  ${iforc}  ! ocean forcing:
                                 ! NO_FORCING                 = 10
                                 ! ANALYT_FORC                = 11  - dependent on testcase
                                 ! FORCING_FROM_FILE_FLUX     = 12  - OMIP type forcing
                                 ! FORCING_FROM_FILE_FIELD    = 13  - not yet
                                 ! FORCING_FROM_COUPLED_FLUX  = 14  - not yet
                                 ! FORCING_FROM_COUPLED_FIELD = 15  - not yet
  iforc_omip         = ${iforc_omip}  ! type of ocean forcing, see above
  iforc_len          = ${iforc_len}   ! length of ocean forcing data set, see above
  iforc_stat_oce     =    3      ! stationary (wind) forcing for iforc_oce=11 only:
                                 ! 1=locally varying u,v (testcase 27, 29)
                                 ! 2=varying u with latitude for basin using basin_width_deg
                                 ! 3=varying u with latitude globally
  init_oce_prog      = ${init_oce}    ! read ocean initialization file, see above
  itestcase_oce      =   51      ! 25=shallow-water-Laeuter-Test; 26=shallow-water-Williamson test5;
                                 ! 30=3D-multilayer Stommel; 31=3D-gravity wave
                                 ! 32=Multilayer Munk-Gyre test (following Sergey Danilov)
                                 ! 33=Collapsing density front, requires realistic lsm and topography
                                 ! 34=Adjusting density front in an ocean basin
                                 ! 40=global temperature initialization for wind and temperature forcing tests
                                 ! 43=Collapsing density front at first level only with smaller amplitude (global)   
                                 !45=T initfrom horizontally uniform vertical profile, optionally also S.
                                 !51=channel flow
  idiag_oce          =    1      ! 0: no diagnostics; 1: write diagnostics to stderr
  temperature_relaxation= 1      ! 1=switched on for some testcases only
                                 ! 2=read 2m-temperature data for relaxation from bulk (3: copy SST on omip-T)
relaxation_param   =    3.0    ! strength of 2-dim relaxation for temperature (months)
                                              ! this value is divided by number of seconds per month (=30*24*3600)
  irelax_2d_S        =    0      ! 2-dim relaxation of salinity (0: no relax) 1-2: not yet used
                                            ! 3: use initial S read with init_oce=1
  relax_2d_mon_S     =    3.0    ! strength of 2-dim relaxation for salinity (months)
  irelax_3d_T        =    0      ! 3-dim relaxation of temperature (0: no relax) 1-2: not yet used
                                            ! 3: use initial T read with init_oce=1
  relax_3d_mon_T     =    3.0    ! strength of 3-dim relaxation for temperature (months)
  irelax_3d_S        =    0      ! 3-dim relaxation of salinity (0: no relax) 1-2: not yet used
                                 ! 3: use initial S read with init_oce=1
  relax_3d_mon_S     =    1.0    ! strength of 3-dim relaxation for salinity (months)


/
&io_nml
 out_expname   = '${EXPNAME}'
 dt_data       = ${dt_data}
 dt_file       = ${dt_file}
 dt_checkpoint = ${dt_checkpoint}
 lkeep_in_sync = .TRUE.          ! sync after each timestep
/
EOF
#-----------------------------------------------------------------------------
#!/bin/ksh
#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# bindir and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
#
# directories definition
#
DIR=$(pwd -P)
ICONDIR=${DIR%/*}
HGRIDDIR=${ICONDIR}/grids
EXPDIR=${ICONDIR}/experiments/${EXPNAME}
# data directories
DATADIR=${ICONDIR}/data
#-----------------------------------------------------------------------------
#
# experiment directory, with plenty of space, create if new
#
if [ ! -d ${EXPDIR} ] ;  then
  mkdir -p ${EXPDIR}
fi
#
ls -ld ${EXPDIR}
if [ ! -d ${EXPDIR} ] ;  then
    mkdir ${EXPDIR}
#else
#   rm -rf ${EXPDIR}
#   mkdir  ${EXPDIR}
fi
ls -ld ${EXPDIR}
check_error $? "${EXPDIR} does not exist?"


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}
atmo_namelist=${atmo_namelist:="none"}
radiation_namelist=${radiation_namelist:="none"}
ocean_namelist=${ocean_namelist:="none"}
dummy_1_namelist=${dummy_1_namelist:="none"}
dummy_2_namelist=${dummy_2_namelist:="none"}
dummy_3_namelist=${dummy_3_namelist:="none"}

#-----------------------------------------------------------------------------
validate_component_run()
{
  echo "----------------------"
  echo "validate_component_run $1"
  if [ "x$(eval echo \$run_$1)" != "x" ] ; then
    return
  fi
  
  eval "run_$1"="false"
  if [ "$(eval echo \$$1_namelist)" = "none" ] ; then
    echo "----------------------"
    return
  fi

  eval "run_$1"="true"
  let no_of_models=${no_of_models}+1
  echo "----------------------"
  
}
#-----------------------------------------------------------------------------

let no_of_models=0

validate_component_run atmo
validate_component_run ocean
validate_component_run radiation
validate_component_run dummy_1
validate_component_run dummy_2
validate_component_run dummy_3

echo "no_of_models=$no_of_models"
#-----------------------------------------------------------------------------

atmo_min_rank=${atmo_min_rank:=0}
atmo_max_rank=${atmo_max_rank:=65535}
atmo_inc_rank=${atmo_inc_rank:=1}

ocean_min_rank=${ocean_min_rank:=0}
ocean_max_rank=${ocean_max_rank:=65535}
ocean_inc_rank=${ocean_inc_rank:=1}

radiation_min_rank=${radiation_min_rank:=0}
radiation_max_rank=${radiation_max_rank:=65535}
radiation_inc_rank=${radiation_inc_rank:=1}

#-----------------------------------------------------------------------------
#split the number of procs in two (or three) for each of the dummy component
if [ $no_of_models = 2 ] ; then
  dummy_1_min_rank=${dummy_1_min_rank:=0}
  dummy_1_max_rank=${dummy_1_max_rank:=`expr ${mpi_total_procs} / 2 - 1`}
  dummy_1_inc_rank=${dummy_1_inc_rank:=1}

  dummy_2_min_rank=${dummy_2_min_rank:=`expr ${dummy_1_max_rank} + 1`}
  dummy_2_max_rank=${dummy_2_max_rank:=`expr ${mpi_total_procs} - 1`}
  dummy_2_inc_rank=${dummy_2_inc_rank:=1}
else

  procs_per_model=`expr ${mpi_total_procs} / 3`

  dummy_1_min_rank=${dummy_1_min_rank:=0}
  dummy_1_max_rank=${dummy_1_max_rank:=`expr ${procs_per_model} - 1`}
  dummy_1_inc_rank=${dummy_1_inc_rank:=1}

  dummy_2_min_rank=${dummy_2_min_rank:=${procs_per_model}}
  dummy_2_max_rank=${dummy_2_max_rank:=`expr ${procs_per_model} + ${procs_per_model} - 1`}
  dummy_2_inc_rank=${dummy_2_inc_rank:=1}

  dummy_3_min_rank=${dummy_3_min_rank:=`expr ${dummy_2_max_rank} + 1`}
  dummy_3_max_rank=${dummy_3_max_rank:=`expr ${mpi_total_procs} - 1`}
  dummy_3_inc_rank=${dummy_3_inc_rank:=1}
fi

#-----------------------------------------------------------------------------


cp_atmo_files="false"
if [ $run_atmo = "true" ] ;  then 
  cp_atmo_files="true"
fi
if [ $run_radiation = "true" ] ;  then
  cp_atmo_files="true"
fi
if [ $run_dummy_1 = "true" ] ;  then
  cp_atmo_files="true"
fi

#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#
# get grid files
#
atmo_grids="${atmo_dyn_grids} ${atmo_rad_grids}"
all_grids="${atmo_grids} ${ocean_grids}"
for gridfile in ${all_grids}; do
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  rm ${EXPDIR}/$gridfile
  ln -s ${HGRIDDIR}/${gridfile} ${EXPDIR}/${gridfile}  
done
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
if [ $cp_atmo_files = "true" ] ;  then
   # =======================================================
   #
   # model constants
   # ---------------
   cp -f ${DATADIR}/rrtmg_lw.nc           ${EXPDIR} # LW radiation constants
   cp -f ${DATADIR}/ECHAM6_CldOptProps.nc ${EXPDIR} # cloud optical properties
   
   # APE ozone
   if [ x$ozon_file != "x" ] ;  then
     cp -f ${DATADIR}/external/ape_ozone/$ozon_file ${EXPDIR}/o3_icon_DOM01.nc
   else
     cp -f ${DATADIR}/external/ape_ozone/ape_o3_R2B04_1Pa_spr0.90-cell.nc ${EXPDIR}/o3_icon_DOM01.nc
   fi
#   cp -f ${DATADIR}/external/ape_ozone/ape_o3_R2B04_hex_1Pa_c.nc ${EXPDIR}/o3_icon_DOM01.nc
#   check_error $? "cp -f ${DATADIR}/external/ape_ozone/ape_o3_R2B04_1Pa.nc ${EXPDIR}/o3_icon_DOM01.nc"

   #
   # =======================================================
   # vertical grid
   # -------------
   VGRIDDIR=${ICONDIR}/vertical_coord_tables
   if [[ $atmo_model_equations = 3 ]] ; then
      VGRIDNAME=atm_hyb_sz_${nlev}
      rm  ${EXPDIR}/${VGRIDNAME}
      ln -s ${VGRIDDIR}/${VGRIDNAME} ${EXPDIR}/${VGRIDNAME}
      warning $? "ln -s ${VGRIDDIR}/${VGRIDNAME} failed"
   else
     VGRIDNAME=atm_hyb_sp_${nlev}
     rm ${EXPDIR}/${VGRIDNAME}
     ln -s ${VGRIDDIR}/${VGRIDNAME} ${EXPDIR}/${VGRIDNAME}
     check_error $? "ln -s ${VGRIDDIR}/${VGRIDNAME}"
   fi
fi
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
if [[ $run_ocean = 'true' ]]; then
   # =======================================================
   #
   # provide netcdf file for reading ocean forcing fluxes
   # ----------------------------------------------------
   if [[ "x$iforc" = "x12" ]] ; then
     FLUXNAME=iconR${R}B0${B}-flux.nc
 #   neu fuer Hui APE-data, including lowest level T:
#    OMIPNAME=Forc.APE.xyT.R${R}B0${B}ym.nc   #  only 12 identical data sets
 #   OMIPNAME=Forc.APE.xyT.R${R}B0${B}dm.nc   #  365 daily values
     OMIPNAME=omip4icon-R${R}B0${B}-monmean.nc        
     rm ${EXPDIR}/${FLUXNAME}
     ln -s ${HGRIDDIR}/${OMIPNAME} ${EXPDIR}/${FLUXNAME}
     check_error $? "ln -s ${HGRIDDIR}/${OMIPNAME}"
   fi
   # =======================================================
   #
   # provide netcdf file for initialization of ocean prognostic variables
   # --------------------------------------------------------------------
   if [[ "x$init_oce" = "x1" ]] ; then
     PROGNAME=iconR${R}B0${B}-prog.nc
   # nicht mehr OININAME=ts_phc_season-iconR${R}B0${B}-L11.nc
#    OININAME=ts_phc_season-iconR${R}B0${B}-L10x500m.nc
    #OININAME=ts_phc_season-iconR${R}B0${B}-L10-25_5000.nc
    #OININAME=ts_phc_season-iconR${R}B0${B}-L20_20-700m.nc        
#OININAME=ts_phc_annual-iconR2B04-L20_20-700m.nc
  #   OININAME=ts_phc_season-iconR${R}B0${B}-L20_50-600m.nc
  #     OININAME=ts_phc_annual-iconR2B04-L10_50-1000m.nc
    OININAME=ts_phc_annual-iconR2B04-L10_50-1000m.nc
     rm ${EXPDIR}/${PROGNAME}
     ln -s ${HGRIDDIR}/${OININAME} ${EXPDIR}/${PROGNAME}
     check_error $? "ln -s ${HGRIDDIR}/${OININAME}"
   fi
   # =======================================================
   #
   # replace ocean grid file from pool set in experiment file above
   # --------------------------------------------------------------
   if [[ "x$USE_POOLD" = "xY" ]] ; then
     ls -l ${POOLDIR}/$OCEGRID
     check_error $? "${POOLDIR}/$OCEGRID does not exist."
     rm ${EXPDIR}/$gridfile
     cp ${POOLDIR}/$OCEGRID ${EXPDIR}/$gridfile
   fi
fi

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

cd ${EXPDIR}

#-----------------------------------------------------------------------------
# create master_namelist
master_namelist=icon_master.namelist

cat > $master_namelist << EOF
&master_nml
 lrestart               = $restart
 debug_coupler_level    = 1
/
&time_nml
 ini_datetime_string = "$start_date"
 dt_restart          = $dt_restart
/
EOF
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
  
  if [ "x$(eval echo \$run_$1)" != "xtrue" ] ; then
    return
  fi
  
  model_namelist_filename="$(eval echo \$$1_namelist)"
  model_type=$2
  model_min_rank="$(eval echo \$$1_min_rank)"
  model_max_rank="$(eval echo \$$1_max_rank)"
  model_inc_rank="$(eval echo \$$1_inc_rank)"
  
cat >> $master_namelist << EOF
&master_model_nml
  model_name="$1"
  model_namelist_filename="$model_namelist_filename"
  model_restart_info_filename=""
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
/
EOF

#get namelist
  if [ -f ${DIR}/$model_namelist_filename ] ; then
    mv -f ${DIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "cp -f ${DIR}/$atmo_namelist"
  else
    check_error 1 "${DIR}/$model_namelist_filename does not exist"
  fi  

}
#-----------------------------------------------------------------------------

add_component_to_master_namelist atmo      1
add_component_to_master_namelist ocean     2
add_component_to_master_namelist radiation 3
add_component_to_master_namelist dummy_1   99
add_component_to_master_namelist dummy_2   99
add_component_to_master_namelist dummy_3   99

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
#
#  get model
#
MODEL=${bindir}/control_model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#
# start experiment
#
cd ${EXPDIR}
#
date
${START} ${MODEL}
date
#
check_error $? "${START} ${MODEL}"
#
#-----------------------------------------------------------------------------
#
echo "============================"
echo "Script run successfully"
echo "============================"
exit 0
#-----------------------------------------------------------------------------

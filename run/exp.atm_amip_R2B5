#--------------------------------------------------------------------------------------------------
#
# AMIP experiment
#
author_list="Marco Giorgetta, MPIM"
#
#--------------------------------------------------------------------------------------------------
#
# This file describes an AMIP experiment based on the non-hydrostatic atmosphere and the
# ECHAM physics. The experiment is intialized from IFS analysis files and uses transient
# boundary conditions for:
# - SST and sea ice
# - spectral solar irradiation
# - well mixed greenhouse gases CO2, CH4, N2O, CFCs
# - O3 concentration
# - tropospheric aerosol optical properties
# - stratospheric volcanic aerosol optical properties
#
#--------------------------------------------------------------------------------------------------

# (0) Basic model configuration
# -----------------------------

atmos_gridID="0019"
atmos_refinement="R02B05"

nproma_atm=48

#--------------------------------------------------------------------------------------------------

# (1) Define the model time stepping
# ----------------------------------

radTimeStep="PT1H"               # radiation time step:    12 time steps per day
atmTimeStep="PT6M"               # atmosphere time step:  240 time steps per day

# unset some setting of create_target_header for mistral

unset OMPI_MCA_coll_fca_enable
unset OMPI_MCA_coll_fca_priority

#--------------------------------------------------------------------------------------------------

# Variables provided by the scripting mechanism

# EXPNAME                       = name of exp. in 'exp.<name>'
# basedir                       = base directory, where src/, run/ etc exist
# icon_data_poolFolder          = base directory, where grids/, input/ and setup/ exist

# overwrite the default setting with the new path and handle daint (CSCS)

if [ -d /users/icontest ]
then
    poolFolder_prefix=/users/icontest
else
    poolFolder_prefix=
fi

icon_data_poolFolder="$poolFolder_prefix/work/mh0287/users/rene/public/mpim"

#--------------------------------------------------------------------------------------------------

# (2) Set variables needed by the scripting mechanism
# ----------------------------------------------------

# horizontal grid(s)

atm_grid_name=icon_grid_${atmos_gridID}_${atmos_refinement}_G

atmo_grid_folder=/pool/data/ICON/grids/public/mpim/${atmos_gridID}
atmo_data_InputFolder=${icon_data_poolFolder}/${atmos_gridID}
atmo_dyn_grid=${atm_grid_name}.nc

# start and end date+time
start_date=${start_date:="1979-01-01T00:00:00Z"}
    end_date=${end_date:="2015-01-01T00:00:00Z"}

# restart intervals
checkpoint_interval="P1Y"
restart_interval="P1Y"

# output intervals
# ----------------

atm_file_interval="P1M"
atm_output_interval="P1M"

# file types
#
# 1: grib
# 2: grib2
# 3: NetCDF
# 4: NetCDF2
# 5: NetCDF4
#
# namelist files
atm_namelist=NAMELIST_${EXPNAME}_atm
lnd_namelist=NAMELIST_${EXPNAME}_lnd

atmo_namelist=$atm_namelist
#--------------------------------------------------------------------------------------------------

# (3) Define the model configuration
#-----------------------------------

# JSBACH settings
run_jsbach=yes
jsbach_usecase=jsbach_pfts       # jsbach_lite or jsbach_pfts
jsbach_with_lakes=yes
jsbach_with_hd=no                # hydrological discharge: yes/no
jsbach_with_carbon=no            # yes needs jsbach_pfts usecase
jsbach_check_wbal=no             # check water balance

# Some further processing for land configuration
# ----------------------------------------------

ljsbach=$([ "${run_jsbach:=no}" == yes ]          && echo .TRUE. || echo .FALSE. )
llake=$([ "${jsbach_with_lakes:=yes}" == yes ]    && echo .TRUE. || echo .FALSE. )
lcarbon=$([ "${jsbach_with_carbon:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )

if [[ $jsbach_usecase == *pfts* ]]
then
  pft_file_tag="11pfts_"
else
  pft_file_tag=""
fi

#--------------------------------------------------------------------------------------------------

# (4) Output control
# ------------------

# asynchronous diagnostic output processes
# ----------------------------------------

mpi_atm_io_procs=3                 # for atmosphere plus land
mpi_oce_io_procs=0                 # for ocean (not working yet)

# output file selection
# ---------------------

# Note that "mpi_atm_io_procs" must match the number of output files
#
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>

output_atm_vgrid=yes               # produces 1 atm file 
output_atm_debug=no                # produces 1 atm file 
output_atm_3d=yes                  # produces 1 atm file 
output_atm_2d=yes                  # produces 1 atm file 
output_phy_3d=no                   # produces 1 atm file
                                   # Note: "yes" increases the output volume significantly!

output_trc_3d=no                   # produces 1 atm file
output_lnd=no                      # produces 1 lnd file

# atmospheric dynamics and physics
# --------------------------------
cat > ${atm_namelist} << EOF
!
&parallel_nml
 nproma            = ${nproma_atm}
 num_io_procs      = ${mpi_atm_io_procs}
/
&grid_nml
 dynamics_grid_filename = "${atmo_dyn_grid}"
/
&run_nml
 num_lev           = 47          ! number of full levels
 modelTimeStep     = "${atmTimeStep}"
 ltestcase         = .FALSE.     ! run testcase
 ldynamics         = .TRUE.      ! dynamics
 ltransport        = .TRUE.      ! transport
 ntracer           = 3           ! number of tracers; 3: hus, clw, cli; 4: hus, clw, cli, o3
 iforcing          = 2           ! 0: none, 1: HS, 2: ECHAM, 3: NWP
 output            = 'nml'
 profiling_output  = 1           ! aggregated: 1; detailed: 2; in files: 3
 msg_level         = 15          ! level of details report during integration 
 restart_filename  = "${EXPNAME}_restart_atm_<rsttime>.nc"
 activate_sync_timers = .TRUE.
/
&extpar_nml
 itopo             = 1           ! 1: read topography from the grid file
 l_emiss           = .FALSE.
/
&initicon_nml
 init_mode         = 2           ! 2: initialize from IFS analysis
 ifs2icon_filename = "ifs2icon.nc"
/
&nonhydrostatic_nml
 ndyn_substeps     = 10          ! dtime/dt_dyn
 damp_height       = 50000.      ! [m]
 rayleigh_coeff    = 0.10
 vwind_offctr      = 0.2
 divdamp_fac       = 0.004
/
&interpol_nml
 rbf_scale_mode_ll = 1
/
&sleve_nml
 min_lay_thckn     = 40.         ! [m]
 top_height        = 83000.      ! [m]
 stretch_fac       = 0.9
 decay_scale_1     = 4000.       ! [m]
 decay_scale_2     = 2500.       ! [m]
 decay_exp         = 1.2
 flat_height       = 16000.      ! [m]
/
&diffusion_nml
/
&transport_nml
!                    hus,clw,cli, o3
 ivadv_tracer      =   3,  3,  3,  3
 itype_hlimit      =   3,  4,  4,  3
 ihadv_tracer      =  52,  2,  2, 52
/
&echam_phy_nml
!
! domain 1
! --------
!
! atmospheric phyiscs (""=never)
 echam_phy_config(1)%dt_rad = "${radTimeStep}"
 echam_phy_config(1)%dt_vdf = "${atmTimeStep}"
 echam_phy_config(1)%dt_cnv = "${atmTimeStep}"
 echam_phy_config(1)%dt_cld = "${atmTimeStep}"
 echam_phy_config(1)%dt_gwd = "${atmTimeStep}"
 echam_phy_config(1)%dt_sso = "${atmTimeStep}"
!
! atmospheric chemistry (""=never)
 echam_phy_config(1)%dt_mox = "${atmTimeStep}"
 echam_phy_config(1)%dt_car = ""
 echam_phy_config(1)%dt_art = ""
!
! surface (.TRUE. or .FALSE.)
 echam_phy_config(1)%ljsb   = ${ljsbach} ! .TRUE. if run_jsbach=yes
 echam_phy_config(1)%lamip  = .TRUE.
 echam_phy_config(1)%lice   = .TRUE.
 echam_phy_config(1)%lmlo   = .FALSE.
 echam_phy_config(1)%llake  = ${llake}   ! .TRUE. if jsbach_with_lakes=yes
!
/
&echam_rad_nml
!
! domain 1
! --------
!
 echam_rad_config(1)%isolrad    =  1
 echam_rad_config(1)%irad_h2o   =  1
 echam_rad_config(1)%irad_co2   =  4
 echam_rad_config(1)%irad_ch4   =  4
 echam_rad_config(1)%irad_n2o   =  4
 echam_rad_config(1)%irad_o3    =  8
 echam_rad_config(1)%irad_o2    =  2
 echam_rad_config(1)%irad_cfc11 =  4
 echam_rad_config(1)%irad_cfc12 =  4
 echam_rad_config(1)%irad_aero  = 18
/
&echam_gwd_nml
/
&echam_sso_nml
/
&echam_vdf_nml
/
&echam_cnv_nml
/
&echam_cld_nml
/
&echam_cov_nml
/
&sea_ice_nml
/
EOF

# land surface and soil
# ---------------------
cat > ${lnd_namelist} << EOF
&jsb_model_nml
  usecase              = "${jsbach_usecase}"
  use_lakes            = ${llake}
  fract_filename       = "bc_land_frac.nc"
  output_tiles         = ${output_tiles}     ! List of tiles to output
/
&jsb_seb_nml
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_rad_nml
  use_alb_veg_simple   = .FALSE.          ! Use TRUE for jsbach_lite, FALSE for jsbach_pfts
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_turb_nml
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_sse_nml
  l_heat_cap_map       = .FALSE.
  l_heat_cond_map      = .FALSE.
  l_heat_cap_dyn       = .FALSE.
  l_heat_cond_dyn      = .FALSE.
  l_snow               = .TRUE.
  l_dynsnow            = .TRUE.
  l_freeze             = .TRUE.
  l_supercool          = .TRUE.
  bc_filename          = 'bc_land_soil.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_hydro_nml
  l_organic            = .FALSE.
  bc_filename          = 'bc_land_soil.nc'
  ic_filename          = 'ic_land_soil.nc'
  bc_sso_filename      = 'bc_land_sso.nc'
/
&jsb_assimi_nml
  active               = .TRUE.              ! Use FALSE for jsbach_lite, TRUE for jsbach_pfts
/
&jsb_pheno_nml
  scheme               = 'logrop'            ! scheme = logrop / climatology; use climatology for jsbach_lite
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_carbon_nml
  active               = ${lcarbon}   ! TRUE if jsbach_with_carbon=yes
  bc_filename          = 'bc_land_carbon.nc'
  ic_filename          = 'ic_land_carbon.nc'
  read_cpools          = .FALSE.
/
&jsb_fuel_nml
  active                 = ${lcarbon}
  fuel_algorithm         = 1
/
&jsb_disturb_nml
  active               = .FALSE.
  ic_filename          = 'ic_land_soil.nc'
  bc_filename          = 'bc_land_phys.nc'
  fire_algorithm       = 1
  windbreak_algorithm  = 1
  lburn_pasture        = .FALSE.
/
EOF
if [[ ${jsbach_with_hd} = yes ]]; then
  cat >> ${lnd_namelist} << EOF
&jsb_hd_nml
  active               = .TRUE.
  routing_scheme       = 'zero'          ! simple scheme with zero runoff everywhere
  bc_filename          = 'bc_land_hd.nc'
  diag_water_budget    = .TRUE.
  debug_hd             = .FALSE.
  enforce_water_budget = .FALSE.         ! Rene: check! TRUE: stop in case of water conservation problem
/
EOF
fi

#--------------------------------------------------------------------------------------------------

# Define the atmosphere and land input
# ------------------------------------

# model files
#
add_link_file ${basedir}/data/lsdata.nc                                 ./
add_link_file ${basedir}/data/ECHAM6_CldOptProps.nc                     ./

# namelist files
#
add_required_file ${basedir}/run/${atm_namelist}                        ./
add_required_file ${basedir}/run/${lnd_namelist}                        ./

# dictionary file for output variable names
#
dict_file="dict.${EXPNAME}"
cat dict.iconam.mpim  > ${dict_file}
add_required_file ${basedir}/run/${dict_file}                           ./

# initial conditions
#
# - atmosphere: ECMWF analysis, 1979-01-01T00:00:00Z
datadir=${icon_data_poolFolder}/${atmos_gridID}/initial_condition/r0001
add_link_file ${datadir}/ifs2icon_1979010100_${atmos_refinement}_G.nc   ./ifs2icon.nc
#
# - land: source?, date+time?
datadir=${icon_data_poolFolder}/${atmos_gridID}/land/r0001
add_link_file ${datadir}/ic_land_soil_1976.nc                           ./ic_land_soil.nc
# added in namelist, but not active and not yet available (2017-Dec-07)
#add_link_file ${datadir}/ic_land_carbon_1976.nc                        ./ic_land_carbon.nc

# boundary conditions
#
# range of years for yearly files
# assume start_date and end_date have the format yyyy-...
#
start_year=$(( ${start_date%%-*} - 1 ))
end_year=$(( ${end_date%%-*} + 1 ))
#
#
# - well mixed greenhouse gases
#
datadir=${icon_data_poolFolder}/independent/greenhouse_gases
add_link_file ${datadir}/greenhouse_historical_plus.nc                  ./bc_greenhouse_gases.nc
#
# - ozone
# -- for irad_o3=8
#
datadir=${icon_data_poolFolder}/${atmos_gridID}/ozone/r0001
#
add_link_file ${datadir}/bc_ozone_picontrol.nc                          ./bc_ozone.nc
#
# The following is required for AMIP
#
year=$start_year
while [[ $year -le $end_year ]]
do
  if [[ $year -le 2014 ]]
  then
    add_link_file ${datadir}/bc_ozone_historical_${year}.nc             ./bc_ozone_${year}.nc
  else
    add_link_file ${datadir}/bc_ozone_historical_2014.nc                ./bc_ozone_${year}.nc
  fi
  (( year = year+1 ))
done
#
# -- for irad_o3=1 with Cariolle ozone chemistry
#
datadir=${icon_data_poolFolder}/independent/greenhouse_gases
add_link_file ${datadir}/bc_ozone_cariolle.nc                           ./cariolle_coeff.nc
#
# - tropospheric anthropogenic aerosols, simple plumes
#
add_link_file ${basedir}/data/MACv2.0-SP_v1.nc                          ./MACv2.0-SP_v1.nc
#
#   Kinne background aerosols are needed for the year 1850 (irad_aero=18)
#
#   Here we use the revised data based on work by Sebastian Rast
#
datadir=${icon_data_poolFolder}/${atmos_gridID}/aerosol_kinne/r0001
#
add_link_file ${datadir}/bc_aeropt_kinne_lw_b16_coa.nc                  ./
add_link_file ${datadir}/bc_aeropt_kinne_sw_b14_coa.nc                  ./
add_link_file ${datadir}/bc_aeropt_kinne_sw_b14_fin_1850.nc             ./bc_aeropt_kinne_sw_b14_fin.nc
#
# - stratospheric aerosol
#
datadir=${icon_data_poolFolder}/independent/aerosol_stenchikov
year=$start_year
while [[ $year -le $end_year ]]
do
  if [[ $year -le 1999 ]]
  then
    add_link_file ${datadir}/bc_aeropt_stenchikov_lw_b16_sw_b14_${year}.nc ./bc_aeropt_stenchikov_lw_b16_sw_b14_${year}.nc
  else
    add_link_file ${datadir}/bc_aeropt_stenchikov_lw_b16_sw_b14_1999.nc    ./bc_aeropt_stenchikov_lw_b16_sw_b14_${year}.nc
  fi
  (( year = year+1 ))
done
#
# - sst and sic
#
datadir=${icon_data_poolFolder}/${atmos_gridID}/sst_and_seaice/r0001
add_link_file ${datadir}/bc_sic_1979_2016.nc                               ./bc_sic.nc
add_link_file ${datadir}/bc_sst_1979_2016.nc                               ./bc_sst.nc
#
# - ssi and tsi
#
datadir=${icon_data_poolFolder}/independent/solar_radiation/3.2
add_link_file ${datadir}/swflux_14band_cmip6_1850-2299-v3.2.nc             ./bc_solar_irradiance_sw_b14.nc
#
# - land parameters
#
datadir=${icon_data_poolFolder}/${atmos_gridID}/land/r0001
add_link_file ${datadir}/bc_land_frac_${pft_file_tag}1976.nc               ./bc_land_frac.nc
add_link_file ${datadir}/bc_land_phys_1976.nc                              ./bc_land_phys.nc
add_link_file ${datadir}/bc_land_soil_1976.nc                              ./bc_land_soil.nc
add_link_file ${datadir}/bc_land_sso_1976.nc                               ./bc_land_sso.nc
#
# added in namelist, but not active and not yet available (2017-Dec-07)
#
#add_link_file ${datadir}/bc_land_carbon_1976.nc                           ./bc_land_carbon.nc
#
# The following bc_land_hd-file is not yet available...
#
if [[ ${jsbach_with_hd} = yes ]]; then
  add_link_file ${datadir}/bc_land_hd.nc                                   ./bc_land_hd.nc
fi
#
# - lctlib file for JSBACH
#
add_link_file ${basedir}/externals/jsbach/data/lctlib_nlct21.def           ./lctlib_nlct21.def
#
# - HD mask for interpolation of runoff
#
add_required_file ${atmo_grid_folder}/${atmo_dyn_grid}                     hd_mask.nc
#
# - the atmosphere grid itself (the gid copy section below from $HGRIDDIR is ignored)
#
add_required_file ${atmo_grid_folder}/${atmo_dyn_grid}                     ./
#
#--------------------------------------------------------------------------------------------------

# Define the output
# -------------------------------------

# Parameters for all output files
# -------------------------------
cat >> ${atm_namelist} << EOF
&io_nml
 output_nml_dict    = "${dict_file}"
 netcdf_dict        = "${dict_file}"
 write_last_restart = .TRUE.
 itype_pres_msl     = 4
 restart_file_type  = 5
!restart_write_mode = "joint procs multifile"
!lkeep_in_sync      = .TRUE.
/
EOF

if [[ "$output_atm_vgrid" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_vgrid"
 filename_format  = "<output_filename>_<levtype_l>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"           ! output_start = output_end
 output_end       = "${start_date}"           ! --> write once only irrespective of
 output_interval  = "${atm_output_interval}"  !     the output interval and
 file_interval    = "${atm_file_interval}"    !     the file interval
 ml_varlist       = 'zghalf'  , 'zg'      , 'dzghalf'
/
EOF
fi

if [[ "$output_atm_3d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'      , 'pfull'   , 'zg'      ,
                    'rho'     , 'ta'      ,
                    'ua'      , 'va'      , 'wap'     ,
                    'hus'     , 'clw'     , 'cli'     ,
                    'hur'     , 'cl'
/
EOF
fi

if [[ "$output_atm_2d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_2d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'orog'    ,
                    'ps'      , 'psl'     ,
                    'cosmu0'  ,
                    'rsdt'    ,
                    'rsut'    , 'rsutcs'  , 'rlut'    , 'rlutcs'  ,
                    'rsds'    , 'rsdscs'  , 'rlds'    , 'rldscs'  ,
                    'rsus'    , 'rsuscs'  , 'rlus'    ,
                    'ts'      ,
                    'sic'     , 'sit'     ,
                    'albedo'  ,
                    'clt'     ,
                    'prlr'    , 'prls'    , 'prcr'    , 'prcs'    ,
                    'pr'      , 'prw'     , 'cllvi'   , 'clivi'   ,
                    'hfls'    , 'hfss'    , 'evspsbl' ,
                    'tauu'    , 'tauv'    ,
                    'tauu_sso', 'tauv_sso', 'diss_sso',
                    'sfcwind' , 'uas'     , 'vas'     ,
                    'tas'     , 'dew2'    ,
                    'ptp'
/
EOF
fi

if [[ "$output_phy_3d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_phy_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'           , 'pfull'        , 'zg'           ,
                    'tend_ta'      , 'tend_ta_dyn'  , 'tend_ta_phy'  ,
                    'tend_ta_rlw'  , 'tend_ta_rsw'  ,
                    'tend_ta_vdf'  , 'tend_ta_gwd'  , 'tend_ta_sso'  ,
                    'tend_ta_cnv'  , 'tend_ta_cld'  , 
                    'tend_ua'      , 'tend_ua_dyn'  , 'tend_ua_phy'  ,
                    'tend_ua_vdf'  , 'tend_ua_gwd'  , 'tend_ua_sso'  ,
                    'tend_ua_cnv'  , 
                    'tend_va'      , 'tend_va_dyn'  , 'tend_va_phy'  ,
                    'tend_va_vdf'  , 'tend_va_gwd'  , 'tend_va_sso'  ,
                    'tend_va_cnv'  ,
                    'tend_qhus'    , 'tend_qhus_dyn', 'tend_qhus_phy',
                    'tend_qhus_cld', 'tend_qhus_cnv', 'tend_qhus_vdf'
/
EOF
fi

if [[ "$output_trc_3d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_trc_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'        , 'pfull'     , 'zg'        ,
                    'mairvi_phy',
                    'mdryvi_phy',
                    'mh2ovi_phy',
                    'qhus_phy'  , 'mhusvi_phy', 'tend_mhusvi_phy',
                    'qclw_phy'  , 'mclwvi_phy', 'tend_mclwvi_phy',
                    'qcli_phy'  , 'mclivi_phy', 'tend_mclivi_phy',
                    !'qo3_phy'   , 'mo3vi_phy' , 'tend_mo3vi_phy',
/
EOF
fi

if [[ "$output_lnd" == "yes" ]]; then
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'pheno_lai_box'         , 'pheno_fract_fpc_veg'         , 'hydro_fract_water_box' , 
                    'hydro_fract_snow_box'  , 'hydro_w_skin_box'            , 'hydro_w_snow_box'      ,
                    'hydro_w_soil_column_box'
/
EOF
fi

#-----------------------------------------------------------------------------

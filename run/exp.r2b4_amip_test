#!/bin/bash
#__________________________________________________________________________________________________
#
# ICON AMIP run script.
#
# Authors:
#          Monika Esch, MPIM, March 2013 
#          Luis Kornblueh, MPIM, March 2013
#          Marco Giorgetta, MPIM, April 2013
#          Reiner Schnur, MPIM, April 2013  
#          Sebastian Rast, MPIM, February 2014
# 
#__________________________________________________________________________________________________
# This script starts a spin-up run for the AMIP experiment from an analytically initialized, zonally 
# symmetric atmospheric state over a flat Earth surface. Over the first day mountains are grown to
# their realistic size.
#
# The length of the spin-up run is 1 year from 1978-01-01T00:00:00Z to 1979-01-01T00:00:00Z.
#
#__________________________________________________________________________________________________
# Restart status
#
restart=${restart:=".false."}
#
#AUTOMATIC_RESTART_SETUP:
#END AUTOMATIC_RESTART_SETUP
#__________________________________________________________________________________________________
#__________________________________________________________________________________________________
# define the experiment: set variables for ICON namelist

# horizontal grid(s)
grids_folder=/pool/data/ICON/grids/private/r2b4_amip
atmo_dyn_grids='r2b4_amip.nc'

# vertical grid
nlev=47

# experiment start and end date+time
start_date="1978-01-01T00:00:00Z"        # ISO-format date+time
  end_date="1978-01-01T01:00:00Z"        # ISO-format date+time

# time steps
(( dt_dyn          =  5 * minute      )) # [s] dynamics
(( dt_rad          =  1 * hour        )) # [s] radiation

# write restart file(s) and continue
(( dt_checkpoint   = 30 * minute      )) # [s] time between additional restart file writing

# write restart file(s) and make a restart
(( dt_restart      = 30 * day         )) # [s] time between restarts = length of run

# output files
output_atm_dyn=yes  # atm. dynamics
output_atm_phy=yes  # atm. physics
output_lnd_phy=yes  # land physics
output_atm_phy_tend_temp=no  # atm. physics tendencies for temperature
output_atm_phy_tend_wind=no  # atm. physics tendencies for wind
output_atm_phy_tend_trac=no  # atm. physics tendencies for tracers

# dictionary for variable names
dict_file='dict.cmor'

#__________________________________________________________________________________________________

# define output on regular grid
#
# regular grid
reg_lon_def_reg=0.,1.875,358.125        # 192 longitudes, dlon = 1.875 deg
reg_lat_def_reg=-89.0625.,1.875,89.0625 #  96 latitudes , dlat = 1.875 deg
#
# optimal "rhombus" grid
# A rhombus consists of 2 adjacent triangles in a zonal row of the icosahedral grid.
# This grid has 1 longitude-latitude point per rhombus in the tropical belt of
# the icoshderal grid.
reg_lon_def_rmb=0.,2.25,357.75          # 160 longitudes, dlon = 2.250 deg
reg_lat_def_rmb=-89.0625.,1.875,89.0625 #  96 latitudes , dlat = 1.875 deg
#
# optimal "triangle" grid
# This grid has 1 longitude-latitude point per tringle in the tropical belt of
# the icoshderal grid.
reg_lon_def_tri=0.,1.125,358.875        # 320 longitudes, dlon = 1.125 deg
reg_lat_def_tri=-89.0625.,1.875,89.0625 #  96 latitudes , dlat = 1.875 deg
#
#__________________________________________________________________________________________________
# define the experiment: write ICON namelist parameters

atmo_namelist=NAMELIST_${EXPNAME}_atm

cat > ${atmo_namelist} << EOF
!
&parallel_nml
 nproma           = ${nproma}
 l_fast_sum       = .false.
/
&grid_nml
 dynamics_grid_filename = "${atmo_dyn_grids}",
/
&run_nml
 num_lev          = ${nlev}      ! number of full levels of vertical grid
 dtime            = ${dt_dyn}    ! [s] dynamics time step
 ltestcase        = .TRUE.       ! run testcase                 --> testcase_nml
 ldynamics        = .TRUE.       ! dynamics                     --> dynamics_nml, diffusion_nml
 ltransport       = .TRUE.       ! switch on tracer transport   --> transport_nml
 ntracer          = 5            ! number of tracers
 iforcing         = 2            ! ICOHAM+ECHAM physics         --> echam_phy_nml
 output           = 'nml'
 msg_level        = 10           ! detailed report during integration 
 restart_filename = "${EXPNAME}_restart_atm_<rsttime>.nc"
/
&ha_testcase_nml
 ctest_name       = 'AMIP'       ! test case identifier
 lrh_linear_pres  = .TRUE.       ! initial RH is a linear function of pressure
 rh_at_1000hpa    = 0.30         ! [] initial rel. humidity at 1000 hPa 
/
&dynamics_nml
 iequations       = 1            ! 1: ICOHAM dynamics
/
&ha_dyn_nml
 ldry_dycore      = .FALSE.      ! moist dynamical core
/
&diffusion_nml
 hdiff_order      = 24           ! 2nd order near model top, 4th order on the other levels
 k2_klev_max      = 8            ! the 3 highest model levels use 2nd order diffusion
/
&transport_nml
 ctracer_list     = 'vwi45'      ! water vapour, cloud water, cloud ice, constant field, dummy for ozone
 ivadv_tracer     = 3,3,3,3,3
 itype_hlimit     = 3,4,4,4,4
 ihadv_tracer     = 52,2,2,2,2
/
&echam_phy_nml
 lamip            = .TRUE.
 lrad             = .TRUE.
 lvdiff           = .TRUE.
 lconv            = .TRUE.
 lcond            = .TRUE.
 lgw_hines        = .TRUE.
 lssodrag         = .TRUE.
 ljsbach          = .TRUE.
 dt_rad           = ${dt_rad}    ! [s] radiation time step
 lebudget         = .TRUE.
/
&radiation_nml
 irad_h2o         = 1            ! prognostic vapor, liquid and ice
 irad_co2         = 2            ! constant co2 vmr
 irad_ch4         = 0            ! switch off ch4
 irad_n2o         = 0            ! switch off n2o
 irad_o3          = 8            ! ozone for AMIP experiment
 irad_o2          = 0            ! switch off o2
 irad_cfc11       = 0            ! switch off cfc11
 irad_cfc12       = 0            ! switch off cfc12
 irad_aero        = 0            ! switch off aerosols
 ighg             = 1            ! select CMIP5 standard greenhouse gas scenario (as in ECHAM6 AMIP) 
 izenith          = 4            ! seasonal and diurnal cycle
 isolrad          = 1
/
&echam_conv_nml
/
&gw_hines_nml
/
&io_nml
 dt_checkpoint    = ${dt_checkpoint} ! [s] trigger new restart file
 output_nml_dict  = '${dict_file}'
 netcdf_dict      = '${dict_file}'
 lzaxis_reference = .FALSE. 
/
EOF

if [[ "$output_atm_dyn" == "yes" ]]; then
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_dyn"
 filename_format  = "<output_filename>_<datetime2>"
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT05M"                          ! ISO-format interval
 file_interval    = "PT05M"                          ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'ps'      , 'ta'      , 'cl'      , 'hur'     ,
                    'hus'     , 'clw'     , 'cli'     ,
                    'ua'      , 'va'      , 'wap'     ,
                    'pfull'   , 'gpfull'
/
EOF
fi

if [[ "$output_atm_phy" == "yes" ]]; then
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_phy"
 filename_format  = "<output_filename>_<datetime2>"
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT05M"                          ! ISO-format interval
 file_interval    = "PT05M"                          ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'cosmu0'  , 'rsdt'    ,
                    'rsns'    , 'rlns'    , 'rsnt'    , 'rlnt'    ,
                    'rsns_wtr', 'rsns_ice', 'rsns_lnd',
                    'rlns_wtr', 'rlns_ice', 'rlns_lnd',
                    'ts_wtr'  , 'ts_ice'  , 'ts_lnd'  , 'ts'      ,
                    'sic'     , 'sit'     , 'alb'     ,
                    'clt'     ,
                    'prlr'    , 'prls'    , 'prcr'    , 'prcs'    ,
                    'pr'      , 'prw'     , 'cllvi'   , 'clivi'   ,
                    'hfls'    , 'hfss'    , 'evspsbl' ,
                    'hfls_wtr', 'hfls_ice', 'hfls_lnd',
                    'hfss_wtr', 'hfss_ice', 'hfss_lnd',
                    'tauu'    , 'tauv'    ,
                    'tauu_wtr', 'tauu_ice', 'tauu_lnd',
                    'tauv_wtr', 'tauv_ice', 'tauv_lnd',
                    'tauu_sso', 'tauv_sso', 'diss_sso', 'sh_vdiff',
                    'ch_concloud'
/
EOF
fi

if [[ "$output_lnd_phy" == "yes" ]]; then
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_phy"
 filename_format  = "<output_filename>_<datetime2>"
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT05M"                          ! ISO-format interval
 file_interval    = "PT05M"                          ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'fract', 'alb_vis_srf', 'alb_nir_srf', 't_srf', 'lai', 's_srf', 'qsat_srf'
                    'canopy_cond', 'ws_l', 'ws_fc_l', 'ws_pwp_l', 'ws_sat_l', 'ws'
                    'water_stress', 'ws_root', 'ws_fc_root', 'ws_pwp_root'
                    'albedo_srf', 't_air', 'q_air', 'lwrad_srf_down'
                    'swrad_srf_down', 'root_depth', 'root_depth_l', 'soil_depth', 'soil_depth_l'
                    'evapotrans', 'sensible_hflx', 'latent_hflx' 
                    'fact_qsat_srf', 'fact_qsat_trans_srf', 'fact_q_air', 'fract_fpc_max', 'fract_fpc'
                    't_srf_unfilt', 't_srf_unfilt_old', 't_srf_old'
                    't_soil', 'wsn_srf', 'wsr_srf', 't_rad_srf', 'grnd_hflx'
                    'sfract_srf', 'wfract_srf', 'sfract_soil', 'sfract_can', 'wfract_can', 'wfract_soil'
                    'rel_hum_srf', 'tte_corr', 'rough_m_srf', 'rough_h_srf'
/
EOF
fi

if [[ "$output_atm_phy_tend_temp" == "yes" ]]; then
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_phy_tend_temp"
 filename_format  = "<output_filename>_<datetime2>"
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT05M"                          ! ISO-format interval
 file_interval    = "PT05M"                          ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'tend_temp', 'tend_temp_radlw', 'tend_temp_radsw', 'tend_temp_cld'
                    'tend_temp_cnv', 'tend_temp_vdf', 'tend_temp_gwh', 'tend_temp_sso'
/
EOF
fi

if [[ "$output_atm_phy_tend_wind" == "yes" ]]; then
    cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_phy_tend_wind"
 filename_format  = "<output_filename>_<datetime2>"
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT05M"                          ! ISO-format interval
 file_interval    = "PT05M"                          ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'tend_u', 'tend_u_cnv', 'tend_u_vdf', 'tend_u_gwh', 'tend_u_sso'
                    'tend_v', 'tend_v_cnv', 'tend_v_vdf', 'tend_v_gwh', 'tend_v_sso'
/
EOF
fi

if [[ "$output_atm_phy_tend_trac" == "yes" ]]; then
    cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_phy_tend_trac"
 filename_format  = "<output_filename>_<datetime2>"
 output_grid      = .TRUE.
 output_start     = "${start_date}"                  ! ISO-format date+time
 output_end       = "${end_date}"                    ! ISO-format date+time
 output_interval  = "PT05M"                          ! ISO-format interval
 file_interval    = "PT05M"                          ! ISO-format interval
 include_last     = .FALSE.
 ml_varlist       = 'tend_qv', 'tend_qv_cld', 'tend_qv_cnv', 'tend_qv_vdf', 'tend_x_dtr'
/
EOF
fi

#------------------------------------------------------
# jsbach namelist
lnd_namelist=NAMELIST_${EXPNAME}_lnd

cat > ${lnd_namelist} <<EOF
&jsb_model_nml
  usecase         = 'jsbach_lite'
/

&jsb_srf_nml
  bc_filename     = 'bc_land_phys.nc'
  bc_sso_filename = 'bc_land_sso.nc'
  ic_filename     = 'ic_land_soil.nc'
/

&jsb_soil_nml
  active          = .TRUE.
  nsoil_energy    = 5
  nsoil_water     = 5
  bc_filename     = 'bc_land_soil.nc'
  ic_filename     = 'ic_land_soil.nc'
/

&jsb_veg_nml
  active          = .TRUE.
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
EOF

add_required_file ${thisdir}/${lnd_namelist}        ./
#__________________________________________________________________________________________________
# add standard atmosph. hydrostatic files
. ${thisdir}/add_required_atmo_hydrostatic_files

# copy initial and boundary conditions and ancilliary files
INDATA=/pool/data/ICON/input/r0001

# initial conditions
# ------------------

# - atmosphere
#   t.b.d

# - land
add_required_file $INDATA/r2b4_amip/lnd/ic_land_soil.nc                      ./

# boundary conditions
# -------------------

# - well mixed greenhouse gases
add_required_file $INDATA/global/atm/bc_greenhouse_rcp45_1765-2500.nc        ./bc_greenhouse_gases.nc

# - ozone
year=1977
while [[ $year -le 2009 ]]
do
  add_required_file $INDATA/r2b4_amip/atm/bc_ozone_cmip5/bc_ozone_cmip5_${year}.nc  ./ozone${year}.nc
 (( year = year+1 ))
done

# - sst and sic
add_required_file $INDATA/r2b4_amip/oce/bc_sic_pcmdi_1870-2010.nc            ./bc_sic.nc
add_required_file $INDATA/r2b4_amip/oce/bc_sst_pcmdi_1870-2010.nc            ./bc_sst.nc

# - ssi and tsi
add_required_file $INDATA/global/sun/bc_solar_irradiance_14band_1849-2399.nc ./bc_ssi.nc

# - land parameters
add_required_file $INDATA/r2b4_amip/lnd/bc_land_frac.nc                      ./
add_required_file $INDATA/r2b4_amip/lnd/bc_land_phys.nc                      ./
add_required_file $INDATA/r2b4_amip/lnd/bc_land_soil.nc                      ./
add_required_file $INDATA/r2b4_amip/lnd/bc_land_sso.nc                       ./


#__________________________________________________________________________________________________
# copy dictionary file for variable names
add_required_file ${basedir}/run/${dict_file}                                ./

#__________________________________________________________________________________________________

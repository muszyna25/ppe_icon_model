#!/bin/ksh
set +x
#################### functions ##########################################
function copy_experiment
{
typeset MODEL_DIR EXP_ORI EXP_NEW
MODEL_DIR=$1
EXP_ORI=$2
EXP_NEW=$3
cd ${MODEL_DIR}/experiments
if [ ! -d "${EXP_ORI}" ]; then
  echo 'no experiment '${EXP_ORI}' found'
  exit 1
fi
if [ ! -f ${EXP_ORI}/${EXP_ORI}_restart_atm_${RESTART_DATE}.nc ]; then
  echo "The run ${EXP_ORI} did not write any restart at ${RESTART_DATE}"
  exit 1
fi
rm -rf ${EXP_NEW}
mkdir ${EXP_NEW}
cd ${EXP_NEW}
cp ../${EXP_ORI}/${EXP_ORI}_restart_atm_${RESTART_DATE}.nc .
ln -sf ${EXP_ORI}_restart_atm_${RESTART_DATE}.nc restart_atm_DOM01.nc
}
#------------------------------------------------------------------------
function print_mode
{
typeset MOD
MOD=$1
case $MOD in  
  'b') PRINT_MD='b(ase)';;
  'u') PRINT_MD='u(pdate)';;
  'r') PRINT_MD='r(estart)';;
  'n') PRINT_MD='n(proma)';;
  'm') PRINT_MD='m(pi)';;
  'o') PRINT_MD='o(mp)';;
    *) PRINT_MD=$MOD;;
esac
echo "- test mode    = $PRINT_MD"
}
#------------------------------------------------------------------------
function print_usage
{
typeset COMMAND MOD_ARG
COMMAND=$1
MOD_ARG=""
for MOD in $MODES; do
  case $MOD in  
    'b') MD='b(ase)';;
    'u') MD='u(pdate)';;
    'r') MD='r(estart)';;
    'n') MD='n(proma)';;
    'm') MD='m(pi)';;
    'o') MD='o(mp)';;
      *) MD=$MOD;;
  esac
  MOD_ARG=$MOD_ARG'|'$MD
done 
echo "usage: ${COMMAND} [-e] [-h] [-m $MOD_ARG] [-o yes|no] [-r <reference model path>]" 
echo '-e : name of the experiment to be checked, default = atm_amip_test'
echo '-f : '"'yes'"': force make_runscripts even if runscripts exist'
echo '     '"'no'"': perform make_runscripts only if no runscripts are available (default)'
echo '-h : display help'
echo '-m : test mode, either single tests like base, update, restart, nproma, mpi or omp test'
echo '     or combined tests like ur (update and restart) possible'
echo '-o : '"'yes'"': overwrite existing experiments (default)'
echo '     '"'no'"': use existing experiments'
echo '-r : reference model path'
}
#------------------------------------------------------------------------
function diff_results
{
typeset MODEL_DIR1 DEXP1 MODEL_DIR2 DEXP2 TEST FILES FILE1 FILE2 STATUS
MODEL_DIR1=$1
DEXP1=$2
MODEL_DIR2=$3
DEXP2=$4
TEST=$5
#TYPES: defined in main script and used from main script 
#DATES: defined in main script and used from main script 
#
# status variable that is evaluated after the function call
DIFF_STATUS=0
#
# create more beautiful output for variables MODEL_DIR[12]
cd $MODEL_DIR1; MODEL_DIR1=`pwd`
cd $MODEL_DIR2; MODEL_DIR2=`pwd`
#
# dump output of "cdo diffn", if differences exist, only for the first date
CAT_CDO_DIFFN='yes'
#
# if this is the restart test, then compare only for dates after the restart date
DIFF_DATES=""
if [ "$TEST" == "restart" ]; then
  for DATE in $DATES; do
    if [ $DATE \> $RESTART_DATE ]; then
      DIFF_DATES="$DIFF_DATES $DATE"
    fi
  done
else
  DIFF_DATES=$DATES
fi
#
if [ "x$DIFF_DATES" == "x" ]; then
  echo "There are no dates to compare"
  exit 1
fi
#
if [ "x$TYPES" == "x" ]; then
  echo "There are no file types to compare"
  exit 1
fi
#
echo "==============================================================================="
echo "Compare these experiments:"
echo "- ${MODEL_DIR1}/experiments/${DEXP1}"
echo "- ${MODEL_DIR2}/experiments/${DEXP2}"
echo " "
#
for DATE in $DIFF_DATES; do
  #
  echo "-------------------------------------------------------------------------------"
  echo "Compare for DATE=$DATE"
  DIFFERENT_TYPES=''
  #
  for TYPE in $TYPES; do
    #
    FILE1="${MODEL_DIR1}/experiments/${DEXP1}/${DEXP1}_${TYPE}_${DATE}.nc"
    FILE2="${MODEL_DIR2}/experiments/${DEXP2}/${DEXP2}_${TYPE}_${DATE}.nc"
    #
    echo "Compare for TYPE=$TYPE"
    cdo diffn ${FILE1} ${FILE2} > cdo_diffn.out
    #
    STATUS=`echo $?`
    if [ "$STATUS" -ne 0 ]; then
      echo " File 1 and file 2 cannot be compared"
      echo " - file 1: ${FILE1}"
      echo " - file 2: ${FILE2}"
      DIFFERENT_TYPES="$DIFFERENT_TYPES $TYPE"
    fi
    if [ -s cdo_diffn.out ]; then
      echo " File 1 and file 2 differ"
      echo " - file 1: ${FILE1}"
      echo " - file 2: ${FILE2}"
      if [ "$CAT_CDO_DIFFN" == 'yes' ]; then
        cat cdo_diffn.out
        rm  cdo_diffn.out
      fi
      IS_DIFFERENT='yes'
      DIFFERENT_TYPES="$DIFFERENT_TYPES $TYPE"
    fi
    #
  done
  #
  if [ "x$DIFFERENT_TYPES" != 'x' -a $CAT_CDO_DIFFN == 'yes' ]; then
    DIFF_STATUS=1
    DIFF_DATE=$DATE
    DIFF_TYPES=$DIFFERENT_TYPES
    CAT_CDO_DIFFN='no'
  fi
  #
done
#
if [ $DIFF_STATUS == 0 ]; then
  echo " "
  echo "The experiments are equal"
  echo " "
else
  echo " "
  echo "The experiments differ:"
  echo "- first at date/time $DIFF_DATE"
  echo "- for the file types $DIFF_TYPES"
  echo " "
fi
}
#------------------------------------------------------------------------
function string_in_list
{
typeset STR_IN_LIST STR
STR_IN_LIST=false
STR=$1
N=$#
M=2
LIST=""
while [ $M -le $N ]; do
ARG=$(eval echo \${$M})
LIST=$LIST" "$ARG
M=$(( M + 1 ))
done
for ELEMENT in $LIST; do
if [ "$STR" == $ELEMENT ]; then
STR_IN_LIST=true
fi
done 
if [ "$STR_IN_LIST" == 'true' ]; then
  return 0
else
  return 1
fi
}

#################### main script ########################################

date

if [[ "$LOADLBATCH" ]]; then
# change for blizzard
  PATH=/client/bin:$PATH
fi

SCRIPT_DIR=`pwd`
MODEL_DIR=${SCRIPT_DIR}/../..

# Default experiment
EXPERIMENT=${EXPERIMENT='atm_amip'}

# Default work mode of the checksuite
MD=${MD='rnmo'}  #MD is equal to MODE but abbreviated test-mode names
FORCE_MRS=${FORCE_MRS='no'}
OVERWRITE=${OVERWRITE='yes'}
REFERENCE=${REFERENCE=''}

MODES="b u r n m o ur un um uo rn rm ro nm no mo urn urm uro unm uno umo rnm rno rmo nmo urnm urno urmo unmo rnmo urnmo"

while getopts ":e:f:hm:o:r:" OPT; do
case $OPT in
 e  ) EXPERIMENT=$OPTARG
      ;;
 f  ) FORCE_MRS=$OPTARG
      if [ "$FORCE_MRS" != 'yes' -a "$FORCE_MRS" != 'no' ]; then
      print_usage $0
      exit 1
      fi
      ;;
 h  ) print_usage $0
      exit 1
      ;;
 m  ) MODE=$OPTARG 
      case $MODE in
        'base')     MD='b';;
        'update')   MD='u';;
        'restart')  MD='r';;
        'nproma')   MD='n';;
        'mpi')      MD='m';;
        'omp')      MD='o';;
            *)      MD=$MODE;;
      esac
      if ! string_in_list $MD $MODES; then
        print_usage $0
        exit 1
      fi 
      ;;
 o  ) OVERWRITE=$OPTARG
      if [ "$OVERWRITE" != 'yes' -a "$OVERWRITE" != 'no' ]; then
      print_usage $0
      exit 1
      fi
      ;;
 r  ) REFERENCE=$OPTARG
      CMODES="u ur un um uo urn urm uro unm uno umo urnm urno urmo unmo urnmo"
      if string_in_list $MD $CMODES; then
        if [ ! -d ${REFERENCE}/run ]; then
	   echo 'you asked for an update test, but no reference model found'
	   echo "reference model ${REFERENCE} does not exist"
	   exit 1
	 fi
      fi
      ;;
esac
done

# Define file types, dates, and the restart date for the checks.
# Use values from environment variables, if they are defined and not null.
# Otherwise use the specified values.
if [ "${EXPERIMENT}" == 'atm_amip_test' ]; then
  TYPES=${TYPES='dyn_2d_ml dyn_3d_ml dyn_3d_pl lnd_ml phy_2d_ml phy_3d_ml'}
  DATES=${DATES='19790101T002000Z 19790101T004000Z 19790101T010000Z 19790101T012000Z 19790101T014000Z 19790101T020000Z'}
  RESTART_DATE=${RESTART_DATE='19790101T010000Z'}
fi

echo " "
echo "==============================================================================="
echo " "
echo "Run the checksuite for:"
echo "- EXPERIMENT   = ${EXPERIMENT:?   is not defined --> ERROR}"
echo "- TYPES        = ${TYPES:?        is not defined --> ERROR}"
echo "- DATES        = ${DATES:?        is not defined --> ERROR}"
echo "- RESTART_DATE = ${RESTART_DATE:? is not defined --> ERROR}"
print_mode $MD
echo "--------------------------------------------------------------------------------"
echo " "

# check if REFERENCE is defined if an update test is requested
CMODES="u ur un um uo urn urm uro unm uno umo urnm urno urmo unmo urnmo"
if string_in_list $MD $CMODES; then
  echo "- REFERENCE    = ${REFERENCE:?  is not defined --> ERROR}"

  # get standardized paths
  cd ${REFERENCE}; REFERENCE=`pwd`
  cd ${MODEL_DIR}; MODEL_DIR=`pwd`
  if [ "${REFERENCE}" == "${MODEL_DIR}" ]; then
    echo 'reference model and test model are the same'
    exit 1
  fi
fi

SCRIPT=${EXPERIMENT}

cd ${MODEL_DIR}
STATUS=$?
if [ "${STATUS}" == 0 ]; then
  echo "found model ${MODEL_DIR}"
else
  echo "no model ${MODEL_DIR} found"
  exit 1
fi

if [ ! -f run/exp.${SCRIPT}.run -o "$FORCE_MRS" == 'yes' ]; then
  ${MODEL_DIR}/make_runscripts ${SCRIPT}
fi

if [ ! -d experiments ]; then
  mkdir experiments
fi

# check if the test runscript exists
if [ ! -f run/exp.${SCRIPT}.run ]; then
  echo "did not find base runscript run/exp.${SCRIPT}.run"
  exit 1
else
  echo "found runscript run/exp.${SCRIPT}.run"
fi

# find out on which system we are
TARGET_MACHINE=`grep "# target machine is " run/exp.${SCRIPT}.run`
TARGET_MACHINE=${TARGET_MACHINE#'# target machine is '}

# variables to track the test results
PASSED_TESTS="PASSED_TESTS: "
FAILED_TESTS="FAILED_TESTS: "
EXIT_STATUS=0

# now start with the tests

TEST='base'
echo ' '
echo "#################### perform $TEST test               ####################"
echo ' '
EXP_BASE=${EXPERIMENT}_${TEST}
EXP_TEST=${EXPERIMENT}_${TEST}
if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_BASE} ]; then
  cd run
  RUN_SCRIPT=exp.${EXP_BASE}.run
  cp -f exp.${SCRIPT}.run ${RUN_SCRIPT}
  sed -i.sedbak s/${SCRIPT}/${EXP_BASE}/g ${RUN_SCRIPT}
  rm ${RUN_SCRIPT}.sedbak
  #
  echo "Perform $TEST run"
  ${SCRIPT_DIR}/${RUN_SCRIPT}
  #
  STATUS=$?
  if [ "$STATUS" -eq 0 ]; then
    PASSED_TESTS="$PASSED_TESTS $TEST"
    EXIT_STATUS=$(($EXIT_STATUS + 0))
  else
    FAILED_TESTS="$FAILED_TESTS $TEST"
    EXIT_STATUS=$((EXIT_STATUS + 1))
    echo "ERROR: Base run FAILED --> no further testing possible"
    exit 1
  fi
else
    echo "Found $TEST run"
fi # OVERWRITE


CMODES="u ur un um uo urn urm uro unm uno umo urnm urno urmo unmo urnmo"
if string_in_list $MD $CMODES; then
  TEST='update'
  echo ' '
  echo "#################### perform $TEST test               ####################"
  echo ' '
  cd ${REFERENCE} 
  if [ "${OVERWRITE}" == 'yes' -o ! -d experiments/${EXP_BASE} ] ;then 
    if [ ! -f run/exp.${SCRIPT}.run -o "$FORCE_MRS" == 'yes' ]; then
      ${MODEL_DIR}/make_runscripts ${SCRIPT}
    fi
    if [ ! -d experiments ]; then
      mkdir experiments
    fi
    cd run
    if [ ! -f exp.${SCRIPT}.run ]; then
      echo 'reference model: '$REFERENCE
      echo "did not find base runscript for reference model exp.${SCRIPT}.run"
      exit 1
    else
      echo "found base runscript exp.${SCRIPT}.run"
    fi
    #
    RUN_SCRIPT=exp.${EXP_BASE}.run
    cp -f exp.${SCRIPT}.run ${RUN_SCRIPT}
    sed -i.sedbak s/${SCRIPT}/${EXP_BASE}/g ${RUN_SCRIPT}
    rm ${RUN_SCRIPT}.sedbak
    #
    echo "Perform $TEST run"
    ${REFERENCE}/run/${RUN_SCRIPT}
    #
  else
    echo "Found $TEST run"
  fi # OVERWRITE

  # compare base run with test run
  diff_results $MODEL_DIR $EXP_BASE $REFERENCE $EXP_BASE $TEST
  if [ "$DIFF_STATUS" == 0 ]; then
    PASSED_TESTS="$PASSED_TESTS $TEST"
    EXIT_STATUS=$(($EXIT_STATUS + 0))
  else
    FAILED_TESTS="$FAILED_TESTS $TEST"
    EXIT_STATUS=$(($EXIT_STATUS + 1))
  fi
fi # MODE


CMODES="r ur rn rm ro urn urm uro rnm rno rmo urnm urno urmo rnmo urnmo"
if string_in_list $MD $CMODES; then
  TEST='restart'
  echo ' '
  echo "#################### perform $TEST test               ####################"
  echo ' '
  EXP_TEST=${EXPERIMENT}_${TEST}
  if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_TEST} ]; then
    #
    copy_experiment ${MODEL_DIR} ${EXP_BASE} ${EXP_TEST}
    if [ $? -ne 0 ]; then
      echo "could not get base experiment ${EXP_BASE} or create new experiment ${EXP_TEST}"
      exit 1
    fi
    echo 'model_dir= ' ${MODEL_DIR}
    #
    RUN_SCRIPT=exp.${EXP_TEST}.run
    cd ${MODEL_DIR}/run
    cp -f exp.${SCRIPT}.run ${RUN_SCRIPT}
    sed -i.sedbak s/${SCRIPT}/${EXP_TEST}/g ${RUN_SCRIPT}
    rm ${RUN_SCRIPT}.sedbak
    #
    sed -i.sedbak s/restart:=\".false.\"/restart:=\".true.\"/g ${RUN_SCRIPT}
    rm ${RUN_SCRIPT}.sedbak
    #
    echo "Perform $TEST run"
    ${SCRIPT_DIR}/${RUN_SCRIPT}
    #
  else
    echo "Found $TEST run"
  fi # OVERWRITE
  # compare base run with test run
  diff_results $MODEL_DIR $EXP_BASE $MODEL_DIR $EXP_TEST $TEST
  if [ "$DIFF_STATUS" == 0 ]; then
    PASSED_TESTS="$PASSED_TESTS $TEST"
    EXIT_STATUS=$(($EXIT_STATUS + 0))
  else
    FAILED_TESTS="$FAILED_TESTS $TEST"
    EXIT_STATUS=$(($EXIT_STATUS + 1))
  fi
fi # MODE


CMODES="n un rn nm no urn unm uno rnm rno nmo urnm urno unmo rnmo urnmo"
if string_in_list $MD $CMODES; then
  TEST='nproma'
  echo ' '
  echo "#################### perform $TEST test               ####################"
  echo ' '
  EXP_TEST=${EXPERIMENT}_${TEST}
  if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_TEST} ]; then
    #
    RUN_SCRIPT=exp.${EXP_TEST}.run
    cd ${MODEL_DIR}/run
    cp -f exp.${SCRIPT}.run ${RUN_SCRIPT}
    sed -i.sedbak s/${SCRIPT}/${EXP_TEST}/g ${RUN_SCRIPT}
    rm ${RUN_SCRIPT}.sedbak
    #
    N_NPROMA=`grep "nproma=" ${RUN_SCRIPT}`
    N_NPROMA_NEW="nproma=17"
    if [ "${N_NPROMA#nproma=}" == "${N_NPROMA_NEW#nproma=}" ]; then
      N_NPROMA_NEW='nproma=19'
    fi
    sed -i.sedbak s/$N_NPROMA/$N_NPROMA_NEW/g ${RUN_SCRIPT}
    rm ${RUN_SCRIPT}.sedbak
    #
    echo "Perform $TEST run"
    ${SCRIPT_DIR}/${RUN_SCRIPT}
    #
  else
    echo "Found $TEST run"
  fi # OVERWRITE

  # compare base run with test run
  diff_results $MODEL_DIR $EXP_BASE $MODEL_DIR $EXP_TEST $TEST
  if [ "$DIFF_STATUS" == 0 ]; then
    PASSED_TESTS="$PASSED_TESTS $TEST"
    EXIT_STATUS=$(($EXIT_STATUS + 0))
  else
    FAILED_TESTS="$FAILED_TESTS $TEST"
    EXIT_STATUS=$(($EXIT_STATUS + 1))
  fi
fi # MODE


CMODES="m um rm nm mo urm unm umo rnm rmo nmo urnm urmo unmo rnmo urnmo"
if string_in_list $MD $CMODES; then
  TEST='mpi'
  echo ' '
  echo "#################### perform $TEST test               ####################"
  echo ' '
  EXP_TEST=${EXPERIMENT}_${TEST}
  if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_TEST} ]; then
    cd ${MODEL_DIR}/run
    TEST_POSSIBLE='no'
    MPI=`grep with_mpi exp.${SCRIPT}.run`
    MPIYES='with_mpi="yes"'
    if [ "$MPI" == "$MPIYES" ]; then
      #
      # find out how many nodes and processes per node are in use
      #
      N_NODES=`grep "no_of_nodes=" exp.${SCRIPT}.run`
      N_NODES=${N_NODES#'no_of_nodes='}
      N_PPNODE=`grep "mpi_procs_pernode=" exp.${SCRIPT}.run`
      N_PPNODE=${N_PPNODE#'mpi_procs_pernode='}
      N_PROCS=$(( N_NODES * N_PPNODE ))
      #
      if [ $N_PROCS -gt 1 ]; then
        #
	TEST_POSSIBLE='yes'
        #
        RUN_SCRIPT=exp.${EXP_TEST}.run
        cd ${MODEL_DIR}/run
        cp -f exp.${SCRIPT}.run ${RUN_SCRIPT}
        sed -i.sedbak s/${SCRIPT}/${EXP_TEST}/g ${RUN_SCRIPT}
        rm ${RUN_SCRIPT}.sedbak
        #
        #
        if [ $N_PPNODE -gt 1 ]; then
          #
          # keep number of nodes, and use one process less per node
          #
	  N_NODES_NEW=$N_NODES
          N_PPNODE_NEW=$(( N_PPNODE - 1 ))
          #
          # change script variables
          sed -i.sedbak s/"mpi_procs_pernode=$N_PPNODE"/"mpi_procs_pernode=$N_PPNODE_NEW"/g ${RUN_SCRIPT}
          #
          # change system variables where necessary
          if [ "${TARGET_MACHINE}" == 'blizzard' ]; then
            PPNODE=`grep "# @"     ${RUN_SCRIPT} | grep  " tasks_per_node "`
            PPNODE_NEW=${PPNODE%$N_PPNODE}$N_PPNODE_NEW
            sed -i.sedbak s/"$PPNODE"/"$PPNODE_NEW"/g ${RUN_SCRIPT}
          fi
          if [ "${TARGET_MACHINE}" == 'thunder'  ]; then
            PPNODE=`grep "#SBATCH" ${RUN_SCRIPT} | grep  "ntasks-per-node"`
            PPNODE_NEW=${PPNODE%$N_PPNODE}$N_PPNODE_NEW
            sed -i.sedbak s/"$PPNODE"/"$PPNODE_NEW"/g ${RUN_SCRIPT}
          fi
          #
	else
          #
          # use one node less and keep one process per node
          #
	  N_NODES_NEW=$(( N_NODES - 1 ))
	  N_PPNODE_NEW=$N_PPNODE
          #
          # change script variables
	  sed -i.sedbak s/"no_of_nodes=$N_NODES"/"no_of_nodes=$N_NODES_NEW"/g ${RUN_SCRIPT}
          #
          # change system variables where necessary
          if [ "${TARGET_MACHINE}" == 'blizzard' ]; then
            NODES=`grep "# @"     ${RUN_SCRIPT} | grep  " node "`
            NODES_NEW=${NODES%$N_NODES}$N_NODES_NEW
            sed -i.sedbak s/"$NODES"/"$NODES_NEW"/g ${RUN_SCRIPT}
          fi
          if [ "${TARGET_MACHINE}" == 'thunder'  ]; then
            NODES=`grep "#SBATCH" ${RUN_SCRIPT} | grep  "nodes"`
            NODES_NEW=${NODES%$N_NODES}$N_NODES_NEW
            sed -i.sedbak s/"$NODES"/"$NODES_NEW"/g ${RUN_SCRIPT}
          fi
          #
	fi # N_PPNODE>1
        #
        N_PROCS_NEW=$(( N_NODES_NEW * N_PPNODE_NEW ))
        sed -i.sedbak s/"mpi_total_procs=$N_PROCS"/"mpi_total_procs=$N_PROCS_NEW"/g ${RUN_SCRIPT}
        rm ${RUN_SCRIPT}.sedbak
        #
        echo "Perform $TEST run"
        ${SCRIPT_DIR}/${RUN_SCRIPT}
        #
      else
        echo "No MPI parallelization test is peformed if: total number of MPI processes = $N_PROCS"
      fi # total number of procs > 1
      #
    else
      echo "No MPI parallelization test is peformed because: $MPI"
    fi # MPI = yes
    #
  else
    echo "Found $TEST run"
    TEST_POSSIBLE='yes'
  fi # OVERWRITE

  if [ "${TEST_POSSIBLE}" == 'yes' ]; then
    # compare base run with test run
    diff_results $MODEL_DIR $EXP_BASE $MODEL_DIR $EXP_TEST $TEST
    if [ "$DIFF_STATUS" == 0 ]; then
      PASSED_TESTS="$PASSED_TESTS $TEST"
      EXIT_STATUS=$(($EXIT_STATUS + 0))
    else
      FAILED_TESTS="$FAILED_TESTS $TEST"
      EXIT_STATUS=$(($EXIT_STATUS + 1))
    fi
  fi # TEST_POSSIBLE
fi # MODE


CMODES="o uo ro no mo uro uno umo rno rmo nmo urno urmo unmo rnmo urnmo"
if string_in_list $MD $CMODES; then
  TEST='omp'
  echo ' '
  echo "#################### perform $TEST test               ####################"
  echo ' '
  EXP_TEST=${EXPERIMENT}_${TEST}
  if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_TEST} ]; then
    cd ${MODEL_DIR}/run
    TEST_POSSIBLE='no'
    OMP=`grep with_openmp exp.${SCRIPT}.run`
    OMPYES='with_openmp="yes"'
    if [ "$OMP" == "$OMPYES" ]; then
      #
      # find out how many omp threads are in use
      #
      N_OMP_NUM_THREADS=`grep "export OMP_NUM_THREADS=" exp.${SCRIPT}.run`
      N_OMP_NUM_THREADS=${N_OMP_NUM_THREADS#'export OMP_NUM_THREADS='}
      N_ICON_THREADS=`grep "export ICON_THREADS=" exp.${SCRIPT}.run`
      N_ICON_THREADS=${N_ICON_THREADS#'export ICON_THREADS='}
      #
      if [ $N_OMP_NUM_THREADS -gt 1 ]; then
        #
	TEST_POSSIBLE='yes'
        #
        RUN_SCRIPT=exp.${EXP_TEST}.run
        cd ${MODEL_DIR}/run
        cp -f exp.${SCRIPT}.run ${RUN_SCRIPT}
        sed -i.sedbak s/${SCRIPT}/${EXP_TEST}/g ${RUN_SCRIPT}
        rm ${RUN_SCRIPT}.sedbak
        #
        N_OMP_NUM_THREADS_NEW=$(( N_OMP_NUM_THREADS - 1 ))
	N_ICON_THREADS_NEW=$(( N_ICON_THREADS - 1 ))
        #
        # change script variables
        sed -i.sedbak s/"export OMP_NUM_THREADS=$N_OMP_NUM_THREADS"/"export OMP_NUM_THREADS=$N_OMP_NUM_THREADS_NEW"/g ${RUN_SCRIPT}
        sed -i.sedbak s/"export ICON_THREADS=$N_ICON_THREADS"/"export ICON_THREADS=$N_ICON_THREADS_NEW"/g ${RUN_SCRIPT}
        #
        # change system variables where necessary
        if [ "${TARGET_MACHINE}" == 'blizzard' ]; then
          THREADS=`grep "# @"     ${RUN_SCRIPT} | grep  " task_affinity "`
          THREADS_NEW=${THREADS%\($N_OMP_NUM_THREADS\)}\($N_OMP_NUM_THREADS_NEW\)
          sed -i.sedbak s/"$PPNODE"/"$PPNODE_NEW"/g ${RUN_SCRIPT}
          THREADS=`grep "# @"     ${RUN_SCRIPT} | grep  " parallel_threads "`
          THREADS_NEW=${THREADS%$N_OMP_NUM_THREADS}$N_OMP_NUM_THREADS_NEW
          sed -i.sedbak s/"$THREADS"/"$THREADS_NEW"/g ${RUN_SCRIPT}
        fi
##        if [ "${TARGET_MACHINE}" == 'thunder'  ]; then
##          THREADS=`grep "#SBATCH" ${RUN_SCRIPT} | grep  "cpus-per-task"`
##          THREADS_NEW=${THREADS%$N_OMP_NUM_THREADS}$N_OMP_NUM_THREADS_NEW
##          sed -i.sedbak s/"$THREADS"/"$THREADS_NEW"/g ${RUN_SCRIPT}
##        fi
        #
        echo "Perform $TEST run"
        ${SCRIPT_DIR}/${RUN_SCRIPT}
        #
      else
        echo "No OMP parallelization test is performed if: number of OMP threads = $N_OMP_NUM_THREADS"
      fi # total number of omp threads > 1
      #
    else
      echo "No OMP parallelization test is peformed because: $OMP"
    fi # OMP = yes
    #
  else
    echo "Found $TEST run"
    TEST_POSSIBLE='yes'
  fi # OVERWRITE

  if [ "${TEST_POSSIBLE}" == 'yes' ]; then
    # compare base run with test run
    diff_results $MODEL_DIR $EXP_BASE $MODEL_DIR $EXP_TEST $TEST
    if [ "$DIFF_STATUS" == 0 ]; then
      PASSED_TESTS="$PASSED_TESTS $TEST"
      EXIT_STATUS=$(($EXIT_STATUS + 0))
    else
      FAILED_TESTS="$FAILED_TESTS $TEST"
      EXIT_STATUS=$(($EXIT_STATUS + 1))
    fi
  fi # TEST_POSSIBLE
fi # MODE


echo ' '
echo ' '
echo '#################### test summary                     ########################'
echo ' '
echo $PASSED_TESTS
echo $FAILED_TESTS
echo ' '
echo "=============================================================================="
date
echo $EXIT_STATUS > ${SCRIPT_DIR}/exp.test_icon.run.status
exit $EXIT_STATUS

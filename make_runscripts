#!/bin/ksh
#==============================================================================
# Creates the ICON run scripts
# Leonidas Linardakis, MPI-M, 2011-25-1
#==============================================================================
#==============================================================================
# The basic command for creating an ICON experiment run script is
#   
#  $make_runscript in_script=exp.<name> in_script=exec.iconrun EXPNAME=<name>
#
# By default the folder in use is ./run, and the run script is named exp.<name>.run.
# 
# Basic optional parameters for the $make_runscript command are:
#
#    out_script=<output run script name>. By default is <in_script>.run
#
#    in_folder=<input folder>. By default is run
#
#    out_folder=<output folder>. By default is =<in_folder>
#
#    mpi_procs_pernode=<number of mpi processes>. In the case of MPI configuration,
#       defines how many processes per node will be used.
# 
#    no_of_nodes=<Number of nodes>. In the case of MPI configuration,
#       defines how many nodes will be used.
# 
#    openmp_threads=<Number of openmp threads>. In the case of OPENMP
#       configuration, defines how many OPENMP threads will be used.
#
#    cpu_time=<wall time>. Defines the expected run wall time.
#  
#    <free_variable>=<value> Free variables can be passed to the run script
#       using this syntax. For example: EXPNAME=test, will result the
#       definition of the variable EXPNAME=test in the run script. 
#
# For more details see the parameters in the ./config/make_target_runscript
#==============================================================================
echo "-----------------------------------------------------------"
# set -x

base_folder=$(pwd)
input_folder=run
if [ x$1 = x ] ; then
  param=all
else  
  param=$1
fi
  
#==============================================================================
. $base_folder/config/set-up.info
use_shell=${use_shell:="/bin/ksh"}
# The $make_runscript command directs to the ./config/make_target_runscript
make_runscript="$use_shell ./config/make_target_runscript"

#==============================================================================
# define the runscripts to be created
make_restart_exp="false"
make_restart_post="false"
grid_list=""
exp_list=""
post_list=""

cd $input_folder
case $param in
  all)  # create all but not the restarts
    make_bb_grid="true"
    grid_list=`ls grid.*`
    exp_list=`ls exp.*`
    post_list=`ls post.*`
    ;;
  test)  # create only tests for buildbot
    make_restart_exp="true"
    make_restart_post="true"
    make_bb_grid="true"
    grid_list=""
    exp_list=`ls exp.test_*`
    post_list=`ls post.test_*`
    ;;
  post_test)  # create only postprocessing for buildbot
    make_restart_post="true"
    make_bb_grid="false"
    grid_list=""
    exp_list=""
    post_list=`ls post.test_*`
    ;;
  *)  # create only one experiment
    make_bb_grid="false"
    grid_list=""
    if [ -r "exp.$param" ] ; then
      exp_list="exp.$param"
    fi
    if [ -r "post.$param" ] ; then
      post_list="post.$param"
    fi
esac
cd $base_folder

#==============================================================================
# use express queue for builtbot experiments on blizzard
if [[ $use_target = "blizzard" && $use_mpi = "yes" ]] ; then
  use_queue="express"
else
  use_queue="default"
fi

#==============================================================================
#  Create the grid generator run scripts
#  NOTE: The grid generator runs with 1 MPI proccess, but can use the default OPENMP threads
#==============================================================================

for filename in $grid_list
do
  if [[ $filename != *.run && $filename != *~ && $filename != *.status ]] ; then
    $make_runscript in_folder=$input_folder in_script=${filename}  mpi_procs_pernode=1\
    queue="$use_queue" cpu_time="00:30:00"
  fi
done
  #  Create the grid generator for builtbot
if [ $make_bb_grid = "true" ] ; then
  $make_runscript in_folder=$input_folder in_script=grid.create_atmo_grids\
    in_script=grid.create_ocean_grids out_script=grid.create_bb_grids.run\
    mpi_procs_pernode=1 queue="$use_queue" cpu_time="00:30:00"
fi

#==============================================================================
# Create the ICON experiment run scripts
# These consist of the namelist definition in exp.<name> file and the
# run part, defined in the exec.iconrun file.
#
# Note: The ICON experiments require the definition of the EXPNAME=<name> variable
#==============================================================================
omp_stacksize=200M


#---------------------------------------------------------------
# returns "true" in accepted_script, if the script name is accepted
check_accept_script()
{
  # set -x
  check_accepted_filename=$1
  
  if [[ -r $input_folder/$filename ]] ; then
    accepted_script="true"
  else
    accepted_script="false"
    return 1
  fi
  
  case $check_accepted_filename in
    *.run)
       accepted_script="false"
       ;;
    *~)
       accepted_script="false"
       ;;
    *.status)
       accepted_script="false"
       ;;
   esac

   #--------------------------
   # check which scripts run with openmp
   if [[ $use_openmp = "yes" ]] ; then
     case $check_accepted_filename in
     *test*oce*)
        accepted_script="false"  #  ocean does not run with openmp
        ;;
     esac
   fi

   #--------------------------
   # check which scripts run without mpi
   if [[ $use_mpi != "yes" ]] ; then
     case $check_accepted_filename in
       *test_oce_parallel*)
          accepted_script="false"  
          ;;
       *nat_jww_nwp_mpiomp*)
          accepted_script="false"
          ;;
       *test_couple*)
          accepted_script="false"
          ;;
       esac
   fi

   #--------------------------
   # machine based checks
   case $use_target in
   
     blizzard)
       # echo this is blizzard for $check_accepted_filename
       # check which scripts run on blizzard
       # (p_test does not work, xlf gives inconsistent results )
       case $check_accepted_filename in
       *test_oce_parallel*)
          accepted_script="false"  
          ;;
       *nat_jww_nwp_mpiomp*)
          accepted_script="false"
          ;;
       esac
     ;; 

     sx9)
       case $check_accepted_filename in
       *test_oce_default*)
          accepted_script="false"
          ;;
       *test_oce_numeric*)
          accepted_script="false"
          ;;
       *test_nh_hdcp2_lam_r15000_modified*)
          accepted_script="false"
          ;;
       esac
     ;; 

     hpc)
       case $check_accepted_filename in
       *test_oce_default*)
          accepted_script="false"
          ;;
       *test_nh_hdcp2_lam_r15000_modified*)
          accepted_script="false"
          ;;
       esac
     ;; 

   esac
   
   #--------------------------
   # compiler based checks
   case $use_compiler in
   
     pgi)
       case $check_accepted_filename in
       *test_nat_jww_nwp_mpiomp*)
          accepted_script="false"  
          ;;
       esac
     ;; 
     
   esac       


   if [[ $accepted_script != "true" ]] ; then
     return 1
   fi

}
#---------------------------------------------------------------



for filename in $exp_list
do

  check_accept_script $filename
  if [[ $accepted_script = "true" ]] ; then

    name=${filename#*.}
    if [[ ${name} == test* ]]; then
      queue="$use_queue"
    else
      queue="default"
    fi
    case $name in
    *_nwp_*)
      $make_runscript in_folder=$input_folder in_script=${filename} in_script=exec.iconrun EXPNAME=${name}\
      cpu_time="04:00:00" memory_model="huge"  omp_stacksize="500M" queue="$queue"
      ;;
    *_nah_jww*)
      $make_runscript in_folder=$input_folder in_script=${filename} in_script=exec.iconrun EXPNAME=${name}\
      cpu_time="08:00:00" memory_model="large" omp_stacksize=$omp_stacksize queue="$queue"
      ;;
    *_nh35_tri_jws*)
      $make_runscript in_folder=$input_folder in_script=${filename} in_script=exec.iconrun EXPNAME=${name}\
      cpu_time="03:00:00" memory_model="small" queue="$queue"
      ;;
    *oce_default*)
      $make_runscript in_folder=$input_folder in_script=${filename} in_script=exec.iconrun EXPNAME=${name}\
      cpu_time="08:00:00" memory_model="large" omp_stacksize=$omp_stacksize
      ;;
    *)
      $make_runscript in_folder=$input_folder in_script=${filename} in_script=exec.iconrun EXPNAME=${name}\
      cpu_time="04:00:00" memory_model="large" omp_stacksize=$omp_stacksize
      ;;
    esac

      # special cases for queuing on blizzard
      if [ $use_target = "blizzard" ] ; then
        if [ $name = test_nh3_tri_tracer_solid_body ] ; then
          $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun\
          EXPNAME="$name"  memory_model="large" omp_stacksize=$omp_stacksize queue="express"
        fi
        if [ $use_openmp = "yes" ] ; then
          if [ $name = test_nh35_tri_jws ] ; then
            $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun\
            EXPNAME="$name"  memory_model="small" queue="express"
          fi
        fi
      fi


    # special cases for queuing on blizzard
    if [ $use_target = "blizzard" ] ; then
      if [ $name = test_nh3_tri_tracer_solid_body ] ; then
        $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun\
        EXPNAME="$name"  memory_model="large" omp_stacksize=$omp_stacksize queue="express"
      fi
      if [ $use_openmp = "yes" ] ; then
        if [ $name = test_nh35_tri_jws ] ; then
          $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun\
          EXPNAME="$name"  memory_model="small" queue="express"
        fi
      fi
    fi
    
  fi
  
done
#==============================================================================


#==============================================================================
# use express queue for some of the builtbot seq,openmp experiments on blizzard
# if [ $make_restart_exp = "true" ] ; then
#   if [[ $use_target = "blizzard" ]] ; then
# 
#     name=test_nh3_tri_tracer_solid_body
#     $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun\
#     EXPNAME="$name"  memory_model="large" omp_stacksize=$omp_stacksize queue="express"
# 
#     if [[ $use_openmp = "yes" ]] ; then
# 
#       name=test_nh35_tri_jws
#       $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun\
#       EXPNAME="$name"  memory_model="small" queue="express"
# 
#     fi
#   fi
# fi

#==============================================================================
# special treatment for exp.couple_atmo-radiation
# if [[  $use_target == "mpipc" && $use_openmp == "yes" ]] ; then
#   name=couple_atmo-radiation
#   $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun EXPNAME="$name" openmp_threads=3
# fi
#==============================================================================


#==============================================================================
# Create the postprocessing scripts
#
# NOTE: The postprocessing scripts are all sequential, so we define:
#    with_mpi="no" with_openmp="no"
#==============================================================================
for filename in $post_list
do
  check_accept_script $filename
  if [[ $accepted_script = "true" ]] ; then
    $make_runscript in_folder=$input_folder in_script=${filename} out_script=${filename}.run\
    with_mpi="no" with_openmp="no" queue="express" cpu_time="00:30:00"
  fi
done


#==============================================================================
# following is the section for creating the restart tests
#==============================================================================
create_restart()
{
  # set -x
  name=$1
  check_accept_script $name
  if [[ $accepted_script != "true" ]] ; then
    return 1
  fi

  if [ $make_restart_exp = "true" ] ; then

    $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun\
      in_script=exp.$name in_script=exec.iconrun EXPNAME="$name" test_restart="true" \
      queue="$queue" cpu_time="$cpu_time"

  fi

  # postprocessing for comparing the restarts
  if [ $make_restart_post = "true" ] ; then
    $make_runscript in_folder=$input_folder in_script=post.test_compare_restarts out_script=post.${name}_compare_restarts.run\
      with_mpi="no" with_openmp="no" queue="express" cpu_time="00:30:00" EXPNAME="$name"
  fi
}

#==============================================================================
# special treatment for test_hat_jww-moist_cld-cnv-vdf
# this includes the restart in the test_hat_jww-moist_cld-cnv-vdf_restart
#
# if [[ $use_target = "blizzard" &&  $use_openmp = "yes" ]] ; then
#   queue="express"
# else
queue="$use_queue"
# fi
cpu_time="02:00:00"
create_restart test_hat_jww-moist_cld-cnv-vdf 


#==============================================================================
# special treatment for test_hat_jww
# this includes the restart in the test_hat_jww
cpu_time="04:00:00"
create_restart test_hat_jww 


#==============================================================================
# special treatment for exp.test_oce_default
#
cpu_time="01:00:00"
create_restart test_oce_default


#==============================================================================
# special treatment for test_nh35_tri_jws
# this includes the restart in the exp.test_nh35_tri_jws_restart
#
#queue="default"
cpu_time="03:00:00"
create_restart test_nh35_tri_jws
#==============================================================================

#==============================================================================
# check typical nh ape setup for exp.nat_ape-dec
# if [ $make_restart_exp = "true" ] ; then
#   if [ $use_mpi = "yes" ] ; then
#   name=nat_ape-dec
#   exp_name=test_nat_ape-dec
#   runname=exp.${exp_name}.run
# 
#   $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun EXPNAME=${exp_name} out_script=${runname} \
#   atmo_dyn_gridname="iconR2B04_DOM01" atmo_rad_gridname="iconR2B03_DOM00" division_method=1 nsteps=720 cpu_time="04:00:00" \
#   memory_model="small"
#   $make_runscript in_folder=$input_folder in_script=exp.$name in_script=exec.iconrun EXPNAME=${exp_name} out_script=${runname} \
#   atmo_dyn_gridname="iconR2B04_DOM01" atmo_rad_gridname="" division_method=1 nsteps=720 cpu_time="04:00:00" \
#   memory_model="small"
#   fi
# fi
#==============================================================================

echo "-----------------------------------------------------------"

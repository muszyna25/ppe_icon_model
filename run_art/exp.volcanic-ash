#!/bin/bash

CENTER=DKRZ

basedir=/scratch/local1/m214089/icon-kit
icon_data_poolFolder=/pool/data/ICON/grids/private/mpim/icon_preprocessing/source/

EXPNAME=atm_amip_test_kit
OUTDIR=/scratch/local1/m214089/TESTSUITE_OUTPUT/20191012/AMIP_volc
ICONFOLDER=$basedir
ARTFOLDER=$basedir/src/art
INDIR=/scratch/local1/m214089/TESTSUITE/

EXP=AMIP_volc

lart=.True.

FILETYPE=4
COMPILER=nag

restart=.False.
read_restart_namelists=.False.

# Remove folder  from OUTDIR for postprocessing output
OUTDIR_PREFIX=/scratch/local1/m214089/TESTSUITE_OUTPUT/20191012

# Create output directory and go to this directory

if [ ! -d $OUTDIR ]; then
    mkdir -p $OUTDIR
fi
cd $OUTDIR

ln -sf ${ARTFOLDER}/runctrl_examples/init_ctrl/mozart_coord.nc              ${OUTDIR}/mozart_coord.nc
ln -sf ${ARTFOLDER}/runctrl_examples/init_ctrl/Linoz2004Br.dat              ${OUTDIR}/Linoz2004Br.dat
ln -sf ${ARTFOLDER}/runctrl_examples/init_ctrl/Simnoy2002.dat               ${OUTDIR}/Simnoy2002.dat

ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_scat-aer.dat            ${OUTDIR}/FJX_scat-aer.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_j2j.dat                 ${OUTDIR}/FJX_j2j.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_scat-cld.dat            ${OUTDIR}/FJX_scat-cld.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_scat-ssa.dat            ${OUTDIR}/FJX_scat-ssa.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_scat-UMa.dat            ${OUTDIR}/FJX_scat-UMa.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_spec_extended.dat       ${OUTDIR}/FJX_spec_extended.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_spec.dat                ${OUTDIR}/FJX_spec.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/atmos_std.dat               ${OUTDIR}/atmos_std.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/atmos_h2och4.dat            ${OUTDIR}/atmos_h2och4.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_j2j_extended.dat        ${OUTDIR}/FJX_j2j_extended.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_spec_extended.dat       ${OUTDIR}/FJX_spec_extended.dat
ln -sf ${ARTFOLDER}/runctrl_examples/photo_ctrl/FJX_spec_extended_lyman.dat ${OUTDIR}/FJX_spec_extended_lyman.dat

ln -sf $basedir/ali/volcano_list_Eyjafjoell.txt                             ${OUTDIR}/volcano_list_Eyjafjoell.txt
ln -sf $basedir/ali/volcspec_2mom_Eyjafjoell.txt                            ${OUTDIR}/volcspec_2mom_Eyjafjoell.txt 
ln -sf $basedir/ali/tracers_volc.xml                                        ${OUTDIR}/tracers_volc.xml
ln -sf $basedir/ali/modes.xml                                               ${OUTDIR}/modes.xml   

grid_id=0005
grid_refinement=R02B04
grid_label=G
grid_name=icon_grid_${grid_id}_${grid_refinement}_${grid_label}
atmo_dyn_grids="'${grid_name}.nc',"


# start and end date+time
start_date=${start_date:="1979-01-01T00:00:00"}
    end_date=${end_date:="1979-01-03T00:00:00"}

# restart intervals
checkpoint_interval="P1D"
restart_interval="P3D"

# output intervals
output_interval="PT6H"
file_interval="PT24H"

# namelist files
atmo_namelist=NAMELIST_${EXPNAME}_atm
jsbach_namelist=NAMELIST_${EXPNAME}_lnd

master_namelist=icon_master.namelist
no_of_models=1

if [ x$end_date = x ]
then
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
 experimentStartDate  = "$start_date"
 restartTimeIntval    = "$restart_interval"
 checkpointTimeIntval = "$checkpoint_interval"
/
&time_nml
 is_relative_time = .false.
/
EOF
else
if [ x$calendar = x ]
then
  calendar='proleptic gregorian'
  calendar_type=1
else
  calendar=$calendar
  calendar_type=$calendar_type
fi
cat > $master_namelist << EOF
&master_nml
 lrestart               = $restart
 read_restart_namelists = $read_restart_namelists
/
&master_time_control_nml
 calendar               = "$calendar"
 checkpointTimeIntval   = "$checkpoint_interval"
 restartTimeIntval      = "$restart_interval"
 experimentStartDate    = "$start_date"
 experimentStopDate     = "$end_date"
/
&time_nml
 is_relative_time = .false.
/
&master_model_nml
  model_type=1
  model_name="ATMO"
  model_namelist_filename="$atmo_namelist"
  model_min_rank=1
  model_max_rank=65536
  model_inc_rank=1
/
EOF
fi


#--------------------------------------------------------------------------------------------------

# (3) Define the model configuration

# JSBACH settings
run_jsbach=yes
jsbach_usecase=jsbach_pfts    # jsbach_lite or jsbach_pfts
jsbach_with_lakes=yes
jsbach_with_hd=no
jsbach_with_carbon=no         # yes needs jsbach_pfts usecase
jsbach_check_wbal=no          # check water balance

if [[ $run_jsbach == @(yes|true) ]]
then
  cat >> $master_namelist << EOF
&jsb_control_nml
 is_standalone      = .false.
 restart_jsbach     = .false.
 debug_level        = 0
 timer_level        = 0
/
&jsb_model_nml
 model_id = 1
 model_name = 'JSBACH'
 model_shortname = 'jsb'
 model_description = 'JSBACH land surface model'
 model_namelist_filename = "${jsbach_namelist}"
/
EOF
fi
# Some further processing for land configuration
# ----------------------------------------------
#
ljsbach=$([ "${run_jsbach:=no}" == yes ] && echo .TRUE. || echo .FALSE. )
llake=$([ "${jsbach_with_lakes:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )
lcarbon=$([ "${jsbach_with_carbon:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )
#
if [[ $jsbach_usecase == *pfts* ]]
then
  pft_file_tag="11pfts_"
else
  pft_file_tag=""
fi

# atmospheric dynamics and physics
# --------------------------------
cat > ${atmo_namelist} << EOF
!
&parallel_nml
 nproma           = ${nproma}
/
&grid_nml
 dynamics_grid_filename = ${atmo_dyn_grids}
/
&run_nml
 num_lev          = 47          ! number of full levels
 modelTimeStep    = "PT10M"
 ltestcase        = .FALSE.     ! run testcase
 ldynamics        = .TRUE.      ! dynamics
 ltransport       = .TRUE.      ! transport
 ntracer          = 3           ! number of tracers; 3: hus, clw, cli; 4: hus, clw, cli, o3
 iforcing         = 2           ! 0: none, 1: HS, 2: ECHAM, 3: NWP
 output           = 'nml'
 msg_level        = 15          ! level of details report during integration 
 restart_filename = "${EXPNAME}_restart_atm_<rsttime>.nc"
 activate_sync_timers = .TRUE.
 lart = .True.
/
&extpar_nml
 itopo            = 1           ! 1: read topography from the grid file
 l_emiss          = .FALSE.
/
&initicon_nml
 init_mode        = 2           ! 2: initialize from IFS analysis
 ifs2icon_filename= "ifs2icon.nc"
/
&nonhydrostatic_nml
 ndyn_substeps    = 10           ! dtime/dt_dyn
 damp_height      = 50000.      ! [m]
 rayleigh_coeff   = 0.10
 vwind_offctr     = 0.2
 divdamp_fac      = 0.004
/
&interpol_nml
 rbf_scale_mode_ll = 1
/
&sleve_nml
 min_lay_thckn    = 40.         ! [m]
 top_height       = 83000.      ! [m]
 stretch_fac      = 0.9
 decay_scale_1    = 4000.       ! [m]
 decay_scale_2    = 2500.       ! [m]
 decay_exp        = 1.2
 flat_height      = 16000.      ! [m]
/
&diffusion_nml
/
&transport_nml
!                   hus,clw,cli
 ivadv_tracer     =   3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
 itype_hlimit     =   3,  4,  4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
 ihadv_tracer     =  52,  2,  2, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22
/
&echam_phy_nml
!
! domain 1
! --------
!
! atmospheric physics (""=never)
 echam_phy_config(1)%dt_rad = "PT2H"
 echam_phy_config(1)%dt_vdf = "PT10M"
 echam_phy_config(1)%dt_cnv = "PT10M"
 echam_phy_config(1)%dt_cld = "PT10M"
 echam_phy_config(1)%dt_gwd = "PT10M"
 echam_phy_config(1)%dt_sso = "PT10M"
!
! atmospheric chemistry (""=never)
 echam_phy_config(1)%dt_mox = ""
 echam_phy_config(1)%dt_car = ""
 echam_phy_config(1)%dt_art = "PT10M"
!
! surface (.TRUE. or .FALSE.)
 echam_phy_config(1)%ljsb   = ${ljsbach}
 echam_phy_config(1)%lamip  = .TRUE.
 echam_phy_config(1)%lice   = .TRUE.
 echam_phy_config(1)%lmlo   = .FALSE.
 echam_phy_config(1)%llake  = ${llake}
!
/
&echam_rad_nml
!
! domain 1
! --------
!
 echam_rad_config(1)%isolrad    =  1
 echam_rad_config(1)%irad_h2o   =  1
 echam_rad_config(1)%irad_co2   =  4
 echam_rad_config(1)%irad_ch4   =  4
 echam_rad_config(1)%irad_n2o   =  4
 echam_rad_config(1)%irad_o3    =  8
 echam_rad_config(1)%irad_o2    =  2
 echam_rad_config(1)%irad_cfc11 =  4
 echam_rad_config(1)%irad_cfc12 =  4
 echam_rad_config(1)%irad_aero  = 18
 echam_rad_config(1)%ighg       =  1
/
&echam_gwd_nml
/
&echam_sso_nml
/
&echam_vdf_nml
/
&echam_cnv_nml
/
&echam_cld_nml
/
&sea_ice_nml
/

&art_nml
 iart_ntracer      = 6
 lart_diag_out     = .TRUE.
 lart_aerosol      = .TRUE.
 iart_volcano      = 2
 cart_volcano_file = 'volcano_list_Eyjafjoell.txt'
 cart_input_folder = ''
 cart_aerosol_xml  = 'tracers_volc.xml'
 cart_modes_xml    = 'modes.xml'
/
EOF

# &art_nml
#  lart_diag_out   = .TRUE.
#  lart_aerosol    = .FALSE.
#  lart_chem       = .TRUE.
#  iart_chem_mechanism = 0
#  lart_passive    = .TRUE.
#  cart_chemistry_xml= '${ARTFOLDER}/runctrl_examples/xml_ctrl/tracers_chemtracer_amip.xml'
#  cart_passive_xml= '${ARTFOLDER}/runctrl_examples/xml_ctrl/tracers_passive_amip.xml'
#  cart_emiss_xml_file =  '${ARTFOLDER}/runctrl_examples/emiss_ctrl/new_emissions_R2B04.xml'
#  cart_io_suffix = "ECHAM"
#  cart_input_folder = "${OUTDIR}"
#  !lart_qv_f = .FALSE.
#  !lart_ch4 = .FALSE.
# /
# EOF

# land surface and soil
# ---------------------
cat > ${jsbach_namelist} << EOF
&jsb_model_nml
  usecase         = "${jsbach_usecase}"
  use_lakes       = ${llake}
  fract_filename  = "bc_land_frac.nc"
  output_tiles    = ${output_tiles}     ! List of tiles to output
/
&jsb_seb_nml
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_rad_nml
  use_alb_veg_simple = .FALSE.          ! Use TRUE for jsbach_lite, FALSE for jsbach_pfts
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_turb_nml
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_sse_nml
  l_heat_cap_map  = .FALSE.
  l_heat_cond_map = .FALSE.
  l_heat_cap_dyn  = .FALSE.
  l_heat_cond_dyn = .FALSE.
  l_snow          = .TRUE.
  l_dynsnow       = .TRUE.
  l_freeze        = .TRUE.
  l_supercool     = .TRUE.
  bc_filename     = 'bc_land_soil.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_hydro_nml
  l_organic       = .FALSE.
  bc_filename     = 'bc_land_soil.nc'
  ic_filename     = 'ic_land_soil.nc'
  bc_sso_filename = 'bc_land_sso.nc'
/
&jsb_assimi_nml
  active          = .TRUE.              ! Use FALSE for jsbach_lite, TRUE for jsbach_pfts
/
&jsb_pheno_nml
  scheme          = 'logrop'            ! scheme = logrop / climatology; use climatology for jsbach_lite
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_carbon_nml
  active                 = ${lcarbon}
  bc_filename            = 'bc_land_carbon.nc'
  ic_filename            = 'ic_land_carbon.nc'
  read_cpools            = .FALSE.
  !fire_frac_wood_2_atmos = 0.2
/
&jsb_fuel_nml
  active                 = ${lcarbon}
  fuel_algorithm         = 1
/
&jsb_disturb_nml
  active                  = .FALSE.
  ic_filename             = 'ic_land_soil.nc'
  bc_filename             = 'bc_land_phys.nc'
  fire_algorithm          = 1
  windbreak_algorithm     = 1
  lburn_pasture           = .FALSE.
  !fire_litter_threshold  = 16.67
  !fire_rel_hum_threshold = 70.0
  !fire_minimum_woody     = 0.002
  !fire_minimum_grass     = 0.006
  !fire_tau_woody         = 6.0
  !fire_tau_grass         = 2.0
  !wnd_threshold          = 2.25
  !wnd_damage_scale       = 5.e-03
/
EOF
if [[ ${jsbach_with_hd} = yes ]]
then
  cat >> ${jsbach_namelist} << EOF
&jsb_hd_nml
  active               = .TRUE.
  routing_scheme       = 'full'
  bc_filename          = 'bc_land_hd.nc'
  diag_water_budget    = .TRUE.
  debug_hd             = .FALSE.
  enforce_water_budget = .TRUE.         ! True: stop in case of water conservation problem
/
EOF
fi

#--------------------------------------------------------------------------------------------------

# (4) Define the input

# model files
#
ln -sf ${basedir}/data/lsdata.nc                                 ./
ln -sf ${basedir}/data/ECHAM6_CldOptProps.nc                     ./

# namelist files
#
#cp ${basedir}/run/${atmo_namelist}                       ./
#cp ${basedir}/run/${jsbach_namelist}                        ./

# dictionary file for output variable names
#
dict_file="dict.${EXPNAME}"
cat ${basedir}/run/dict.iconam.mpim  > ${dict_file}
#cp ${basedir}/run/${dict_file}                           ./

# gridfiles
#
ln -sf $icon_data_poolFolder/grids/$grid_name.nc $grid_name.nc


# initial conditions
#
# - atmosphere: ECMWF analysis, 1979-01-01T00:00:00Z
datadir=${icon_data_poolFolder}/initial_condition
ln -sf $datadir/ifs2icon_1979010100_${grid_refinement}_G.nc      ./ifs2icon.nc
#
# - land: source?, date+time?
datadir=${icon_data_poolFolder}/preliminary_land/r0002/${grid_refinement}/land
ln -sf ${datadir}/ic_land_soil_1976.nc                           ./ic_land_soil.nc
# added in namelist, but not active and not yet available (2017-Dec-07)
#ln -sf ${datadir}/ic_land_carbon_1976.nc                         ./ic_land_carbon.nc

# boundary conditions
#
# range of years for yearly files
# assume start_date and end_date have the format yyyy-...
start_year=$(( ${start_date%%-*} - 1 ))
end_year=$(( ${end_date%%-*} + 1 ))
#
# - well mixed greenhouse gases
datadir=${icon_data_poolFolder}/greenhouse_gases
ln -sf $datadir/greenhouse_historical.nc                         ./bc_greenhouse_gases.nc
#
# - ozone
# -- for irad_o3=8
year=$start_year
while [[ $year -le $end_year ]]
do
  if [[ $year -le 2014 ]]
  then
    datadir=${icon_data_poolFolder}/ozone/cmip6/${grid_refinement}
    ln -sf $datadir/bc_ozone_historical_${year}.nc               ./bc_ozone_${year}.nc
  else
    datadir=${icon_data_poolFolder}/ozone/cmip6/${grid_refinement}
    ln -sf $datadir/bc_ozone_historical_2014.nc                  ./bc_ozone_${year}.nc
  fi
  (( year = year+1 ))
done
# -- for irad_o3=1 with Cariolle ozone chemistry
datadir=${icon_data_poolFolder}/greenhouse_gases
ln -sf $datadir/bc_ozone_cariolle.nc                             ./cariolle_coeff.nc
#
# - tropospheric anthropogenic aerosols, simple plumes
  ln -sf ${basedir}/data/MACv2.0-SP_v1.nc                        ./MACv2.0-SP_v1.nc
#
# - Kinne background aerosols are needed for the years 1849, 1850, 1851 
#   accessing all the same data of 1865:
year=1849
while [[ $year -le 1851 ]]
do
  datadir=${icon_data_poolFolder}/aerosol_29-06-2018/kinne/${grid_refinement}
  ln -sf $datadir/bc_aeropt_kinne_lw_b16_coa.nc                  ./bc_aeropt_kinne_lw_b16_coa.nc
  ln -sf $datadir/bc_aeropt_kinne_sw_b14_coa.nc                  ./bc_aeropt_kinne_sw_b14_coa.nc
  ln -sf $datadir/bc_aeropt_kinne_sw_b14_fin_1865.nc             ./bc_aeropt_kinne_sw_b14_fin.nc
  (( year = year+1 ))
done
#
# - stratospheric aerosol
year=$start_year
while [[ $year -le $end_year ]]
do
  if [[ $year -le 1999 ]]
  then
    datadir=${icon_data_poolFolder}/aerosol/stenchikov
    ln -sf $datadir/bc_aeropt_stenchikov_lw_b16_sw_b14_${year}.nc  ./bc_aeropt_stenchikov_lw_b16_sw_b14_${year}.nc
  else
    datadir=${icon_data_poolFolder}/aerosol/stenchikov
    ln -sf $datadir/bc_aeropt_stenchikov_lw_b16_sw_b14_1999.nc     ./bc_aeropt_stenchikov_lw_b16_sw_b14_${year}.nc
  fi
  (( year = year+1 ))
done
#
# - sst and sic
datadir=${icon_data_poolFolder}/sst_and_seaice/1.1.2
ln -sf $datadir/sic_${grid_refinement}.nc                        ./bc_sic.nc
ln -sf $datadir/sst_${grid_refinement}.nc                        ./bc_sst.nc
#
# - ssi and tsi
datadir=${icon_data_poolFolder}/solar_radiation/3.2
ln -sf $datadir/swflux_14band_cmip6_1850-2299-v3.2.nc            ./bc_solar_irradiance_sw_b14.nc
#
# - topography and sso parameters
datadir=${icon_data_poolFolder}/preliminary_land_22-02-2018/${grid_refinement}/land
ln -sf $datadir/bc_land_sso_1976.nc                              ./bc_land_sso.nc
#
# - land parameters
datadir=${icon_data_poolFolder}/preliminary_land/r0002/${grid_refinement}/land
ln -sf $datadir/bc_land_frac_${pft_file_tag}1976.nc              ./bc_land_frac.nc
ln -sf $datadir/bc_land_phys_1976.nc                             ./bc_land_phys.nc
ln -sf $datadir/bc_land_soil_1976.nc                             ./bc_land_soil.nc
# added in namelist, but not active and not yet available (2017-Dec-07)
#ln -sf $datadir/bc_land_carbon_1976.nc                           ./bc_land_carbon.nc
# The following bc_land_hd-file is not yet available...
if [[ ${jsbach_with_hd} = yes ]]; then
  ln -sf $datadir/bc_land_hd.nc                                  ./bc_land_hd.nc
fi
#
# - lctlib file for JSBACH
ln -sf ${basedir}/externals/jsbach/data/lctlib_nlct21.def        ./lctlib_nlct21.def

#--------------------------------------------------------------------------------------------------

# (5) Define the output

# Parameters for all output files
# -------------------------------
cat >> ${atmo_namelist} << EOF
&io_nml
 output_nml_dict  = "${dict_file}"
 netcdf_dict      = "${dict_file}"
 lnetcdf_flt64_output = .TRUE.
 itype_pres_msl   = 4
 restart_file_type= 5
 !restart_write_mode = "joint procs multifile"    !not necessary/useful in default r2b4 setup
/
EOF

# Define output files
# -------------------
#
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>
#
# 3-dimensional files include 'ps' and 'pfull' to allow the vertical
# interpolation to pressure levels by cdo ap2pl.

output_atm_cgrid=yes
#
if [[ "$output_atm_cgrid" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_cgrid"
 filename_format  = "<output_filename>_<levtype_l>"
 filetype         = 4
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"       ! output_start = output_end
 output_end       = "${start_date}"       ! --> write once only irrespective of
 output_interval  = "${output_interval}"  !     the output interval and
 file_interval    = "${file_interval}"    !     the file interval
 ml_varlist       = 'clon'    , 'clat'    , 'areacella',
                    'zghalf'  , 'zg'      ,
/
EOF
fi


output_atm_3d=yes
#
if [[ "$output_atm_3d" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_old"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 4
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'      , 'pfull'   , 'zg'      ,
                    'rho'     , 'ta'      ,
                    'ua'      , 'va'      , 'wap'     ,
                    'hus'     , 'clw'     , 'cli'     ,
                    'hur'     , 'cl'      ,
                    !'qo3_phy' ,
/
EOF
fi


output_atm_2d=yes
#
if [[ "$output_atm_2d" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_2d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 4
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'      , 'psl'     ,
                    'cosmu0'  ,
                    'rsdt'    ,
                    'rsut'    , 'rsutcs'  , 'rlut'    , 'rlutcs'  ,
                    'rsds'    , 'rsdscs'  , 'rlds'    , 'rldscs'  ,
                    'rsus'    , 'rsuscs'  , 'rlus'    ,
                    'ts'      ,
                    'sic'     , 'sit'     ,
                    'albedo'  ,
                    'clt'     ,
                    'prlr'    , 'prls'    , 'prcr'    , 'prcs'    ,
                    'pr'      , 'prw'     , 'cllvi'   , 'clivi'   ,
                    'hfls'    , 'hfss'    , 'evspsbl' ,
                    'tauu'    , 'tauv'    ,
                    'tauu_sso', 'tauv_sso', 'diss_sso',
                    'sfcwind' , 'uas'     , 'vas'     ,
                    'tas'     , 'dew2'    ,
                    'ptp'     ,
/
EOF
fi


output_phy_3d=yes
#
if [[ "$output_phy_3d" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_phy_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 4
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'           , 'pfull'        , 'zg'           ,
                    'tend_ta'      , 'tend_ta_dyn'  , 'tend_ta_phy'  ,
                    'tend_ta_rlw'  , 'tend_ta_rsw'  ,
                    'tend_ta_vdf'  , 'tend_ta_gwd'  , 'tend_ta_sso'  ,
                    'tend_ta_cnv'  , 'tend_ta_cld'  , 
                    'tend_ua'      , 'tend_ua_dyn'  , 'tend_ua_phy'  ,
                    'tend_ua_vdf'  , 'tend_ua_gwd'  , 'tend_ua_sso'  ,
                    'tend_ua_cnv'  , 
                    'tend_va'      , 'tend_va_dyn'  , 'tend_va_phy'  ,
                    'tend_va_vdf'  , 'tend_va_gwd'  , 'tend_va_sso'  ,
                    'tend_va_cnv'  ,
                    'tend_qhus'    , 'tend_qhus_dyn', 'tend_qhus_phy',
                    'tend_qhus_cld', 'tend_qhus_cnv', 'tend_qhus_vdf',
                    !'tend_qhus_mox'
/
EOF
fi


output_trc_3d=yes
#
if [[ "$output_trc_3d" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_trc_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 4
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'        , 'pfull'     , 'zg'        ,
                    'mairvi_phy',
                    'mdryvi_phy',
                    'mh2ovi_phy',
                    'qhus_phy'  , 'mhusvi_phy', 'tend_mhusvi_phy',
                    'qclw_phy'  , 'mclwvi_phy', 'tend_mclwvi_phy',
                    'qcli_phy'  , 'mclivi_phy', 'tend_mclivi_phy',
                    !'qo3_phy'   , 'mo3vi_phy' , 'tend_mo3vi_phy',
/
EOF
fi


output_aer_3d=no # "yes" needs lrad_aero_diag=.TRUE. in radiation_nml
#
if [[ "$output_aer_3d" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_aer_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 4
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'          , 'pfull'       , 'zg'          ,
                    'aer_aod_533' , 'aer_ssa_533',  'aer_asy_533' , 
                    'aer_aod_2325', 'aer_ssa_2325', 'aer_asy_2325', 
                    'aer_aod_9731',
/
EOF
fi


# minimal jsbach output for running atm_amip experiment
# for more jsbach output see exp.atm_amip_les
#
output_lnd=yes
#
if [[ "$output_lnd" == "yes" ]]; then
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 4
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'pheno_lai_box'         , 'pheno_fract_fpc_veg'         , 'hydro_fract_water_box' ,
                    'hydro_fract_snow_box'  , 'hydro_w_skin_box'            , 'hydro_w_snow_box'      ,
                    'hydro_w_soil_column_box'
/
EOF
fi

cat >> ${atmo_namelist} << EOF        
&output_nml
 output_filename            = '${EXP}-aerosol-remap'                ! file name base
 filetype                   =  4                        ! output format: 2=GRIB2, 4=NETCDFv2
 filename_format            = "<output_filename>_<levtype_l>_<datetime2>"
 output_grid                = .TRUE.
 output_start               = "${start_date}"
 output_end                 = "${end_date}"
 output_interval            = "${output_interval}"
 file_interval              = "${file_interval}"
 include_last               = .FALSE.
 ml_varlist                 = 'group:ART_AEROSOL'
 remap                      = 1
 reg_lon_def                = -180.,0.5,179.5
 reg_lat_def                = 90.,-0.5, -90.
/
EOF

#   cat >> ${atmo_namelist} << EOF

# &output_nml
#  output_filename  = "${EXPNAME}_atm_3d"
#  filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
#  remap            = 0
#  output_grid      = .TRUE.
#  output_start     = "${start_date}"
#  output_end       = "${end_date}"
# output_interval  = "${output_interval}"
#  file_interval    = "${file_interval}"
#  include_last     = .TRUE.
#  p_levels = 100000 , 97500 , 95000 , 92500 , 90000 , 87500  ,85000,  82500 , 80000,  77500, 
#  75000,  72500,  70000,  67500,  65000,  62500,  60000,  57500,  55000,  52500,
#   50000,   47500,  45000,  42500,  40000,  37500,  35000,  32500,  30000,  27500,
#   25000,  22500,  20000,  17500,  15000,  12500,  10000,   7000,   5000,   3000,
#    2000,   1000,    700,    500,    300,    200,    100, 70, 50, 30, 20, 10, 5, 1


#  ml_varlist       = 'ta','ua','va','wap','hus','hur','cl','clw','cli','rho','tro3'
#  pl_varlist =  'ta','ua','va','wap','hus','hur','tro3', 'TRO3_chemtr', 'TRAGE_chemtr','cli', 'TR_sts', 'TR_trn', 
#   'TR_trt', 'TR_trs', 'TR_tiln', 'TR_tils', 'wa'
# /

# &output_nml
#  output_filename  = "${EXPNAME}_atm_3d_reg"
#  filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
#  remap            = 0
#  output_grid      = .TRUE.
#  output_start     = "${start_date}"
#  output_end       = "${end_date}"
#  output_interval  = "${output_interval}"
#  file_interval    = "${file_interval}"
#  include_last     = .TRUE.
#  p_levels = 100000 , 97500 , 95000 , 92500 , 90000 , 87500  ,85000,  82500 , 80000,  77500, 
#  75000,  72500,  70000,  67500,  65000,  62500,  60000,  57500,  55000,  52500,
#   50000,   47500,  45000,  42500,  40000,  37500,  35000,  32500,  30000,  27500,
#   25000,  22500,  20000,  17500,  15000,  12500,  10000,   7000,   5000,   3000,
#    2000,   1000,    700,    500,    300,    200,    100, 70, 50, 30, 20, 10, 5, 1
#  ml_varlist       = 'ta','ua','va','wap','hus','hur','cl','clw','cli','rho','tro3'
#                     'zg','pfull','ps', 'group:ART_CHEMISTRY',  'group:ART_PASSIVE','qTRH2O_feed_phy','tend_qTRO3_phy', 'tend_qTRAGE_dyn','tend_qTRAGE_phy','tend_qTRAGE', 'wa',  'tend_qhus_phy',
#                     'tend_qhus'    , 'tend_qhus_dyn', 'tend_qhus_phy','tend_ta'      , 'tend_ta_dyn'  , 'tend_ta_phy'  ,
#                     'tend_ta_rlw'  , 'tend_ta_rsw'  ,
#                     'tend_ta_vdf'  , 'tend_ta_gwd'  , 'tend_ta_sso'  ,
#                     'tend_ta_cnv'  , 'tend_ta_cld'  ,
#                     'tend_ua'      , 'tend_ua_dyn'  , 'tend_ua_phy'  ,
#                     'tend_ua_vdf'  , 'tend_ua_gwd'  , 'tend_ua_sso'  ,
#                     'tend_ua_cnv'  ,
#                     'tend_va'      , 'tend_va_dyn'  , 'tend_va_phy'  ,
#                     'tend_va_vdf'  , 'tend_va_gwd'  , 'tend_va_sso'  ,
#                     'tend_va_cnv'  ,
#                     'tend_qhus'    , 'tend_qhus_dyn', 'tend_qhus_phy',
#                     'tend_qhus_cld', 'tend_qhus_cnv', 'tend_qhus_vdf','wa'

#  pl_varlist =  'ta','ua','va','wap','hus','hur','tro3','TRH2O_chemtr', 'TRO3_chemtr', 'TRAGE_chemtr', 'TR_sts', 'TR_trn','cli', 'TRH2O_feed_chemtr','tend_ta'      , 'tend_ta_dyn'  , 'tend_ta_phy'  ,
#                     'tend_ta_rlw'  , 'tend_ta_rsw'  ,
#                     'tend_ta_vdf'  , 'tend_ta_gwd'  , 'tend_ta_sso'  ,
#                     'tend_ta_cnv'  , 'tend_ta_cld'  ,
#                     'tend_ua'      , 'tend_ua_dyn'  , 'tend_ua_phy'  ,
#                     'tend_ua_vdf'  , 'tend_ua_gwd'  , 'tend_ua_sso'  ,
#                     'tend_ua_cnv'  ,
#                     'tend_va'      , 'tend_va_dyn'  , 'tend_va_phy'  ,
#                     'tend_va_vdf'  , 'tend_va_gwd'  , 'tend_va_sso'  ,
#                     'tend_va_cnv'  ,
#                     'tend_qhus'    , 'tend_qhus_dyn', 'tend_qhus_phy',
#                     'tend_qhus_cld', 'tend_qhus_cnv', 'tend_qhus_vdf',
# 'TR_trt', 'TR_trs', 'TR_tiln', 'TR_tils' , 'wa', 'TRCH4_chemtr'
#    h_levels = 65000, 62500, 60000, 57500,  55000,  52500,
#  754   50000,   47500,  45000,  42500,  40000,  37500,  35000,  32500,  30000,  27500,
#  755   25000,  22500,  20000,  17500,  15000,  12500,  10000,   7000,   5000,   3000,
#  756    2000,   1000,    700,    500,    300,    200,    100, 70, 50, 30, 20, 10
#  hl_varlist =  'ta','ua','va','wap','hus','hur','tro3','TRH2O_chemtr', 'TRO3_chemtr', 'TRAGE_chemtr', 'TR_sts', 'TR_trn','cli'
#    remap                        = 1
#  reg_lon_def                  = -180.,0.75,180.
#  reg_lat_def                  = -90.,0.75,90.
# /

# EOF
	
cp ${basedir}/build/x86_64-unknown-linux-gnu/bin/icon ./icon.exe
/sw/stretch-x64/mpi/mpich3-3.2.1-nag62/bin/mpiexec -n 16 ./icon.exe
#/sw/stretch-x64/mpi/openmpi-2.1.5-intel17/bin/mpiexec -n 8 ./icon.exe
#/sw/stretch-x64/mpi/openmpi-2.1.5-gcc63/bin/mpiexec -n 60 ./icon.exe

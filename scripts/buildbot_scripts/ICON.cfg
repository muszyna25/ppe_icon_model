# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import datetime
import time
import sys
import os

sys.path.append("py")
sys.path.append("buildbot_scripts-buildbotlists")
reload(sys)
sys.setdefaultencoding('utf8')


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildHorizon'] = 250
c['eventHorizon'] = 50
c['logHorizon'] = 250

c['buildCacheSize'] = 150

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.

from buildbot.buildslave import BuildSlave
from buildbot.status     import mail

m = mail.MailNotifier(fromaddr="buildbot@zmaw.de", builders=[], relayhost="smtp.zmaw.de")

c['properties'] = {'section' : 'all',
                   'exp'     : 'all',
                   'make'    : 'yes',
                   'list'    : 'icon-dev',
	           'subdir' : 'default'
                  }

c['slaves'] = [BuildSlave("mistral_test" , "bot1passwd", notify_on_missing="karl-hermann.wieners@mpimet.mpg.de", missing_timeout=300)
              ]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("thunder", "bot1passwd", max_builds=2)]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=2401)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("127.0.0.1", 2401, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#


from buildbot.changes.pb import PBChangeSource
from buildbot.changes.gitpoller import GitPoller
c['change_source'] = [
    PBChangeSource(),
    GitPoller(
        repourl = 'git@git.mpimet.mpg.de:icon.git',
        project='ICON',
        pollinterval = 1800
    )
]



####### SCHEDULERS

## configure the Schedulers

# WS 10*60 gibt wieviel Zeit zwischen dem Triggersignal und dem Start der builder liegen soll

from buildbot.scheduler import AnyBranchScheduler
from buildbot           import scheduler
from buildbot.schedulers.forcesched \
    import ForceScheduler, StringParameter, FixedParameter

# Definition of the defaults =========
#default_Branch     = 'master'
default_builder_list = [
    'MISTRAL_intel_hybrid', 'MISTRAL_intel', 'MISTRAL_intel_openmp',
    'MISTRAL_ocean',
    'MISTRAL_gcc',
    'MISTRAL_nag', 'MISTRAL_nag_serial'
]

# Test changes on the default branch whenever they occur
# NOTE: currently disabled!
s1 = AnyBranchScheduler(
         name = 'main',
         branches = ["master"],
         treeStableTimer = 1*30,
         builderNames = default_builder_list
     )

# Test DWD's NWP branch every night at 1 AM, unless there were no changes.
n1 = scheduler.Nightly(
         name = 'nightly_nwp',
         properties = {'subdir' : 'nightly_nwp'},
         builderNames = default_builder_list,
         branch = 'branches/icon-nwp/icon-nwp-dev',
         hour = 01,
         minute = 00,
         onlyIfChanged = True,
     )

# Force build buttons
f1 = ForceScheduler(
         name = "force",
         builderNames = default_builder_list,
         reason = StringParameter(
             name = "reason",
             label = "Reason:",
             default = "Enter reason for build",
             size = 80,
         ),
         branch = StringParameter(
             name = "branch",
             label = "Branch:",
             default = "master",
             size = 80,
         ),
         revision = StringParameter(
             name = "revision",
             label = "Revision:",
             size = 80,
         ),
         repository = StringParameter(
             name = "repository",
             label = "Repository:",
             default = "git@git.mpimet.mpg.de:icon.git",
             regex = r"^git@git\.mpimet\.mpg\.de:[^ ]+$",
             size = 80,
         ),
         project = FixedParameter(
             name = "project",
             default = "",
         ),
     )

c['schedulers'] = [f1]


# ================================================================
# Info helper class
class ICON_logger:
  def __init__(self):
    self.date  = time.strftime('%FT%X')
    self.pages = {}
    self.stack = []
    self.explistStartKey = 'BEGIN-EXPERIMENT-LIST'
    self.explistEndKey = 'END-EXPERIMENT-LIST'

    for b in default_builder_list:
      self.pages[b] = {} 
      self.pages[b]['expList'] = [] 

iconLog = ICON_logger() # for global use in different BuildSteps
# ================================================================
####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
# - name              (required): the name used to describe this builder
# - slavename         (required): which slave to use (must appear in c['bots'])
# - builddir          (required): which subdirectory to run the builder in
# - factory           (required): a BuildFactory to define how the build is run
# - periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process     import factory
from buildbot.steps       import source, shell
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.process.properties import WithProperties
from buildbot.status.builder import FAILURE, SKIPPED
# ===================================================================
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Build Icon
class ICON_Make(ShellCommand):
  name="make"
  usePTY=True
  description="build"
  builder_list_name =""

  # the 'exp' property should support
  # * experiment name for templates located in ./run
  # * template filenames with full path below ./run
  #
  # commands list is extended
  def getExperimentList(self,commands):
    exp_str            = self.getProperty("exp")
    experimentListName = self.getProperty("list")

    if ( exp_str != 'all' ):
      # create a temporary list with the given experiments
      experimentListName = "buildbot_explist.tmp"
      # create commandline for remote execution
      # * new list
      commands.append("./scripts/buildbot_scripts/mklist {0}".format(experimentListName))
      for expname in exp_str.split(':'):
        # prepend 'exp.' if not given and the related template NOT in a subdir of ./run
        if (('exp.' != expname[0:4]) and (os.path.basename(expname) == expname)):
          expname = 'exp.'+expname

        commands.append("./scripts/buildbot_scripts/addexp --list {0} {1}".format(experimentListName,expname))

    return experimentListName

  def start(self):
    global iconLog

    builderName   = self.getProperty("buildername")

    # list of remote commands
    commands = []

    # create an list of experiments on the remote server
    experimentListName = self.getExperimentList(commands)
    iconLog.pages[builderName]['experimentListName'] = experimentListName

    # list the expriments for this builder and list
    commands.append( "./scripts/buildbot_scripts/lsexperiments --list {0} {1} > {2}".format(experimentListName, builderName,'./thisExperimentList.log'))
    commands.append("echo '" + iconLog.explistStartKey + "';cat ./thisExperimentList.log; echo '" + iconLog.explistEndKey+ "'")

    if self.getProperty("make") == "yes":
      commands.append("scripts/buildbot_scripts/build {0} --list {1}".format(builderName,experimentListName))
    else:
      commands.append('echo Compiling is switched off')


    self.setCommand(';'.join(commands))
    self.logfiles = {"explog" : {"filename": "thisExperimentList.log"}}
    ShellCommand.start(self)

  def commandComplete(self,cmd):
    global iconLog

    builderName = self.getProperty("buildername")
    experimentListName = iconLog.pages[builderName]['experimentListName']

    explog    = cmd.logs['stdio'].getText()
    listStart = explog.find(iconLog.explistStartKey)+len(iconLog.explistStartKey)
    listEnd   = explog.find(iconLog.explistEndKey)
    expList   = explog[listStart:listEnd].strip().split("\n")

    if ('' == expList[0]):
      expList = []
    iconLog.pages[builderName]['expList'] = expList

#------------------------------------------------------------------------------
# submit the jobs
class ICON_RunExp(ShellCommand):
  name="exp"
  usePTY=True
  description="run"

  def start(self):
    global iconLog

    builderName = self.getProperty("buildername")

    sect = self.getProperty("section")
    l = sect.split(':')

    if ( 0 < len(iconLog.pages[builderName]['expList']) and (( 'exp' in l) or ('all' in l))):
      call = 'scripts/buildbot_scripts/runexp'
      self.setCommand(call)

      # collect log files
      _path = os.path.join(self.getProperty("workdir"),self.getProperty("subdir"))

      expTemplates = iconLog.pages[builderName]['expList']
      runscriptsList = list(map(os.path.basename, expTemplates))
      

      self.logfiles = {}
      self.logfiles["STATUS"] = "LOOP_STATUS_EXP_FILE"

      if ( 0 < len(runscriptsList)):
        # get the list of runscripts; these are all the run/*.run files
        for runscript in runscriptsList:
          #runscript = os.path.basename(runscript)
          if (len(runscript.split('.')) < 2):
            # there is nothing to be run because the experiment list is empty
            self.setCommand('echo "Empty Experiment List! ABORT!"; exit 1')
          else:
            expname = runscript.split('.')[1]
            self.logfiles[expname] = 'run/LOG.' + runscript + '.run.o'

    else:
      self.setCommand('echo Running of experiments is switched off')

    ShellCommand.start(self)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
class ICON_Del(ShellCommand):
  name="del"
  description="del"

  def start(self):
    if self.getProperty("make") == "yes":
      self.setCommand('rm -rf *')
    else:
      self.setCommand('echo No deleting is done')

    ShellCommand.start(self)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
class Build_Property_List(ShellCommand):
  name="Info"
  description="Info"

  def start(self):
    now = datetime.datetime.now()
    DATE  = str(now.year) + '-' + str(now.month).zfill(2) + '-' + str(now.day).zfill(2)
    mTime  = str(now.hour) + ':' + str(now.minute).zfill(2) + ':' + str(now.second).zfill(2)

    BASE_DIR="/srv/buildbot/icon/upload/" + DATE + '/buildbot/'


    filename  = BASE_DIR
    filename += self.getProperty("got_revision") + '/'
    filename += self.getProperty("buildername") + '/'
    filename += str(self.getProperty("buildnumber")) + '/'

    b = str(self.getProperty("branch"))

    dirname  = BASE_DIR
    dirname += self.getProperty("got_revision") + '/'
    dirname += b.replace('/','+') + '/'
    dirname += self.getProperty("buildername") + '/'
    dirname += str(self.getProperty("buildnumber"))
    print "dirname " + dirname
    if os.path.isdir(dirname):
      filename = dirname + '/run_info.txt'
    else:
      filename += 'run_info.txt'

    file = open(filename, 'w')

    file.write("Name,	\tValue\n")
    file.write('branch:\t\t' + str(self.getProperty("branch")) + '\n')

    file.write("Timestamp:\t"  + DATE + ' ' + mTime + '\n')

    file.write("revision:\t" + self.getProperty("got_revision") + '\n\n')

    file.write("buildername:\t" + self.getProperty("buildername") + '\n')
    file.write("buildnumber:\t" + str(self.getProperty("buildnumber")) + '\n')
    file.write("slavename:\t" + self.getProperty("slavename") + '\n\n')

    file.write("subdir:\t" + self.getProperty("subdir") + '\n')
    file.write("make:\t" + self.getProperty("make") + '\n')
    file.write("section:\t" + self.getProperty("section") + '\n')
    file.write("list:\t" + self.getProperty("list") + '\n')
    file.write("exp:\t\t" + self.getProperty("exp") + '\n')
    com='echo write property info to '+ str(filename) + ' at ' + str(now)
    self.setCommand(com)
    file.close()

    ShellCommand.start(self)

#========================================================
# Available Build steps
work_dir = shell.WithProperties("%s", "subdir")
# delete old checkout
clean_workdir = ICON_Del(
    haltOnFailure = True,
    workdir       = work_dir
)

#--------------------------------------------------------
# create working copy
vcs_update = source.Git(
    mode              = 'update',
#   repourl           = 'git@git.mpimet.mpg.de:icon.git',
    description       = "git",
    workdir           = work_dir,
#   branch            = default_Branch,
    submodules        = True
)
#--------------------------------------------------------
# build ICON model and experiment list
make = ICON_Make(
    haltOnFailure = True,
    timeout       = 43200,
    workdir       = work_dir
)

#--------------------------------------------------------
# run experiments
run_exp = ICON_RunExp(
    flunkOnFailure = True,
    timeout        = 82800,
    workdir        = work_dir
)
#--------------------------------------------------------
# create online documentation
make_doc = ShellCommand(
    command       = 'scripts/buildbot_scripts/bb_make_doc',
    haltOnFailure = True,
    name          = "make doc",
    timeout       = 4800,
    workdir       = work_dir,
    usePTY        = True,
    description   = "make doc"
)
#========================================================
	
#--------------------------------------------------------
# TODO dont know what this is for
property_list = Build_Property_List(
    workdir=work_dir
)

#========================================================
# Setup Standard build process
run_full = factory.BuildFactory()

run_full.addStep(clean_workdir)
run_full.addStep(vcs_update)
run_full.addStep(make)
run_full.addStep(run_exp)

#--------------------------------------------------------
# Build documentation only
m2 = factory.BuildFactory()

m2.addStep(clean_workdir)
m2.addStep(vcs_update)
m2.addStep(make_doc)
#========================================================


#========================================================
# Builders/BuildSlave definitions
c['builders'] = [
    {'name':'MISTRAL_intel_hybrid',
        'slavename':'mistral_test', 'builddir':'mistral_intel_hybrid', 'factory':run_full,
        'env':{'BB_SYSTEM':'mistral' , 'BB_SLAVE':'intel_hybrid'}},
    {'name':'MISTRAL_intel',
        'slavename':'mistral_test', 'builddir':'mistral_intel', 'factory':run_full,
        'env':{'BB_SYSTEM':'mistral' , 'BB_SLAVE':'intel'}},
    {'name':'MISTRAL_intel_openmp',
        'slavename':'mistral_test', 'builddir':'mistral_intel_openmp', 'factory':run_full,
        'env':{'BB_SYSTEM':'mistral' , 'BB_SLAVE':'intel_openmp'}},
    {'name':'MISTRAL_ocean',
        'slavename':'mistral_test', 'builddir':'mistral_ocean', 'factory':run_full,
        'env':{'BB_SYSTEM':'mistral' , 'BB_SLAVE':'ocean'}},
    {'name':'MISTRAL_gcc',
        'slavename':'mistral_test', 'builddir':'mistral_gcc', 'factory':run_full,
        'env':{'BB_SYSTEM':'mistral' , 'BB_SLAVE':'gcc'}},
    {'name':'MISTRAL_nag',
        'slavename':'mistral_test', 'builddir':'mistral_nag', 'factory':run_full,
        'env':{'BB_SYSTEM':'mistral' , 'BB_SLAVE':'nag'}},
    {'name':'MISTRAL_nag_serial',
        'slavename':'mistral_test', 'builddir':'mistral_nag_serial', 'factory':run_full,
        'env':{'BB_SYSTEM':'mistral' , 'BB_SLAVE':'nag_serial'}}
]
#========================================================

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# HTML
# ====

from buildbot.status import html
from buildbot.status.web.authz import Authz
import MainPage
import exp_plot
import reference_page

def is_admin(user):
  admins_file = open('buildbot_admins.txt')
  admins = filter(
               lambda x: not x.startswith('#') and x,
               map(
                   lambda x: x.strip(),
                   admins_file.readlines()
               )
           )
  admins_file.close()
  return user in admins

authorizations = Authz(
    useHttpHeader          = True,
    forceBuild             = True,
    forceAllBuilds         = True,
    pingBuilder            = True,
    gracefulShutdown       = is_admin,
    pauseSlave             = is_admin,
    stopBuild              = True,
    stopAllBuilds          = True,
    cancelPendingBuild     = True,
    cancelAllPendingBuilds = True,
    stopChange             = True,
    cleanShutdown          = is_admin,
    showUsersPage          = is_admin,
)

WEB = html.WebStatus(
    http_port = "tcp:9011:interface=127.0.0.1",
    ### allowForce = True,
    authz = authorizations
)
WEB.putChild('home'      , MainPage.HomePage())
WEB.putChild('reference' , reference_page.MainPage())
WEB.putChild('plot'      , exp_plot.EXP_plot())

c['status'].append(WEB)


# MAIL
# ====
from buildbot.status import mail

# Any failures
# ------------

c['status'].append(mail.MailNotifier(fromaddr="buildbot@zmaw.de",
                                     mode='failing',
                                     subject='[BUILDBOT ICON] %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#

from buildbot.status import client
c['status'].append(
    client.PBListener(port = 9981)
)




####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "ICON"
c['projectURL']  = "https://code.zmaw.de/projects/icon"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.zmaw.de/icon_test/"

# vim:ft=python

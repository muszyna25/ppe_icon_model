# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildHorizon'] = 1000
c['eventHorizon'] = 980
c['logHorizon'] = 950

import datetime

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.

from buildbot.buildslave import BuildSlave
from buildbot.status     import mail

m = mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>", builders=[], relayhost="smtp.zmaw.de")

c['properties'] = {
          'section' : 'all',
          'exp' : 'all',
          'make' : 'yes',
	  'workdir' : 'default'
      }

c['slaves'] = [BuildSlave("blizzard", "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
              ,BuildSlave("squall"  , "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
              ,BuildSlave("tornado" , "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
              ,BuildSlave("lxe"     , "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
              ]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("mpipc91", "bot1passwd", max_builds=2)]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9988


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=2401)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("127.0.0.1", 2401, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

# WS 10*60 gibt wieviel Zeit zwischen dem Triggersignal und dem Start der builder liegen soll

from buildbot.scheduler import AnyBranchScheduler
from buildbot           import scheduler

# Definition of the default branch
default_Branch='trunk/icon-dev'

s1 = AnyBranchScheduler('main'
                       ,[default_Branch]
                       ,1*30
                       ,['BLIZZ_nMnO'
                        ,'BLIZZ_nMyO'
                        ,'BLIZZ_yMnO'
                        ,'BLIZZ_yMyO'

                        ,'HPC_serial'
                        ,'HPC_sun_debug'

#                        ,'SQUALL_gcc'
#                        ,'SQUALL_intel'
#                        ,'SQUALL_nag'
#                        ,'SQUALL_pgi'
#                        ,'SQUALL_sun'

                        ,'SX9'
                        ,'SX9_mpiomp'
                        ,'SX9_ftromp'

                        ,'TORNADO_gcc'
                        ,'TORNADO_intel'
                        ,'TORNADO_nag'
                        ,'TORNADO_pgi'
                        ,'TORNADO_sun'

                        ]
                       )

s2 = AnyBranchScheduler('s2'
                       ,[default_Branch]
                       ,properties={'section' : 'none'}
                       ,treeStableTimer=1*30
                       ,builderNames=['SQUALL_gcc'
#                        ,'SQUALL_intel'
#                        ,'SQUALL_nag'
#                        ,'SQUALL_pgi'
#                        ,'SQUALL_sun'
                        ]
                       )

n1 = scheduler.Nightly(name='nightly_1'
                        ,properties={'workdir' : 'nightly'}
                        ,builderNames=['BLIZZ_nMnO'
                        ,'BLIZZ_nMyO'
                        ,'BLIZZ_yMnO'
                        ,'BLIZZ_yMyO'

                        ,'HPC_serial'
                        ,'HPC_sun_debug'

                        ,'SQUALL_doc'

#                        ,'SQUALL_gcc'
#                        ,'SQUALL_intel'
#                        ,'SQUALL_nag'
#                        ,'SQUALL_pgi'
#                        ,'SQUALL_sun'

                        ,'SX9'
                        ,'SX9_mpiomp'
                        ,'SX9_ftromp'

                        ,'TORNADO_gcc'
                        ,'TORNADO_intel'
                        ,'TORNADO_nag'
                        ,'TORNADO_pgi'
                        ,'TORNADO_sun'
                                         ]
                            ,branch = default_Branch
                            ,hour=22
                            ,minute=00
                            )

n2 = scheduler.Nightly(name='nightly_2'
                        ,properties={'workdir' : 'nightly','section' : 'none'}
                        ,builderNames=[
                        'SQUALL_gcc'
                        ,'SQUALL_intel'
                        ,'SQUALL_nag'
                        ,'SQUALL_pgi'
                        ,'SQUALL_sun'
                                         ]
                            ,branch = default_Branch
                            ,hour=22
                            ,minute=00
                            )

c['schedulers'] = [s1,s2,n1,n2]


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
# - name              (required): the name used to describe this builder
# - slavename         (required): which slave to use (must appear in c['bots'])
# - builddir          (required): which subdirectory to run the builder in
# - factory           (required): a BuildFactory to define how the build is run
# - periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process     import factory
from buildbot.steps       import source, shell
from buildbot.steps.shell import ShellCommand, SetProperty
from buildbot.process.properties import WithProperties
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

work_dir = shell.WithProperties("%s", "workdir")

grid_str_list='create_bb_grids'
exp_str_list=''
post_str_list=''
restart_str_list=''

# ================================================================

class ICON_bb_run_grid(ShellCommand):

   description="bb_run(grid)"
   name="grid"
   usePTY=True

   def start(self):
      sect = self.getProperty("section")
      l = sect.split(':')

      if ( 'grid' in l) or ('all' in l):
         g = grid_str_list.split(':')

         self.logfiles = {"STATUS": "LOOP_STATUS_GRID_FILE"}
         for word in g:
            i = 'run/LOG.grid.' + word + '.run.o'
            self.logfiles[word]=i

         self.setCommand('scripts/buildbot_scripts/bb_run -section=grid')
      else:
         self.logfiles = {}
         self.setCommand('echo Running of bb_run grid is switched off')

      ShellCommand.start(self)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class ICON_bb_run_exp(ShellCommand):

   name="exp"
   usePTY=True
   description="bb_run(exp)"

   def start(self):
      global exp_str_list
      sect = self.getProperty("section")
      l = sect.split(':')

      if ( 'exp' in l) or ('all' in l):
         exp_str = self.getProperty("exp")

# Check if the property 'exp' is all experiments.
# If not use the info from the property

         if ( exp_str != 'all' ):
           exp_str_list = exp_str
         else:
           exp_str = exp_str_list

# create logfile list for exp
         e = exp_str_list.split(':')
         self.logfiles = {"STATUS": "LOOP_STATUS_EXP_FILE"}
         for word in e:
            i = 'run/LOG.exp.' + word + '.run.o'
            self.logfiles[word]=i

# building commando call

         call = 'scripts/buildbot_scripts/bb_run -section=exp -test='+exp_str
         self.setCommand(call)
      else:
         self.logfiles = {}
         self.setCommand('echo Running of bb_run exp is switched off')

      ShellCommand.start(self)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class ICON_bb_run_post(ShellCommand):

   description="bb_run(post)"
   name="post"
   usePTY=True

   def start(self):
      global post_str_list
      sect = self.getProperty("section")
      l = sect.split(':')

      if ( 'post' in l) or ('all' in l):
         post_str = post_str_list

# create logfile list for post

         p = post_str_list.split(':')
         self.logfiles = {"STATUS": "LOOP_STATUS_POST_FILE"}
         for word in p:
            i = 'run/LOG.post.' + word + '.run.o'
            self.logfiles[word]=i

# set post processing call
         if ( post_str_list != "" ):
           self.setCommand('scripts/buildbot_scripts/bb_run -section=post -test='+post_str)
         else:
           self.setCommand('echo Running of bb_run. No exp in post-list')

      else:
         self.logfiles = {}
         self.setCommand('echo Running of bb_run post is switched off')

      ShellCommand.start(self)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class ICON_bb_run_restart(ShellCommand):

   description="bb_run(restart)"
   name="restart"
   usePTY=True

   def start(self):
      global restart_str_list
      sect = self.getProperty("section")
      l = sect.split(':')

      if ( 'restart' in l) or ('all' in l):
         restart_str = restart_str_list

# create logfile list for post

         p = restart_str_list.split(':')
         self.logfiles = {"STATUS": "LOOP_STATUS_RESTART_FILE"}
         for word in p:
            i = 'run/LOG.post.' + word + '.run.o'
            self.logfiles[word]=i

# set post processing call
         if ( restart_str_list != "" ):
           self.setCommand('scripts/buildbot_scripts/bb_run -section=restart -test='+restart_str)
         else:
           self.setCommand('echo Running of bb_run. No exp in restart-list')
      else:
         self.logfiles = {}
         self.setCommand('echo Running of bb_run restart is switched off')

      ShellCommand.start(self)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class ICON_Make(ShellCommand):

   name="make"
   usePTY=True
   description="bb_make"

   def start(self):
      if self.getProperty("make") == "yes":
         self.setCommand('scripts/buildbot_scripts/bb_make')
      else:
         self.setCommand('echo Compiling is switched off')

      ShellCommand.start(self)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class Copy_Plots(ShellCommand):

   name="copy plots"
   usePTY=True
   description="plot copy"

   def start(self):

# Building the Date for saving the Plots

      now = datetime.datetime.now()
      DATE  = str(now.year) + '-' + str(now.month).zfill(2) + '-' + str(now.day).zfill(2)

      com  = "scripts/buildbot_scripts/copy_plots.ksh "
      com += str(self.getProperty("got_revision")) + ' '
      com += self.getProperty("slavename") + ' '
      com += self.getProperty("buildername") + ' '
      com += str(self.getProperty("buildnumber")) + ' '
      com += self.getProperty("workdir") + ' '
      com += DATE
      print 'com: ' + com 
      print 'Copy_Plots.now: ' + str(now)
      self.setCommand(com)
      ShellCommand.start(self)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class ICON_Del(ShellCommand):

   name="del"
   description="del"

   def start(self):
      if self.getProperty("make") == "yes":
         self.setCommand('rm -rf * .svn')
      else:
         self.setCommand('echo No deleting is done')

      ShellCommand.start(self)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class restart_list(ShellCommand):

   name="restart_list"

   def start(self):
      global restart_str_list
      sect = self.getProperty("section")
      l = sect.split(':')
   
      if ( 'restart' in l) or ('all' in l):
        self.setCommand('cat run/run_post_comp_list')
      else:
        self.setCommand('echo Running of bb_run restart is switched off')
      ShellCommand.start(self)
   
   def commandComplete(self, cmd):
        global restart_str_list
        out = cmd.logs['stdio'].getText()
        plist = out.replace(' ',':')
        plist = plist.replace('.run','')
        plist = plist.replace('\n','')
        plist = plist.replace('post.test_','test_')
        plist = plist.lstrip(':')
        plist = plist.rstrip(':')
        restart_str_list=plist

   def getText(self, cmd, results):
      return ["restart-list"]

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class post_list(ShellCommand):

   name="post_list"

   def start(self):
      global post_str_list
      sect = self.getProperty("section")
      l = sect.split(':')
   
      if ( 'post' in l) or ('all' in l):
#        self.setCommand('cat run/run_post_list run/run_post_comp_list')
        self.setCommand('cat run/run_post_list')
      else:
        self.setCommand('echo Running of bb_run post is switched off')
      ShellCommand.start(self)
   
   def commandComplete(self, cmd):
        global post_str_list
        out = cmd.logs['stdio'].getText()
        plist = out.replace(' ',':')
        plist = plist.replace('.run','')
        plist = plist.replace('\n','')
        plist = plist.replace('post.test_','test_')
        plist = plist.lstrip(':')
        plist = plist.rstrip(':')
        post_str_list=plist

   def getText(self, cmd, results):
      return ["post-list"]

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class exp_list(ShellCommand):

   name="exp_list"

   def start(self):
      global exp_str_list
      sect = self.getProperty("section")
      l = sect.split(':')

      if ( 'exp' in l) or ('all' in l):
        self.setCommand('cd run;ls -1 exp.test_*.run; cd ..')
      else:
        self.setCommand('echo Running of bb_run exp is switched off')
      ShellCommand.start(self)


   def commandComplete(self, cmd):
        global exp_str_list
        out = cmd.logs['stdio'].getText()

        elist = out.replace('.run\n',':')
        elist = elist.replace('exp.test_','test_')
        elist = elist.lstrip(':')
        elist = elist.rstrip(':')
        exp_str_list=elist
#        self.setProperty("exp_str_list", exp_str_list, "eList")
#        self.setProperty("out_post", out, "out_post")

   def getText(self, cmd, results):
      return ["exp-list"]

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class Build_Property_List(ShellCommand):
# This class is used 

   name="Info"
   description="Info"

   def start(self):
      now = datetime.datetime.now()
      DATE  = str(now.year) + '-' + str(now.month).zfill(2) + '-' + str(now.day).zfill(2)
      mTime  = str(now.hour) + ':' + str(now.minute).zfill(2) + ':' + str(now.second).zfill(2)

      filename  ='/srv/buildbot/icon/upload/' + DATE + '/buildbot/'
#      filename  ='/pool/data/ICON/archive/' + DATE + '/buildbot/'
      filename += self.getProperty("got_revision") + '/'
      filename += self.getProperty("buildername") + '/'
      filename += str(self.getProperty("buildnumber")) + '/'
      filename += 'run_info.txt'

      file = open(filename, 'w')

      file.write("Name,	\tValue\n")
      if self.getProperty("branch") == None:
        file.write('branch:\t\t' + str(default_Branch) + '\n')
      else:
        file.write('branch:\t\t' + str(self.getProperty("branch")) + '\n')

      file.write("Timestamp:\t"  + DATE + ' ' + mTime + '\n')

      file.write("revision:\t" + self.getProperty("got_revision") + '\n\n')

      file.write("buildername:\t" + self.getProperty("buildername") + '\n')
      file.write("buildnumber:\t" + str(self.getProperty("buildnumber")) + '\n')
      file.write("slavename:\t" + self.getProperty("slavename") + '\n\n')

      file.write("workdir:\t" + self.getProperty("workdir") + '\n')
      file.write("exp:\t\t" + self.getProperty("exp") + '\n')
      file.write("make:\t" + self.getProperty("make") + '\n')
      file.write("section:\t" + self.getProperty("section") + '\n')
      com='echo write property info to '+ str(filename) + ' at ' + str(now)
      self.setCommand(com)
      file.close()

      ShellCommand.start(self)

# ================================================================

m1 = factory.BuildFactory()

#--------------------------------------------------------

m1.addStep(ICON_Del(
	haltOnFailure=True, 
	workdir=work_dir))

#--------------------------------------------------------

m1.addStep(source.SVN(mode='update',
        baseURL='http://svn.zmaw.de/svn/icon/',
#	description="svn",
        workdir=work_dir,
        defaultBranch=default_Branch))

#--------------------------------------------------------

m1.addStep(ICON_Make(
	haltOnFailure=True, 
	timeout=43200, 
	workdir=work_dir))

#--------------------------------------------------------

m1.addStep(ICON_bb_run_grid(
	haltOnFailure=True, 
	timeout=82800, 
	workdir=work_dir))

# Creates the actuel experiment list.

#--------------------------------------------------------

m1.addStep(exp_list(workdir=work_dir))

m1.addStep(ICON_bb_run_exp(
	flunkOnFailure=True, 
	timeout=82800, 
	workdir=work_dir))
	
#--------------------------------------------------------

# Creates the actuel restart-check list.

m1.addStep(restart_list(workdir=work_dir))

m1.addStep(ICON_bb_run_restart(
	flunkOnFailure=True, 
	timeout=82800, 
	workdir=work_dir))

#--------------------------------------------------------

# Creates the actuel post-processing list.

m1.addStep(post_list(workdir=work_dir))

m1.addStep(ICON_bb_run_post(
	flunkOnFailure=True, 
	timeout=82800, 
	workdir=work_dir))
	

#--------------------------------------------------------

m1.addStep(Copy_Plots(
	flunkOnFailure=True, 
	timeout=4200, 
	workdir=work_dir))

#--------------------------------------------------------

#===========================================================================

from buildbot.steps.transfer import DirectoryUpload

# Download plots for web-plots

#--------------------------------------------------------

eps_dir = shell.WithProperties("upload/eps/%s", "buildername")
slave_dir = shell.WithProperties("/tmp/%s", "buildername")
m1.addStep(DirectoryUpload(slavesrc=slave_dir,masterdest=eps_dir))

#archive_dir = shell.WithProperties("upload")
archive_dir = "upload"
slave_dir = shell.WithProperties("/tmp/BuildBot/%s/archive", "buildername")
m1.addStep(DirectoryUpload(slavesrc=slave_dir,masterdest=archive_dir))

#--------------------------------------------------------

m1.addStep(Build_Property_List(workdir=work_dir))

#===================================================================================================

m2 = factory.BuildFactory()


m2.addStep(ShellCommand(command='rm -rf * .svn',
        name="Del",
        workdir=work_dir,
        description="Del"))

m2.addStep(source.SVN(mode='update',
                     baseURL='http://svn.zmaw.de/svn/icon/',
                     workdir=work_dir,
                      defaultBranch='trunk/icon-dev'))

m2.addStep(ShellCommand(command='scripts/buildbot_scripts/bb_make_doc', 
	haltOnFailure=True, 
	name="Make",
	timeout=2000, 
        workdir=work_dir,
	usePTY=True,
	description="DOC make"))

m2.addStep(ShellCommand(command='scripts/buildbot_scripts/bb_run_doc' , 
	haltOnFailure=True, 
	name="Run",
	timeout=2000, 
        workdir=work_dir,
	usePTY=True,
	description="DOC run"))

#------------------------------------------------------------------

c['builders'] = [{'name':'BLIZZ_nMnO'   , 'slavename':'blizzard', 'builddir':'blizz_nMnO'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'blizzard', 'BB_SLAVE':'blizz_nMnO'   }}
                ,{'name':'BLIZZ_nMyO'   , 'slavename':'blizzard', 'builddir':'blizz_nMyO'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'blizzard', 'BB_SLAVE':'blizz_nMyO'   }}
                ,{'name':'BLIZZ_yMnO'   , 'slavename':'blizzard', 'builddir':'blizz_yMnO'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'blizzard', 'BB_SLAVE':'blizz_yMnO'   }}
                ,{'name':'BLIZZ_yMyO'   , 'slavename':'blizzard', 'builddir':'blizz_yMyO'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'blizzard', 'BB_SLAVE':'blizz_yMyO'   }}

                ,{'name':'HPC_serial' , 'slavename':'lxe' , 'builddir':'hpc_serial' , 'factory':m1 , 'env':{'BB_SYSTEM': 'hpc' , 'BB_SLAVE':'hpc_serial'  }}
                ,{'name':'HPC_sun_debug'  , 'slavename':'lxe' , 'builddir':'hpc_sun_debug'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'hpc' , 'BB_SLAVE':'hpc_sun_debug'  }}

                ,{'name':'SQUALL_doc' , 'slavename':'squall'  , 'builddir':'squall_doc'   , 'factory':m2 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_doc'   }}

                ,{'name':'SQUALL_gcc'   , 'slavename':'squall'  , 'builddir':'squall_gcc'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_gcc'   }}
                ,{'name':'SQUALL_intel' , 'slavename':'squall'  , 'builddir':'squall_intel' , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_intel' }}
                ,{'name':'SQUALL_nag'   , 'slavename':'squall'  , 'builddir':'squall_nag'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_nag'   }}
                ,{'name':'SQUALL_pgi'   , 'slavename':'squall'  , 'builddir':'squall_pgi'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_pgi'   }}
                ,{'name':'SQUALL_sun'   , 'slavename':'squall'  , 'builddir':'squall_sun'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_sun'   }}

                ,{'name':'SX9'        , 'slavename':'lxe' , 'builddir':'sx9'       , 'factory':m1 , 'env':{'BB_SYSTEM': 'nec' , 'BB_SLAVE':'sx9'  }}
                ,{'name':'SX9_mpiomp' , 'slavename':'lxe' , 'builddir':'sx9mpiomp' , 'factory':m1 , 'env':{'BB_SYSTEM': 'nec' , 'BB_SLAVE':'sx9mpiomp'  }}
                ,{'name':'SX9_ftromp' , 'slavename':'lxe' , 'builddir':'sx9ftromp' , 'factory':m1 , 'env':{'BB_SYSTEM': 'nec' , 'BB_SLAVE':'sx9ftromp'  }}

                ,{'name':'TORNADO_gcc'  , 'slavename':'tornado' , 'builddir':'tornado_gcc'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_gcc'  }}
                ,{'name':'TORNADO_intel', 'slavename':'tornado' , 'builddir':'tornado_intel', 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_intel'}}
                ,{'name':'TORNADO_nag'  , 'slavename':'tornado' , 'builddir':'tornado_nag'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_nag'  }}
                ,{'name':'TORNADO_pgi'  , 'slavename':'tornado' , 'builddir':'tornado_pgi'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_pgi'  }}
                ,{'name':'TORNADO_sun'  , 'slavename':'tornado' , 'builddir':'tornado_sun'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_sun'  }}

                ]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# HTML
# ====

from buildbot.status import html

c['status'].append(html.WebStatus(http_port=8011,allowForce=True))

# MAIL
# ====
from buildbot.status import mail

# Any failures
# ------------

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
#                                                      ,"monika.esch@zmaw.de"
#                                                      ,"almut.gassmann@zmaw.de"
#                                                      ,"guenther.zaengl@dwd.de"
#                                                      ,"luis.kornblueh@zmaw.de"
#                                                      ,"marco.giorgetta@zmaw.de"
                                                      ],
                                     mode='failing',
                                     subject='[BUILDBOT ICON] %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))




####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "ICON"
c['projectURL']  = "https://code.zmaw.de/projects/icon"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.zmaw.de:8011/"

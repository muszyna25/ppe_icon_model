# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
from buildbot.status     import mail

m = mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>", builders=[], relayhost="smtp.zmaw.de")

c['properties'] = {
          'section' : 'all',
#          'section' : 'grid,exp,post',
          'exp' : 'all',
          'Compiling' : 'yes'
      }

c['slaves'] = [BuildSlave("blizzard", "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
              ,BuildSlave("mpipc22" , "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
	      ,BuildSlave("mpipc63" , "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
	      ,BuildSlave("mpipc91" , "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
              ,BuildSlave("squall"  , "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
              ,BuildSlave("tornado" , "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
              ,BuildSlave("lxe"     , "bot1passwd", notify_on_missing="walter.sauf@zmaw.de", missing_timeout=300)
              ]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("mpipc91", "bot1passwd", max_builds=2)]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9988


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=2401)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("127.0.0.1", 2401, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

# WS 10*60 gibt wieviel Zeit zwischen dem Triggersignal und dem Start der builder liegen soll

from buildbot.scheduler import AnyBranchScheduler
from buildbot           import scheduler

s1 = AnyBranchScheduler('main'
                       ,['trunk/icon-dev']
                       ,1*30
                       ,['BLIZZ_nMnO'
                        ,'BLIZZ_nMyO'
                        ,'BLIZZ_yMnO'
                        ,'BLIZZ_yMyO'

                        ,'MPIPC_gcc'
                        ,'MPIPC_intel'
                        ,'MPIPC_nag'
                        ,'MPIPC_pgi'
#                        ,'MPIPC_sun'

                        ,'SQUALL_gcc'
                        ,'SQUALL_intel'
                        ,'SQUALL_nag'
                        ,'SQUALL_pgi'
                        ,'SQUALL_sun'

                        ,'TORNADO_gcc'
                        ,'TORNADO_intel'
                        ,'TORNADO_nag'
                        ,'TORNADO_pgi'
                        ,'TORNADO_sun'

                        ,'HPC_noomp'
                        ,'HPC_serial'

                        ,'SX9'
                        ,'SX9_mpiomp'
	 		,'SX9_ftromp'
                        ]
                       )

nightly = scheduler.Nightly(name='nightly'
                           ,builderNames=['BLIZZ_nMnO'
                                         ,'BLIZZ_nMyO'
                                         ,'BLIZZ_yMnO'
                                         ,'BLIZZ_yMyO'

                                         ,'MPIPC_gcc'
                                         ,'MPIPC_intel'
                                         ,'MPIPC_nag'
                                         ,'MPIPC_pgi'
#                                         ,'MPIPC_sun'

                                         ,'SQUALL_gcc'
                                         ,'SQUALL_intel'
                                         ,'SQUALL_nag'
                                         ,'SQUALL_pgi'
                                         ,'SQUALL_sun'

                                         ,'TORNADO_gcc'
                                         ,'TORNADO_intel'
                                         ,'TORNADO_nag'
                                         ,'TORNADO_pgi'
                                         ,'TORNADO_sun'

		                        ,'HPC_noomp'
                		        ,'HPC_serial'

 		                        ,'SX9'
                		        ,'SX9_mpiomp'
			 		,'SX9_ftromp'
                                         ]
                            ,branch = 'trunk/icon-dev'
                            ,hour=22
                            ,minute=00
                            )

c['schedulers'] = [s1
                  ,nightly
                  ]


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
# - name              (required): the name used to describe this builder
# - slavename         (required): which slave to use (must appear in c['bots'])
# - builddir          (required): which subdirectory to run the builder in
# - factory           (required): a BuildFactory to define how the build is run
# - periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process     import factory
from buildbot.steps       import source, shell
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import WithProperties

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

m1 = factory.BuildFactory()

m1.addStep(ShellCommand(command='rm -rf *',
	description="del"))

m1.addStep(source.SVN(mode='update',
                     baseURL='http://svn.zmaw.de/svn/icon/',
                     defaultBranch='trunk/icon-dev'))

m1.addStep(ShellCommand(command='scripts/buildbot_scripts/bb_make', 
	haltOnFailure=True, 
	name="Make",
	timeout=43200, 
	usePTY=True,
	description="bb_make"))

m1.addStep(ShellCommand(command='scripts/buildbot_scripts/bb_run -section=grid' , 
	haltOnFailure=True, 
	name="Grid",
	timeout=43200, 
	usePTY=True,
	logfiles={"grid": "LOOP_STATUS_GRID_FILE"},
	description="bb_run(grid)"))

#m1.addStep(ShellCommand(command='scripts/buildbot_scripts/bb_run -section=exp' ,
#	name="Exp",
#	flunkOnFailure=True, 
#	timeout=43200, 
#	usePTY=True,
#	logfiles={"exp": "LOOP_STATUS_EXP_FILE"},
#	description="bb_run(exp)"))

m1.addStep(ShellCommand(command=WithProperties("scripts/buildbot_scripts/bb_run -section=exp -test=%s","exp")  , 
	name="Exp",
	flunkOnFailure=True, 
	timeout=43200, 
	usePTY=True,
	logfiles={"exp": "LOOP_STATUS_EXP_FILE"},
	description="bb_run(exp)"))


m1.addStep(ShellCommand(command='scripts/buildbot_scripts/bb_run -section=post' , 
	warnOnFailure=True, 
	timeout=43200, 
	usePTY=True,
	logfiles={"post": "LOOP_STATUS_POST_FILE"},
	name="Post",
	description="bb_run(post)"))

#------------------------------------------------------------------

c['builders'] = [{'name':'BLIZZ_nMnO'   , 'slavename':'blizzard', 'builddir':'blizz_nMnO'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'blizzard', 'BB_SLAVE':'blizz_nMnO'   }}
                ,{'name':'BLIZZ_nMyO'   , 'slavename':'blizzard', 'builddir':'blizz_nMyO'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'blizzard', 'BB_SLAVE':'blizz_nMyO'   }}
                ,{'name':'BLIZZ_yMnO'   , 'slavename':'blizzard', 'builddir':'blizz_yMnO'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'blizzard', 'BB_SLAVE':'blizz_yMnO'   }}
                ,{'name':'BLIZZ_yMyO'   , 'slavename':'blizzard', 'builddir':'blizz_yMyO'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'blizzard', 'BB_SLAVE':'blizz_yMyO'   }}

                ,{'name':'MPIPC_gcc'    , 'slavename':'mpipc91' , 'builddir':'mpipc_gcc'    , 'factory':m1 , 'env':{'BB_SYSTEM': 'mpipc'   , 'BB_SLAVE':'mpipc_gcc'    }}
                ,{'name':'MPIPC_intel'  , 'slavename':'mpipc63' , 'builddir':'mpipc_intel'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'mpipc'   , 'BB_SLAVE':'mpipc_intel'  }}
                ,{'name':'MPIPC_nag'    , 'slavename':'mpipc91' , 'builddir':'mpipc_nag'    , 'factory':m1 , 'env':{'BB_SYSTEM': 'mpipc'   , 'BB_SLAVE':'mpipc_nag'    }}
                ,{'name':'MPIPC_pgi'    , 'slavename':'mpipc22' , 'builddir':'mpipc_pgi'    , 'factory':m1 , 'env':{'BB_SYSTEM': 'mpipc'   , 'BB_SLAVE':'mpipc_pgi'    }}
#                ,{'name':'MPIPC_sun'    , 'slavename':'mpipc22' , 'builddir':'mpipc_sun'    , 'factory':m1 , 'env':{'BB_SYSTEM': 'mpipc'   , 'BB_SLAVE':'mpipc_sun'    }}

                ,{'name':'SQUALL_gcc'   , 'slavename':'squall'  , 'builddir':'squall_gcc'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_gcc'   }}
                ,{'name':'SQUALL_intel' , 'slavename':'squall'  , 'builddir':'squall_intel' , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_intel' }}
                ,{'name':'SQUALL_nag'   , 'slavename':'squall'  , 'builddir':'squall_nag'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_nag'   }}
                ,{'name':'SQUALL_pgi'   , 'slavename':'squall'  , 'builddir':'squall_pgi'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_pgi'   }}
                ,{'name':'SQUALL_sun'   , 'slavename':'squall'  , 'builddir':'squall_sun'   , 'factory':m1 , 'env':{'BB_SYSTEM': 'squall'  , 'BB_SLAVE':'squall_sun'   }}

                ,{'name':'TORNADO_gcc'  , 'slavename':'tornado' , 'builddir':'tornado_gcc'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_gcc'  }}
                ,{'name':'TORNADO_intel', 'slavename':'tornado' , 'builddir':'tornado_intel', 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_intel'}}
                ,{'name':'TORNADO_nag'  , 'slavename':'tornado' , 'builddir':'tornado_nag'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_nag'  }}
                ,{'name':'TORNADO_pgi'  , 'slavename':'tornado' , 'builddir':'tornado_pgi'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_pgi'  }}
                ,{'name':'TORNADO_sun'  , 'slavename':'tornado' , 'builddir':'tornado_sun'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'tornado' , 'BB_SLAVE':'tornado_sun'  }}

                ,{'name':'HPC_noomp'  , 'slavename':'lxe' , 'builddir':'hpc_noomp'  , 'factory':m1 , 'env':{'BB_SYSTEM': 'hpc' , 'BB_SLAVE':'hpc_noomp'  }}
                ,{'name':'HPC_serial' , 'slavename':'lxe' , 'builddir':'hpc_serial' , 'factory':m1 , 'env':{'BB_SYSTEM': 'hpc' , 'BB_SLAVE':'hpc_serial'  }}

                ,{'name':'SX9'        , 'slavename':'lxe' , 'builddir':'sx9'       , 'factory':m1 , 'env':{'BB_SYSTEM': 'nec' , 'BB_SLAVE':'sx9'  }}
                ,{'name':'SX9_mpiomp' , 'slavename':'lxe' , 'builddir':'sx9mpiomp' , 'factory':m1 , 'env':{'BB_SYSTEM': 'nec' , 'BB_SLAVE':'sx9mpiomp'  }}
                ,{'name':'SX9_ftromp' , 'slavename':'lxe' , 'builddir':'sx9ftromp' , 'factory':m1 , 'env':{'BB_SYSTEM': 'nec' , 'BB_SLAVE':'sx9ftromp'  }}
                ]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# HTML
# ====

from buildbot.status import html

c['status'].append(html.WebStatus(http_port=8011,allowForce=True))

# MAIL
# ====
from buildbot.status import mail

# Any failures
# ------------

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
#                                                      ,"monika.esch@zmaw.de"
#                                                      ,"almut.gassmann@zmaw.de"
#                                                      ,"guenther.zaengl@dwd.de"
#                                                      ,"luis.kornblueh@zmaw.de"
#                                                      ,"marco.giorgetta@zmaw.de"
                                                      ],
                                     mode='failing',
                                     subject='[BUILDBOT ICON] %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# Machine specific failures
# -------------------------

# Failure on Blizzard:

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
                                                     ,"leonidas.linardakis@zmaw.de"
                                                     ],
                                     mode='failing',
                                     builders=["BLIZZ_nMnO"
                                              ,"BLIZZ_nMyO"
                                              ,"BLIZZ_yMnO"
                                              ,"BLIZZ_yMyO"
                                              ],
                                     subject='[BUILDBOT ICON] Machine dependent failures: %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# Failure on MPIPC:

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
                                                     ,"stephan.lorenz@zmaw.de"
                                                     ],
                                     mode='failing',
                                     builders=["MPIPC_gcc"
                                              ,"MPIPC_nag"
                                              ,"MPIPC_intel"
                                              ,"MPIPC_pgi"
                                              ,"MPIPC_sun"
                                              ],
                                     subject='[BUILDBOT ICON] Machine dependent failures: %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# Failure on Squall:

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
                                                     ,"luis.kornblueh@zmaw.de"
                                                     ],
                                     mode='failing',
                                     builders=["SQUALL_gcc"
                                              ,"SQUALL_nag"
                                              ,"SQUALL_intel"
                                              ,"SQUALL_pgi"
                                              ,"SQUALL_sun"
                                              ],
                                     subject='[BUILDBOT ICON] Machine dependent failures: %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# Failure on Tornado:

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
                                                     ,"luis.kornblueh@zmaw.de"
                                                     ],
                                     mode='failing',
                                     builders=["TORNADO_gcc"
                                              ,"TORNADO_nag"
                                              ,"TORNADO_intel"
                                              ,"TORNADO_pgi"
                                              ,"TORNADO_sun"
                                              ],
                                     subject='[BUILDBOT ICON] Machine dependent failures: %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))


# Compiler specific failures
# --------------------------

# Failure with GCC compiler:

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
                                                     ,"luis.kornblueh@zmaw.de"
                                                     ],
                                     mode='failing',
                                     builders=["MPIPC_gcc"
                                              ,"SQUALL_gcc"
                                              ,"TORNADO_gcc"
                                              ],
                                     subject='[BUILDBOT ICON] Compiler specific failure: %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# Failure with NAG compiler:

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
#                                                     ,"luis.kornblueh@zmaw.de"
                                                     ],
                                     mode='failing',
                                     builders=["MPIPC_nag"
                                              ,"SQUALL_nag"
                                              ,"TORNADO_nag"
                                              ],
                                     subject='[BUILDBOT ICON] Compiler specific failure: %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# Failure with INTEL compiler:

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
                                                     ,"stephan.lorenz@zmaw.de"
                                                     ],
                                     mode='failing',
                                     builders=["MPIPC_intel"
                                              ,"SQUALL_intel"
                                              ,"TORNADO_intel"
                                              ],
                                     subject='[BUILDBOT ICON] Compiler specific failures: %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# Failure with PGI compiler:

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
#                                                     ,"leonidas.linardakis@zmaw.de"
                                                     ],
                                     mode='failing',
                                     builders=["MPIPC_pgi"
                                              ,"SQUALL_pgi"
                                              ,"TORNADO_pgi"
                                              ],
                                     subject='[BUILDBOT ICON] Compiler specific failure: %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# Failure with SUN compiler:

c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ICON<walter.sauf@zmaw.de>",
                                     extraRecipients=["walter.sauf@zmaw.de"
#                                                     ,"stephan.lorenz@zmaw.de"
                                                     ],
                                     mode='failing',
                                     builders=["MPIPC_sun"
                                              ,"SQUALL_sun"
                                              ,"TORNADO_sun"
                                              ],
                                     subject='[BUILDBOT ICON] Compiler specific failure: %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))




####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "ICON"
c['projectURL']  = "https://code.zmaw.de/projects/icon"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://mpipc91.mpi.zmaw.de:8011/"

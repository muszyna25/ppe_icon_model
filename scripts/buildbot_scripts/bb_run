#!/bin/ksh

#------------------------------------------------------------------------------
# This script is called on all buildbot slaves and should be used to call
# test jobs or performance jobs.
# The buildbot server sets the two environment variable BB_SYSTEM and BB_SLAVE
#
# +---------------+-----------+---------------+
# | builder       | BB_SYSTEM |   BB_SLAVE    |
# +---------------+-----------+---------------+
# | BLIZZ_nMnO    | blizzard  | blizz_nMnO    |
# | BLIZZ_nMyO    | blizzard  | blizz_nMyO    |
# | BLIZZ_yMnO    | blizzard  | blizz_yMnO    |
# | BLIZZ_yMyO    | blizzard  | blizz_yMyO    |
# |               |           |               |
# | MPIPC_gcc     | mpipc     | mpipc_gcc     |
# | MPIPC_nag     | mpipc     | mpipc_nag     |
# | MPIPC_intel   | mpipc     | mpipc_intel   |
# | MPIPC_pgi     | mpipc     | mpipc_pgi     |
# | MPIPC_sun     | mpipc     | mpipc_sun     |
# |               |           |               |
# | SQUALL_gcc    | squall    | squall_gcc    |
# | SQUALL_nag    | squall    | squall_nag    |
# | SQUALL_intel  | squall    | squall_intel  |
# | SQUALL_pgi    | squall    | squall_pgi    |
# | SQUALL_sun    | squall    | squall_sun    |
# |               |           |               |
# | TORNADO_gcc   | tornado   | tornado_gcc   |
# | TORNADO_nag   | tornado   | tornado_nag   |
# | TORNADO_intel | tornado   | tornado_intel |
# | TORNADO_pgi   | tornado   | tornado_pgi   |
# | TORNADO_sun   | tornado   | tornado_sun   |
# |               |           |               |
# +---------------+-----------+---------------+
#
# More info for 'builder' can be find on 
#	http://mpipc51.mpi.zmaw.de:8011/buildslaves
# or
# 	http://mpipc51.mpi.zmaw.de:8011/waterfall
#
#------------------------------------------------------------------------------
# First version by Walter Sauf (MPI-M, 2009-10-22)
#
# $Rev$:     Revision of last commit
# $Author$:  Author of last commit
# $Date$:    Date of last commit
#------------------------------------------------------------------------------

#Define of the text which is written in case of a script fail or OK run

TEXT_RUN_FAILED="FAILED"
TEXT_RUN_OK="OK"
use_exp_list="false"
build_post_file="true"
#==============================================================================
#
# With this function it is possible to stop or continue this script after an 
# error  The function has two parameter. The first one must be a return status. 
# The second one has to be 'TRUE' or 'FALSE'. If the second parameter is 'TRUE'
# and the return status is unequal '0' the script exit with the return status.
# In all other cases the script continues running the script.
# Because on the blizzard machine llsubmit returns allways "OK" we are using
# the helpfile .status 
#
#==============================================================================
#==============================================================================
stop_on_error()
{
# Check if the first parameter (return status) is not OK
    if [[ $1 -ne 0 || ${STATUS_IN_FILE} -ne 0 ]] 
    then
      if [[ $1 -ne 0 ]] 
      then
        printf '%-50s : %s \n' $2 ${TEXT_RUN_FAILED} >> ../${LOOP_STATUS_FILE}
        exit $1
      else
        printf '%-50s : %s\n' $2 ${TEXT_RUN_FAILED} >> ../${LOOP_STATUS_FILE}
        exit ${STATUS_IN_FILE}
      fi
    fi

    printf '%-50s : %s\n' $2 ${TEXT_RUN_OK} >> ../${LOOP_STATUS_FILE}
}

#------------------------------------------------------------------------------------

warning_on_error()
{
# Check if the first parameter (return status) is not OK
    if [[ $1 -ne 0 || ${STATUS_IN_FILE} -ne 0 ]] 
    then
      if [[ $1 -ne 0 ]] 
      then
        printf '%-50s : %s \n' $2 ${TEXT_RUN_FAILED} >> ../${LOOP_STATUS_FILE}
        echo "*********** WARNING: script failed  $1 ****************"
      else
        printf '%-50s : %s \n' $2 ${TEXT_RUN_FAILED} >> ../${LOOP_STATUS_FILE}
        echo "*********** WARNING: script failed  ${STATUS_IN_FILE} ****************"
      fi
    else
      printf '%-50s : %s\n' $2 ${TEXT_RUN_OK} >> ../${LOOP_STATUS_FILE}
      if [ "${build_post_file}" == "true" ]
      then 
        RUN_POST="run_scripts run post.`echo $2 | cut -d '.' -f2`.run"
        echo "${RUN_POST}" >> ./run_post.sh
      fi
    fi
}

#------------------------------------------------------------------------------------

return_ok()
{
    # Exit with status = 0 = OK
    # Arguments:
    #   $1 =  message
    echo "return_ok()"
    echo "$1"

    exit 0
}

#------------------------------------------------------------------------------------
set_section_info ()
{
  lists=`echo $1 | sed s/,/\ /g`
  lists=`echo $lists | sed s/:/\ /g`

  for s in $lists
  do
    case ${s} in
      grid)
         run_GRID=1
         run_ALL=0
         ;;
      all)
         run_ALL=1
         ;;
      exp)
         run_EXP=1
         run_ALL=0
         ;;
      post)
         run_POST=1
         run_ALL=0
         ;;

        *)
          echo "Wrong Parameter(s) in -section part"
          echo "!!! Please some examples below:"
          echo " "
          echo "bb_run  [-section=grid]"
          echo "bb_run  [-section=grid,exp]"
          echo "bb_run  [-section=grid,exp,post]"
          echo "bb_run  [-section=all]"
          echo " "
          exit 1
          ;;
      esac
  done

}
#------------------------------------------------------------------------------------
set_test_list ()
{
  use_exp_list="true"

  lists=`echo $1 | sed s/,/\ /g`
  lists=`echo $lists | sed s/:/\ /g`

  if [ -a ./run_exp.sh ]
  then
    rm -f ./run_exp.sh
  fi

  touch ./run_exp.sh

  for list in ${lists}
  do
    echo "run_scripts run exp.${list}.run" >> ./run_exp.sh
  done
}
#==============================================================================


#==============================================================================
# runs the scrpits ./$1/$2
run_scripts()
{
# Change to directory 'run' 
  echo "run_scripts $1 $2"
  cd $1

  EXP_FILES=`ls $2`

  for EXP_FILE in $EXP_FILES
  do 
    echo "---------------------------------------------------------"
    echo " "
    echo " Start new Script: ${EXP_FILE} at $(date)"
    echo " "
    echo "---------------------------------------------------------"
# Run job by using the correct submit call. Also save the calling status in STATUS

    case ${submit} in
      qsub)
        echo "Start. ${submit} $sync ./$EXP_FILE"
        OUT=`$submit $sync ./$EXP_FILE`
        STATUS=$?

        case ${use_site} in
          dwd.de)
            JOBID=`echo $OUT |  cut -d '.' -f1`
# We have to wait two seconds to be shure that the logging of the SGE-job is transfered into this directory
            sleep 2
            ;;
          *)
            JOBID=`echo $OUT |  awk '{print $3}'`
            ;;
        esac

        if   [[ x$JOBID != x ]] && [[ x$JOBID != x0 ]]
	then
          cat *$JOBID*
	fi
        ;;

      llsubmit)
        echo "Start. $submit -s ./$EXP_FILE"
        OUT=`$submit -s ./$EXP_FILE`
        STATUS=$?
        JOBID=`echo $OUT | cut -d'"' -f2 | cut -d'.' -f2`
        if   [[ x$JOBID != x ]]  && [[ x$JOBID != x0 ]]
	then
          cat *$JOBID*
	fi
        ;;

      nqsub)
        echo "====================================================================================== "
        echo "                  "
        echo "The job is not send to the SX9 because of problems in "
        echo "synchronizing jobs by using nqsub "
        echo "                  "
        echo "====================================================================================== "
        STATUS=1
        ;;
      *)
        echo "Start. ./$EXP_FILE"
        ./$EXP_FILE
        STATUS=$?
        ;;
    esac
    echo "---------------------------------------------------------"
    echo " "
    echo " Script: ${EXP_FILE} stops at $(date)"
    echo " "
    echo "---------------------------------------------------------"

    if [ x${STATUS_FILE} != "x" ]
    then
      if [ -r ${STATUS_FILE} ]
      then
        STATUS_IN_FILE=`cat ${STATUS_FILE}`
      else
        STATUS_IN_FILE=""
      fi
    else
      STATUS_IN_FILE=""
    fi

    $stop_check $STATUS $EXP_FILE
  
  done

  cd ..

}


#==============================================================================
#
#  Start of script
#
#==============================================================================
# Set default values
run_ALL=1
run_GRID=0
run_EXP=0
run_POST=0
target="NotSet"
use_list=0

scriptname="bb_run.ksh"

echo "$scriptname: start"

#------------------------------------------------------------------------------

# Set target variable, which is used to select case specific parameters from a
# built in data base.

if   [ "x$1" != "x" ]          # --> from argument
then
  paras=`echo $@`
  for para in $paras
  do     
    p=`echo $para | cut -d '-' -f2 | cut -d '=' -f1`
    v=`echo $para | cut -d '=' -f2`
    echo "p: $p v: $v"
    case ${p} in
      section)
        set_section_info "$v"
        ;;
      target)
        target="$v"
        source="argument"
        ;;
      test)
        if [ "x$v" != "xall" ]
        then
          set_test_list "$v"
        fi
        ;;
      *)
        echo "Wrong Parameter(s) $@"
        echo "!!! Please use:"
        echo " "
        echo "bb_run [-target=tornado_nag] [-section=grid,exp,post] -test=exp1,exp2"
        echo " "
        exit 1
        ;;
      esac
    done

fi

if [ "x$BB_SLAVE" != "x" -a "$target" == "NotSet" ]   # --> from environment variable BB_SLAVE
then

    target="$BB_SLAVE"
    source='$BB_SLAVE'

else                         # --> as default
    target="default"
    source="$scriptname"
fi

echo "$scriptname: target          = $target (source = $source)"



#------------------------------------------------------------------------------
# grids will be created by create_global_grids.run
# ln -s ../../../buildbot.grids grids

#------------------------------------------------------------------------------
# define which account to use, and recreate run scripts
# only effective on blizzard
echo "use_account_no=mh0287" >> ./config/set-up.info
./make_runscripts

#------------------------------------------------------------------------------\
# read set-up info
. ./config/set-up.info
submit=$use_submit

# define different parameter for SGE sync
# MPI -sync y
# DWD -W block=true

if   [ "x${submit}" == "xqsub" ]
then
    case ${use_site} in
      dwd.de)
         sync="-W block=true"
        ;;
      *)
         sync="-sync y"
        ;;
    esac
    echo "change submit to ${submit} ${sync}"
fi

#-----------------------------------------------------------------------------
# load ../setting if exists  
if [ -a ./setting ]
then
  . ./setting
fi
#-----------------------------------------------------------------------------

#==============================================================
# create ICON grids

if [ "${run_ALL}" == "1" -o "${run_GRID}" -eq "1" ]
then

  echo "|======================================================|" 
  echo "|                                                      |"
  echo "|         Running grid-scripts                         |"
  echo "|                                                      |"
  echo "|======================================================|"

  LOOP_STATUS_FILE="LOOP_STATUS_GRID_FILE"
  rm -f ${LOOP_STATUS_FILE}


  stop_check="warning_on_error"
  build_post_file="false"

  run_scripts run "grid.create_nested_grids.run"
  run_scripts run "grid.create_builtbot_grids.run"


# Check if a 'NOT successful' is in the status file?

  ALL_RUNS_OK=`grep ${TEXT_RUN_FAILED} ${LOOP_STATUS_FILE}`

  if [ $? == 0 ]
  then
    echo "One or more Grid-Runs were not successful"
    RETURN_STATUS=1
    exit 1
  else
    echo "All Grid-Runs were successful"
    RETURN_STATUS=0
  fi
fi


################################################################

if [ "${run_ALL}" == "1" -o "${run_EXP}" -eq "1" ]
then

  echo "|======================================================|" 
  echo "|                                                      |"
  echo "|         Running exp-scripts                          |"
  echo "|                                                      |"
  echo "|======================================================|"

  LOOP_STATUS_FILE="LOOP_STATUS_EXP_FILE"

  rm -f ${LOOP_STATUS_FILE}
  rm -f ./run/run_post.sh
  touch ./run/run_post.sh

  stop_check="warning_on_error"
  build_post_file="true"

  if [ "${use_exp_list}" == "true" ] 
  then 
    echo "Run one or more special experiments"
    . ./run_exp.sh
    rm -f ./run_exp.sh
  else
    echo "Run all exp.test_*.run in run directory"
    run_scripts run "exp.test_*.run"
  fi

  ALL_RUNS_OK=`grep ${TEXT_RUN_FAILED} ${LOOP_STATUS_FILE}`

  if [ $? == 0 ]
  then
    echo "One or more Exp-Runs were not successful"
    RETURN_STATUS=1
  else
    echo "All Exp-Runs were successful"
    RETURN_STATUS=0
  fi

fi


#==============================================================

if [ "${run_ALL}" == "1" -o "${run_POST}" -eq "1" ]
then

  echo "|======================================================|"
  echo "|                                                      |"
  echo "|          Running postprocessing                      |"
  echo "|              $(date)                                 |"
  echo "|                                                      |"
  echo "|======================================================|"

  echo "POST Part"

  LOOP_STATUS_FILE="LOOP_STATUS_POST_FILE"

  rm -f ${LOOP_STATUS_FILE}
  stop_check="warning_on_error"
  build_post_file="false"

  if [  -a ./run/run_post.sh ] 
  then 
    echo "Use spezial file ./run/run_post.sh for post-script run"
    . ./run/run_post.sh
  else
    echo "Run all post-script post.test_*.run"
    run_scripts run "post.test_*.run" 
  fi

  ALL_RUNS_OK=`grep ${TEXT_RUN_FAILED} ${LOOP_STATUS_FILE}`

  if [ $? == 0 ]
  then
    echo "One or more Post-Runs were not successful"
    RETURN_STATUS=1
  else
    echo "All Post-Runs were successful"
    RETURN_STATUS=0
  fi

fi


echo "|======================================================|"
echo "|                                                      |"
echo "|           Ends                                       |"
echo "|              $(date)                                 |"
echo "|                                                      |"
echo "|======================================================|"
# return OK Status

exit ${RETURN_STATUS}


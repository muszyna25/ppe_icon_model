#!/bin/ksh
# -------------------------------------------------------
# MARS request to read data used in the ifs2icon utility.
# run as: mars4icon_smi_32r3+ 2011010100 0 255 1/to/91 (optional EDA member number)
#
# versions:
#   mars4icon_smi_32r3+:      conversion of SWVL to soil moisture index SMI
#                             for horizontal interpolation (assuming post 32r3
#                             soil model input - 6 soil types)
#   mars4icon_smi_32r2-:      assuming model input from pre 32r3 cycles
#                             (single soil type)
#   mars4icon_smi_ERAinterim: using ERA-Interim data 
#                             (31r1 model with 36r4 land model data)
#                             2 options:
#                             exp=fiv7: ERA-Interim forced land model
#                             exp=fiv8: ERA-Interim + GPCP corrected precip
#
# attention: 
#   * requires data routine "datconv" by J. Foerster
#   * at DWD requires ECMWF login by eccert
#   * requires mars version 1.9.9
#     (. ${GRIB_API}/bin/grib_api-setenv -r -V1.9.9)
#   * since cy36r4 (2010/11/09) there is rain and snow, which is required by IFS2ICON
#     (optionally turn on/off crwc/csw)
#   * ERAinterm: only works until 2010! (fiv8 not available afterwards)
#   * !!!!!!ATTENTION: Even though SWVL is converted to soil moisture index SMI, 
#     this is not reflected within the corresponding metadata. Metadata still belong 
#     to SWVL. !!!!!!!!!
#
# history:
#   Helmut Frank    201107  adopted from GME equivalent
#   Martin Koehler  201108  SMI soil moisture index
# -------------------------------------------------------

# --- argument list ---

set -x

pdatin=${1:-g12}          # initial time (or "${1: 2010070100 2010070200}")
step=${2:-0}              # forecast step (in hours)
res="${3:-255}"           # resolution
levelist=${4:-1/to/137}   # levels (L137 from 2013062512)
eda_number=${5:--1}       # EDA member (ensemble data assimilation 0-10)

if [ ${eda_number} -eq -1 ] ; then
  stream='oper'
else
  stream='enda'
fi

# --- data output ---

# define data directory (if not set otherwise)
datadir=${IFSDATADIR:-/e/uwork/${USER}/icon/ifs.data}
mkdir -p $datadir
tempdir=${TMPDIR}

# --- date processing ---

datconv=${DATCONVCMD:-datconv}
cymdg=$(${datconv} -Cy ${pdatin})
typeset -L8 cymd=${cymdg}
typeset -R2 hh=${cymdg}
cymdg_fc=$(${datconv} -Cy ${pdatin} -d ${step})

if [ ${step} -eq 0 ]; then
  type=an
else
  type=fc
fi

if [ ${cymd} -ge 20101109 ] ; then
  rainsnow="/crwc/cswc"
else
  rainsnow=""
fi

##if [ ${cymd} -ge 20131119 ] ; then
#  stream="elda"
#  anoffset=9
##else
##  stream="enda"
##  anoffset=0
##fi

# --- read ---

case ${res} in
    255) grd=128 ;;
    399) grd=200 ;;
    639) grd=320 ;;
    799) grd=400 ;;
   1279) grd=640 ;;
esac

if [[ -z $RESULT_GRIB_FILE ]] ; then
  grib_file=${datadir}/ifs_oper_T${res}_${cymdg_fc}.grb
else
  grib_file=${RESULT_GRIB_FILE}
fi

cat > ${tempdir}/MARS_IN.$$ << MARS_IFS2ICON_EOF.$$
# MARS request for ifs2icon
retrieve,
        padding  = 0,
        accuracy = 16,
        class    = od,
        number   = ${eda_number},
      ##expver   = 63,
        expver   = 1,
        domain   = g,
        stream   = ${stream},
        type     = ${type},
      ##anoffset = ${anoffset},
        date     = ${cymd},
        time     = ${hh},
        step     = ${step},
        target   = "${grib_file}",
        param    = u/v/w/t/q/clwc/ciwc${rainsnow}/o3,   # /crwc/cswc/ rain,snow on/off
        repres   = sh,                                  # spherical harmonics
        resol    = ${res},
        grid     = ${grd},
        gaussian = regular,
        levtype  = ml,                                  # model levels
        levelist = ${levelist}
retrieve,
        param    = lnsp/z,
        levelist = 1
retrieve,
        param    = tsn/skt/sst/stl1/stl2/stl3/stl4/sd/rsn/asn/src/slt/z,
        repres   = gg, 
        resol    = off, 
        levtype  = surface
retrieve,
        param    = ci,
        fieldset = ci0
compute,
        formula  = "nobitmap(ci0,0)",                   # missing value -> 0
        fieldset = ci
write,  
        fieldset = ci, 
        target   = "${grib_file}"

# Retrieve the soil type to fieldset slt
retrieve,
        param    = SLT/SWVL1/SWVL2/SWVL3/SWVL4,
        gaussian = reduced,
        target   = "${datadir}/slt-swvl.grb",
        fieldset = off
read,
        source   = "${datadir}/slt-swvl.grb",
        param    = SLT,
        fieldset = slt
# Retrieve the Volumetric Soil Water Layer 1 to fieldset swvl
read,   source   = "${datadir}/slt-swvl.grb",
        param    = SWVL1,
        fieldset = swvl
# Compute the soil moisture index SMI. At each grid point 
# with a non-zero value for soil type (slt<>0): one and 
# only one of the following will be non-zero.
compute,fieldset = smi11,
        formula  = "(swvl-0.059)/(0.242-0.059)*(slt=1)"
compute,fieldset = smi12,
        formula  = "(swvl-0.151)/(0.346-0.151)*(slt=2)"
compute,fieldset = smi13,
        formula  = "(swvl-0.133)/(0.382-0.133)*(slt=3)"
compute,fieldset = smi14,
        formula  = "(swvl-0.279)/(0.448-0.279)*(slt=4)"
compute,fieldset = smi15,
        formula  = "(swvl-0.335)/(0.541-0.335)*(slt=5)"
compute,fieldset = smi16,
        formula  = "(swvl-0.267)/(0.662-0.267)*(slt=6)"
compute,fieldset = smi17,
        formula  = "(swvl-0.151)/(0.346-0.151)*(slt=7)"
compute,fieldset = smi1,
        formula  = "smi11 + smi12 + smi13 + smi14 + smi15 + smi16 + smi17"

# Same for soil level 2
read,   source   = "${datadir}/slt-swvl.grb",
        param    = SWVL2,
        fieldset = swvl
compute,fieldset = smi21,
        formula  = "(swvl-0.059)/(0.242-0.059)*(slt=1)"
compute,fieldset = smi22,
        formula  = "(swvl-0.151)/(0.346-0.151)*(slt=2)"
compute,fieldset = smi23,
        formula  = "(swvl-0.133)/(0.382-0.133)*(slt=3)"
compute,fieldset = smi24,
        formula  = "(swvl-0.279)/(0.448-0.279)*(slt=4)"
compute,fieldset = smi25,
        formula  = "(swvl-0.335)/(0.541-0.335)*(slt=5)"
compute,fieldset = smi26,
        formula  = "(swvl-0.267)/(0.662-0.267)*(slt=6)"
compute,fieldset = smi27,
        formula  = "(swvl-0.151)/(0.346-0.151)*(slt=7)"
compute,fieldset = smi2,
        formula  = "smi21 + smi22 + smi23 + smi24 + smi25 + smi26 + smi27"

# Same for soil level 3
read,   source   = "${datadir}/slt-swvl.grb",
        param    = SWVL3,
        fieldset = swvl
compute,fieldset = smi31,
        formula  = "(swvl-0.059)/(0.242-0.059)*(slt=1)"
compute,fieldset = smi32,
        formula  = "(swvl-0.151)/(0.346-0.151)*(slt=2)"
compute,fieldset = smi33,
        formula  = "(swvl-0.133)/(0.382-0.133)*(slt=3)"
compute,fieldset = smi34,
        formula  = "(swvl-0.279)/(0.448-0.279)*(slt=4)"
compute,fieldset = smi35,
        formula  = "(swvl-0.335)/(0.541-0.335)*(slt=5)"
compute,fieldset = smi36,
        formula  = "(swvl-0.267)/(0.662-0.267)*(slt=6)"
compute,fieldset = smi37,
        formula  = "(swvl-0.151)/(0.346-0.151)*(slt=7)"
compute,fieldset = smi3,
        formula  = "smi31 + smi32 + smi33 + smi34 + smi35 + smi36 + smi37"

# Same for soil level 4
read,   source   = "${datadir}/slt-swvl.grb",
        param    = SWVL4,
        fieldset = swvl
compute,fieldset = smi41,
        formula  = "(swvl-0.059)/(0.242-0.059)*(slt=1)"
compute,fieldset = smi42,
        formula  = "(swvl-0.151)/(0.346-0.151)*(slt=2)"
compute,fieldset = smi43,
        formula  = "(swvl-0.133)/(0.382-0.133)*(slt=3)"
compute,fieldset = smi44,
        formula  = "(swvl-0.279)/(0.448-0.279)*(slt=4)"
compute,fieldset = smi45,
        formula  = "(swvl-0.335)/(0.541-0.335)*(slt=5)"
compute,fieldset = smi46,
        formula  = "(swvl-0.267)/(0.662-0.267)*(slt=6)"
compute,fieldset = smi47,
        formula  = "(swvl-0.151)/(0.346-0.151)*(slt=7)"
compute,fieldset = smi4,
        formula  = "smi41 + smi42 + smi43 + smi44 + smi45 + smi46 + smi47"

# Write SMI 1-4 (convert from reduced Gaussian to regular Gaussian)
write,  fieldset = smi1, target = "${datadir}/smi.grb"
write,  fieldset = smi2, target = "${datadir}/smi.grb"
write,  fieldset = smi3, target = "${datadir}/smi.grb"
write,  fieldset = smi4, target = "${datadir}/smi.grb"
read,   param = SWVL1, fieldset = smi1, source = "${datadir}/smi.grb", 
        gaussian=regular, grid=${grd}
read,   param = SWVL2, fieldset = smi2, source = "${datadir}/smi.grb", 
        gaussian=regular, grid=${grd}
read,   param = SWVL3, fieldset = smi3, source = "${datadir}/smi.grb", 
        gaussian=regular, grid=${grd}
read,   param = SWVL4, fieldset = smi4, source = "${datadir}/smi.grb", 
        gaussian=regular, grid=${grd}
write,  fieldset = smi1, target = "${grib_file}"
write,  fieldset = smi2, target = "${grib_file}"
write,  fieldset = smi3, target = "${grib_file}"
write,  fieldset = smi4, target = "${grib_file}"

retrieve,
        type     = an,
        step     = 0,
        repres   = gg,                  # gaussian grid,
        resol    = off,
        levtype  = surface,
        gaussian = regular,
        param    = lsm/sr/cvl/cvh/sdor/isor/anor/slor,
        target   = "${grib_file}"
MARS_IFS2ICON_EOF.$$

mars ${tempdir}/MARS_IN.$$
rc_mars=$?

if [ $rc_mars -ne 0 ]; then
    { print -- "Error $rc_mars executing mars"
      print -- "Input file to MARS:"
      cat ${tempdir}/MARS_IN.$$
    } >&2
    rm ${tempdir}/MARS_IN.$$
    exit $rc_mars
fi

print ""
print "Retrieved operational analysis for ${cymdg}. resol=${res} grid=${grd} levels=${levelist}"

ls -al ${grib_file}
rm -f ${tempdir}/MARS_IN.$$


exit 0

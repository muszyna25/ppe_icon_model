#!/bin/ksh

# usage get_atmo_only <icon-dev full path> <ocean only full path>

set -x
icon_dev=$1
atmo_only=$2

if [ ! -d ${atmo_only} ] ; then
  mkdir -p ${atmo_only}
fi
  
cd ${atmo_only}


#-----------------------------------------------------------------------------------
link_source_list()
{
  source_folder=$1
  source_files_list="$2"

  if [ ! -d ${atmo_only}/${source_folder} ] ; then
    mkdir -p ${atmo_only}/${source_folder}
  fi
  
  if [ "${source_files_list}" == "all" ] ; then
    ln -s ${icon_dev}/${source_folder}/*  ${atmo_only}/${source_folder}
  else 
    for source_file in ${source_files_list}
    do
      ln -s ${icon_dev}/${source_folder}/${source_file}  ${atmo_only}/${source_folder}/${source_file}
    done
  fi
  
}

#-----------------------------------------------------------------------------------
#get src
link_source_list src "advection 
art_interface 
atm_dyn_icoham 
atm_dyn_iconam 
atm_phy_echam 
atm_phy_edmf 
atm_phy_les 
atm_phy_nwp 
atm_phy_schemes 
CMakeLists.txt 
configure_model 
coupler 
diagnostics 
drivers 
grid_generator 
include 
io 
lnd_phy_jsbach 
lnd_phy_nwp 
lnd_phy_schemes 
namelists 
parallel_infrastructure 
sea_ice 
shared 
shr_horizontal 
templates 
testbed 
testcases 
drivers"

#-----------------------------------------------------------------------------------
#get the rest
cd ${icon_dev}/run
run_scripts=`ls *nat*`
run_scripts="$run_scripts exec.iconrun add_required_atmo_non-hydrostatic_files"
cd -

link_source_list run "$run_scripts"

link_source_list config all

link_source_list . "data doc include scripts support create_builds build_all 
aclocal.m4 configure.ac configure make_my_runscript make_runscripts make_nat-ape-dec_runs 
Makefile.in externals"
 
#-----------------------------------------------------------------------------------
# add some parameteres files
rm -f ${atmo_only}/config/icon_components
cat > ${atmo_only}/config/icon_components << EOF
#===============================================
# define the components to be compiled with ICON
icon_components=ICON_ATMO JSBACH
EOF


cat > ${atmo_only}/config/multiple_builds << EOF
#==============================================
# This file defines multiple builds for ICON
#==============================================

#==============================================
# Define the run scripts in run/ to be common along the following builds
# run_scripts=*

#==============================================
# Define parameters for each build - examples:
build_folder=gcc_yMyO_hiopt configure_options=--with-fortran=gcc --with-mpi  --with-openmp --with-flags=hiopt
build_folder=gcc_nMnO configure_options=--with-fortran=gcc --without-mpi
build_folder=gcc_nMyO configure_options=--with-fortran=gcc --without-mpi --with-openmp
build_folder=gcc_yMnO configure_options=--with-fortran=gcc --with-mpi
build_folder=gcc_yMnO_hiopt configure_options=--with-fortran=gcc --with-mpi --with-flags=hiopt
build_folder=nag_nMnO configure_options=--with-fortran=nag --without-mpi
build_folder=nag_yMnO configure_options=--with-fortran=nag --with-mpi
build_folder=intel_nMyO configure_options=--with-fortran=intel --without-mpi --with-openmp
build_folder=intel_nMnO configure_options=--with-fortran=intel --without-mpi
build_folder=intel_yMnO configure_options=--with-fortran=intel --with-mpi
build_folder=intel_yMyO configure_options=--with-fortran=intel --with-mpi --with-openmp
build_folder=intel_yMnO_hiopt configure_options=--with-fortran=intel --with-mpi --with-flags=hiopt
build_folder=pgi_yMnO configure_options=--with-fortran=pgi  --with-mpi
EOF

exit






      
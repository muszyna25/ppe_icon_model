#!/bin/ksh

# usage get_ocean_only <icon-dev full path> <ocean only full path>

set -x
icon_dev=$1
ocean_only=$2

if [ ! -d ${ocean_only} ] ; then
  mkdir -p ${ocean_only}
fi
  
cd ${ocean_only}


#-----------------------------------------------------------------------------------
link_source_list()
{
  source_folder=$1
  source_files_list="$2"

  if [ ! -d ${ocean_only}/${source_folder} ] ; then
    mkdir -p ${ocean_only}/${source_folder}
  fi
  
  if [ "${source_files_list}" == "all" ] ; then
    ln -s ${icon_dev}/${source_folder}/*  ${ocean_only}/${source_folder}
  else 
    for source_file in ${source_files_list}
    do
      ln -s ${icon_dev}/${source_folder}/${source_file}  ${ocean_only}/${source_folder}
    done
  fi
  
}

#-----------------------------------------------------------------------------------
#get src
link_source_list src "ocean sea_ice parallel_infrastructure include"

link_source_list src/advection "mo_advection_utils.f90"

link_source_list src/configure_model "mo_dynamics_config.f90 mo_gribout_config.f90 mo_grid_config.f90 mo_io_config.f90 mo_name_list_output_config.f90 
mo_parallel_config.f90 mo_run_config.f90 mo_time_config.f90"

link_source_list src/drivers "control_model.f90 mo_icon_testbed.f90 mo_master_control.f90"

link_source_list src/io/ "mo_cf_convention.f90 mo_grib1.f90 mo_grib2.f90 mo_io_async.f90 mo_io_restart_attributes.f90 mo_io_restart.f90            
mo_io_restart_namelist.f90 mo_io_units.f90 mo_io_util.f90 mo_io_vlist.f90 mo_name_list_output.f90 mo_name_list_output_init.f90 
mo_name_list_output_types.f90  mo_netcdf_read.f90  mo_nml_annotate.f90 mo_output.f90 mo_post_op.f90               
mo_read_netcdf_parallel.f90 mo_util_file.f90 mo_util_grib.f90 mo_util_nml.f90"

link_source_list src/namelists "mo_dbg_nml.f90  mo_dynamics_nml.f90 mo_gribout_nml.f90 mo_grid_nml.f90 mo_io_nml.f90 
mo_master_nml.f90 mo_parallel_nml.f90 mo_run_nml.f90 mo_sea_ice_nml.f90 mo_time_nml.f90" 

link_source_list src/shared "mo_cdi_constants.f90 mo_datetime.f90 mo_dictionary.f90 mo_exception.f90 mo_fast_math_lib.f90 mo_fortran_tools.f90 
mo_get_utc_date_tr.f90 mo_grid_subset.f90 mo_impl_constants.f90 mo_impl_constants_grf.f90 mo_kind.f90 
mo_linked_list.f90 mo_loopindices.f90 mo_math_constants.f90 mo_math_types.f90  mo_math_utilities.f90 
mo_namelist.f90 mo_orbit.f90 mo_physical_constants.f90 mo_profile.f90 mo_real_timer.f90 mo_statistics.f90 
mo_time_base.f90 mo_timer.f90 mo_util_backtrace.f90 mo_util_dbg_prnt.f90 mo_util_debug.f90 mo_util_hash.f90  
mo_util_signal.f90 mo_util_sort.f90 mo_util_string.f90 mo_util_sysinfo.f90 mo_util_uuid.f90 
mo_var_list_element.f90 mo_var_list.f90 mo_var_metadata.f90 mo_vertical_coord_table.f90 mo_util_svn.f90"

link_source_list src/shr_horizontal "mo_alloc_patches.f90 mo_ext_data_types.f90 mo_grid_geometry_info.f90 mo_grid_tools.f90 
mo_intp_data_strc.f90 mo_lonlat_grid.f90 mo_model_domain.f90 mo_model_domimp_patches.f90 
mo_model_domimp_setup.f90 mo_reorder_patches.f90 mo_icon_interpolation_scalar.f90"
         
link_source_list src/testbed "mo_icon_testbed_config.f90 mo_icon_testbed_nml.f90  mo_testbed_ocean_performance.f90"

link_source_list src/testcases "mo_ape_params.f90"

#-----------------------------------------------------------------------------------
#get the rest
cd ${icon_dev}/run
run_scripts=`ls *oce*`
run_scripts="$run_scripts exec.iconrun"
cd -

link_source_list run "$run_scripts"

link_source_list config all

link_source_list . "data doc include scripts support create_builds build_all 
aclocal.m4 configure.ac configure make_my_runscript make_runscripts make_nat-ape-dec_runs Makefile.in"
 
#-----------------------------------------------------------------------------------
# add some parameteres files
rm -f ${ocean_only}/config/icon_components
cat > ${ocean_only}/config/icon_components << EOF
#===============================================
# define the components to be compiled with ICON
icon_components=ICON_OCEAN_ONLY
EOF


cat > ${ocean_only}/config/multiple_builds << EOF
#==============================================
# This file defines multiple builds for ICON
#==============================================

#==============================================
# Define the run scripts in run/ to be common along the following builds
run_scripts=*

#==============================================
# Define parameters for each build - examples:
build_folder=gcc_yMyO_hiopt configure_options=--with-fortran=gcc --with-mpi  --with-openmp --with-flags=hiopt
build_folder=gcc_nMnO configure_options=--with-fortran=gcc --without-mpi
build_folder=gcc_nMyO configure_options=--with-fortran=gcc --without-mpi --with-openmp
build_folder=gcc_yMnO configure_options=--with-fortran=gcc --with-mpi
build_folder=gcc_yMnO_hiopt configure_options=--with-fortran=gcc --with-mpi --with-flags=hiopt
build_folder=nag_nMnO configure_options=--with-fortran=nag --without-mpi
build_folder=nag_yMnO configure_options=--with-fortran=nag --with-mpi
build_folder=intel_nMyO configure_options=--with-fortran=intel --without-mpi --with-openmp
build_folder=intel_nMnO configure_options=--with-fortran=intel --without-mpi
build_folder=intel_yMnO configure_options=--with-fortran=intel --with-mpi
build_folder=intel_yMyO configure_options=--with-fortran=intel --with-mpi --with-openmp
build_folder=intel_yMnO_hiopt configure_options=--with-fortran=intel --with-mpi --with-flags=hiopt
build_folder=pgi_yMnO configure_options=--with-fortran=pgi  --with-mpi
EOF

exit






      
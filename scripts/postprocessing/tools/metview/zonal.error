# Metview Macro: ICON errors
# 
# run as: metview -b zonal.error 22 CLC ml diff 20110101 00 20110103 00 2 R2B04
#
# Koehler Martin, August 2011
#-----------------------------------------------------------------------
  
# --- argument list

mode = runmode()
if mode = 'batch' or mode = 'execute' then  
  args    = arguments()
  print()
  print("zonal.error parameters: ", args)
  expnum  = args[1]      # experiment ID (e.g. 22)
  varname = args[2]      # variable name (e.g. T)
  levtype = args[3]      # level type (e.g. pl, ml, lnd)
  stat    = args[4]      # statistic (snap, ctr or diff) 
  inidate = args[5]      # 
  initime = args[6]      # 
  verdate = args[7]      # 
  vertime = args[8]      #
  ndays   = args[9]      # mean of multiple forecasts separated by one day
  exphres = args[10]     # horizontal resolution (e.g. R2B04)
  if initime < 10 then
     initime = "0"&initime
  end if
  if vertime < 10 then
     vertime = "0"&vertime
  end if
else
  expnum  = 22
  varname = 'T_P'        # T U V QV QC QI CC Q1 Q2 Q3
  levtype = 'pl'
  stat    = 'diff'
  inidate = '20110101'
  initime = '00'
  verdate = '20110102'
  vertime = '00'
  ndays   = 1
  exphres = 'R2B04'
end if  


#-----------------------------------------------------------------------
# --- setup

user     = getenv("USER")
plotdir  = getenv("PLOTDIR")
datafile = getenv("DATAFILE")
tailfile = getenv("TAILFILE")
lmonth   = getenv("LMONTH")
yyyymm   = getenv("YYYYMM")
#plotdir = '/fe1-daten/'&user&'/plots/icon/nwp.exp'&expnum

expres  = 'NWP.'&exphres&'L90'

varfile  = varname
case levtype of
  'ml':  
     vartitle = varname&'  ml'
     varplot  = varname
     end
  'pl':  
     vartitle = varname&'  pl'  
     varplot  = varname&'_P'
     end
  'zl':  
     vartitle = varname&'  zl'  
     varplot  = varname&'_Z'
     end
  'sfc': 
     vartitle = varname
     varplot  = varname
     end 
  'lnd': 
     vartitle = varname
     varplot  = varname
     end 
end case


if ndays > 1  then
  nd_txt1 = '_n'&ndays
  nd_txt2 = ' '&ndays&' days'
else
  nd_txt1 = ''
  nd_txt2 = ''
end if

case stat of
  'diff':
    plotfile= plotdir&'/zon.'&expres&'.'&expnum&'-ifs.'&varplot&'.'&verdate&vertime&nd_txt1&'.L1'     # no ".ps"
    title   = vartitle&'    '&expnum&'     EXP-ANA    '&inidate&initime&' to '&verdate&vertime&nd_txt2
  end
  'snap':
    plotfile= plotdir&'/zon.'&expres&'.'&expnum&    '.'&varplot&'.'&verdate&vertime&nd_txt1&'.L1' 
    title   = vartitle&'    '&expnum&'    '&verdate&vertime&nd_txt2
  end
  'ctr':
    plotfile= plotdir&'/zon.'&expres&'.'&expnum&'.ifs.'&varplot&'.'&verdate&vertime&nd_txt1&'.L1'
    title   = vartitle&'    ANA    '&verdate&vertime&nd_txt2
  end
end case

precision( 4 )           # precision of numbers in plots


#-----------------------------------------------------------------------
#--- read data

# scaling: to 1/day from 1/s
scale = 1.0
if varname='ttendcds' or varname='qtendcds' or varname='utendcds' or varname='vtendcds' or
   varname='ttendts'  or varname='qtendt'   or varname='utendts'  or varname='vtendts'  or
   varname='ttends'   or varname='utends'   or varname='vtends'   or
   varname='ewgd'     or varname='nsgd'     or varname='ttendsw'  or varname='ttendlw'  then
  scale = 86400.0
end if

# capitalization
#if varname = 'QC'   or varname = 'QI'   or
#   varname = 'CLWC' or varname = 'CIWC' or varname = 'CRWC' or varname = 'CSWC' then
#  varfile = lowercase(varfile)
#end if

# rename
case varname of
 'QV':      varfile = '192.201.28'  end
 'QC':      varfile = 'qc'          end
 'QI':      varfile = 'qi'          end
 'Q1':      varfile = 'QV'          end
 'Q2':      if levtype = 'pl' then varfile = '0.1.22' else varfile = 'QC'  end if end
 'Q3':      if levtype = 'pl' then varfile = '0.1.82' else varfile = 'QI'  end if end
 'CC':      if levtype = 'pl' then varfile = '0.6.22' else varfile = 'CLC' end if end
 'QTVAR':   varfile = '192.201.39'  end
 'ttendsw': varfile = '192.162.100' end
 'ttendlw': varfile = '192.162.101' end
end case

#verify QV,QC,QI against Q1,Q2,Q3 at initial condition (IFS)
varfile2 = varfile
case varname of
 'QV':      varfile2 = 'QV'  end
 'QC':      varfile2 = 'QC'          end
 'QI':      varfile2 = 'QI'          end
end case


for nd=1 to ndays do 


# --- data files

# source_ini_icon = '/uwork1/mkoehler/icon/experiments/exp'&expnum&
#   '/NWP_icon'&exphres&inidate&initime&'_DOM01_0001_'&varfile&'_'&levtype&'.grb'
# source_ver_icon = '/uwork1/mkoehler/icon/experiments/exp'&expnum&
#   '/NWP_icon'&exphres&verdate&vertime&'_DOM01_0001_'&varfile&'_'&levtype&'.grb' 
# source_pl_ifs ='/uwork1/mkoehler/ifs.data/oper/ifs_oper_2x2_20110101-20.pl.grb'
# source_sfc_ifs='/uwork1/mkoehler/ifs.data/oper/ifs_oper_2x2_20110101-20.sfc.grb'

  mntxt = parse(tailfile, "_")

  if lmonth = 0 then
    source_ini_icon = datafile&inidate&initime&'_DOM01_0001_'&varfile&'_'&levtype&'.grb'
    source_ver_icon = datafile&verdate&vertime&'_DOM01_0001_'&varfile2&'_'&levtype&'.grb'
    source_pl_ifs ='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_'&yyyymm&'.pl.grb'
    source_sfc_ifs='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_'&yyyymm&'.sfc.grb'
  else
    source_ini_icon = datafile&yyyymm&'_DOM01_0001_'&varfile&'_'&levtype&tailfile
    source_ver_icon = datafile&yyyymm&'_DOM01_0001_'&varfile2&'_'&levtype&tailfile 
    source_pl_ifs ='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_'&yyyymm&'.pl.' &mntxt[3]
    source_sfc_ifs='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_'&yyyymm&'.sfc.'&mntxt[3]
  end if


#--- read ICON experiment

  vertime1 = parse(vertime)
  initime1 = parse(initime)
  step = 24 * (date(verdate)+vertime1/24.0 - date(inidate)-initime1/24.0)

  if stat <> 'ctr' then
    temp = read(
                SOURCE   : source_ini_icon,
#               param    : varname,
#               levtype  : levtype,
  		date     : inidate,
  		time     : initime,
                step     : step
  	       )
    if nd=1 then
      nlev    = count(temp)
      var_exp = temp
     #print(var_exp)
    else
      var_exp = var_exp & temp
    end if
  end if


#--- read IFS data
	
  if stat <> 'snap' then
    case levtype of
      'pl':
        param = varname
        case varname of
          'FI'  : param = 'Z' end
          'Q1'  : param = 'QV' end
          'Q2'  : param = 'QC' end
          'Q3'  : param = 'QI' end
#         'R_P' : param = 'R' end
        end case
        temp = read(  
                SOURCE   : source_pl_ifs,
                param    : param,
                date     : verdate,
  		time     : vertime
        )
        end
      otherwise:
        temp = read(  
  		SOURCE   : source_ver_icon, 
#               param    : varname,
#               levtype  : levtype,
   		date     : verdate,
   		time     : vertime,
                step     : 0
  	)
        end
    end case

    if nd=1 then
      nlev    = count(temp)
      var_ana = temp
     #print(var_ana)
    else
      var_ana = var_ana & temp
    end if
  end if

  inidate = inidate + 1
  verdate = verdate + 1

end for

#-----------------------------------------------------------------------
#--- processing

case stat of
  'diff':var_data = var_exp-var_ana
  end
  'snap':var_data = var_exp
  end
  'ctr': var_data = var_ana
  end
end case

var_data = var_data * scale

var_data = avgtime_met(var_data,nlev,ndays)

#nvar    = 1
#nlon    = grib_get_long(var_data[1],"Ni")
#nlat    = grib_get_long(var_data[1],"Nj")
#ntime   = count(var_data)/(nlev*nvar)
#meanvar = avgtime(var_data,nlon,nlat,nvar,nlev,ntime)   #large files from mean
	
var_zonal = xs_average(  
		DIRECTION           : "EW", 
		PRESSURE_LEVEL_AXIS : "LOG", 
		DATA                : var_data 
	)

# --- variable specific plotting

#level_type = 'count'         #linear
level_type  = 'level_list'    #exponential
level_count = 12

maxi = -1e10
mini =  1e10
sqr  = 0
for k = 1 to nlev do
  ave  = average_ew(var_data[k], [90,-180,-90,180], 2.0)
  maxi = max(maxi,maxvalue(ave))
  mini = min(mini,minvalue(ave))
  sqr  = sqr + ave*ave
end for
rms = sqrt( sum(sqr) / nlev / count(sqr) )

min_level  = mini
max_level  = max(-mini,maxi)
if max_level > 0.0 then
  max_level  = 4*round( max_level/4, -round(log10(max_level/4),0)+1 )
end if

#custom contouring:
#min_level = -20
#max_level = 50

statistic   = 'Min:  '&mini&'   Max:  '&maxi&'   Mean:  '&integrate(mean(var_data))
if stat = 'diff' then 
  statistic = statistic & '   RMS:  ' & rms
end if
          
# case varname of
#   'QC' :      #level_count = 9 
#               min_level   = 0.00001
#               max_level   = 0.0001       # 20               0.03   40
#   end
#   end
#   otherwise:  min_level  = minvalue(var_data)
#               max_level  = maxvalue(var_data)
#   end
# end case

#max_level = 4.0
 level_list = [-max_level, -max_level/2, -max_level/4, -max_level/8, -max_level/16, max_level/16, max_level/8, max_level/4, max_level/2, max_level]
#level_list = [-max_level, -max_level/2, -max_level/4, -max_level/8,                              max_level/8, max_level/4, max_level/2, max_level]
#level_list = [-20,-10,-5,-2,-1, 1,2,5,10,20]
#level_list = [-2.5,-2,-1.5,-1,-0.5,0.5,1,1.5,2,2.5]

#-----------------------------------------------------------------------
# --- Plot setup

text = mtext(  
        text_line_count :   2,
        TEXT_LINE_1     :   title, 
        text_line_2     :   statistic,
        text_font_size  :   0.6,
        TEXT_COLOUR     :   'BLACK' 
    )

all = mcont(  
                LEGEND                         : 'ON',
		CONTOUR                        : 'OFF', 
		CONTOUR_LEVEL_SELECTION_TYPE   : 'COUNT', 
		CONTOUR_LEVEL_COUNT            : level_count,
		CONTOUR_MAX_LEVEL              : maxi, 
 		CONTOUR_MIN_LEVEL              : mini, 
                CONTOUR_LABEL                  : 'OFF',
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
#		CONTOUR_SHADE_MAX_LEVEL_COLOUR : 'RED', 
#		CONTOUR_SHADE_MIN_LEVEL_COLOUR : 'BLUE_PURPLE',
#               contour_shade_colour_direction : "clockwise"
		contour_shade_colour_method    : "list",
                contour_shade_colour_list      : [                         # 12 colors:
                                                 "RGB(0.0 , 0.2 , 0.6)",   # dark blue
                                                 "RGB(0.2 , 0.4 , 0.7)",   #  i
                                                 "RGB(0.4 , 0.6 , 0.8)",   #  i
                                                 "RGB(0.6 , 0.8 , 0.9)",   #  i
                                                 "RGB(0.9 , 0.95, 1.0)",   # light blue
                                                 "RGB(0.93, 0.9 , 0.85)",  #  i
                                                 "RGB(0.96, 0.85, 0.75)",  #  i
                                                 "RGB(1.0 , 0.8 , 0.6)",   # light beige 
                                                 "RGB(0.95, 0.6 , 0.45)",  #  i
                                                 "RGB(0.9 , 0.4 , 0.3)",   #  i 
                                                 "RGB(0.8 , 0.2 , 0.15)",  #  i
                                                 "RGB(0.7 , 0.0 , 0.0)" ]  # dark red
        )
cont = mcont(  
                LEGEND                         : 'ON',
		CONTOUR                        : 'OFF',
		CONTOUR_LEVEL_SELECTION_TYPE   : level_type, 
		CONTOUR_LEVEL_COUNT            : level_count,
		CONTOUR_MAX_LEVEL              : max_level, 
		CONTOUR_MIN_LEVEL              : -max_level, 
		contour_level_list             : level_list,
                CONTOUR_LABEL                  : 'OFF',
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
		contour_shade_colour_method    : "list",
#		contour_shade_colour_list      : ["red","orange","orange_yellow","yellow","white","white","green","blue_green","blue","blue_purple"]
#		contour_shade_colour_list      : ["blue_purple", "blue", "blue_green", "green", "white", "yellow", "orange_yellow", "orange","red"]   # 9
#		contour_shade_colour_list      : ["blue", "blue_green", "green", "white", "yellow", "orange","red"]                                   # 7
#		contour_shade_colour_list      : ["red","orange","yellow","white","white","green","blue_green","blue"]
                contour_shade_colour_list      : ["RGB(0.0,0.2,0.7)", "RGB(0.3,0.5,0.8)", "RGB(0.6,0.7,0.9)", "RGB(0.9,0.95,1.0)", "white", 
                                                  "RGB(1.0,0.9,0.7)", "RGB(0.9,0.6,0.4)", "RGB(0.8,0.3,0.2)", "RGB(0.7,0.0 ,0.0)" ]                   # 9
 	)  

legend = mlegend(
        legend_text_colour      :    "black",
        legend_text_font_size   :    0.4
        )


#-----------------------------------------------------------------------
# --- Plot
 	
# Setup output format
file_ps  = ps_output(  OUTPUT_NAME : plotfile )
file_png = png_output( OUTPUT_NAME : plotfile )

if mode = 'batch' or mode = 'execute' then  
  shell('mkdir -p '&plotdir)
 #setoutput(file_ps, file_png)  
 #setoutput(file_png)  
  setoutput(file_ps)  
end if  
display_window = build_layout()


if stat = 'diff' then
  plot ( display_window[1], text, var_zonal, cont, legend )
else
  plot ( display_window[1], text, var_zonal, all,  legend )
end if

print('output: ',plotfile,'.*')
#shell('gv '&plotfile&'.ps&')


#-----------------------------------------------------------------------
# --- Function to build the layout.

function build_layout()

    #PageDescription  
    CartesianView = cartesianview(  
    		MAP_PROJECTION              : "cartesian", 
    		X_AXIS_TYPE                 : "regular", 
    		X_AUTOMATIC                 : "ON", 
    		X_MIN                       : 0, 
    		X_MAX                       : 100, 
    		Y_AXIS_TYPE                 : "regular", 
    		Y_AUTOMATIC                 : "ON", 
    		Y_MIN                       : 1000, 
    		Y_MAX                       : 0, 
    		SUBPAGE_X_POSITION          : 5, 
    		SUBPAGE_Y_POSITION          : 12, 
    		SUBPAGE_X_LENGTH            : 90, 
    		SUBPAGE_Y_LENGTH            : 90, 
    		PAGE_FRAME                  : "ON", 
    		PAGE_FRAME_COLOUR           : "BLUE", 
    		PAGE_FRAME_LINE_STYLE       : "SOLID", 
    		PAGE_FRAME_THICKNESS        : 2, 
    		PAGE_ID_LINE                : "OFF", 
    		PAGE_ID_LINE_TYPE           : "BOTH", 
    		PAGE_ID_LINE_COLOUR         : "BLUE", 
    		PAGE_ID_LINE_SYSTEM_PLOT    : "OFF", 
    		PAGE_ID_LINE_DATE_PLOT      : "OFF", 
    		PAGE_ID_LINE_USER_TEXT_PLOT : "ON", 
    		PAGE_ID_LINE_ERRORS_PLOT    : "OFF", 
    		PAGE_ID_LINE_LOGO_PLOT      : "OFF", 
    		PAGE_ID_LINE_HEIGHT         : 0.25, 
    		PAGE_ID_LINE_QUALITY        : "MEDIUM", 
    		SUBPAGE_FRAME               : "ON", 
    		SUBPAGE_FRAME_COLOUR        : "BLACK", 
    		SUBPAGE_FRAME_LINE_STYLE    : "SOLID", 
    		SUBPAGE_FRAME_THICKNESS     : 2, 
    		SUBPAGE_BACKGROUND_COLOUR   : "WHITE" 
    	) 
    Page = plot_page(  
    		TOP        : 5, 
    		BOTTOM     : 100, 
    		LEFT       : 0, 
    		RIGHT      : 100, 
    		ROWS       : 1, 
    		COLUMNS    : 1, 
    		PAGE_X_GAP : 0, 
    		PAGE_Y_GAP : 0, 
    		VIEW       : CartesianView 
    	)
    _Display_Window_ = plot_superpage(  
    		LAYOUT_SIZE        : "A4", 
    		LAYOUT_ORIENTATION : "LANDSCAPE", 
    		CUSTOM_WIDTH       : 29.7, 
    		CUSTOM_HEIGHT      : 21.0, 
    		PAGES              : [ Page ] 
    	) 

    return _Display_Window_ 

end build_layout


#-----------------------------------------------------------------------
# --- Metview function to average many 3D fields.

function avgtime_met(fields,nfld,nsteps)

   for i=1 to nfld do
      onefld  = fields[i,i+((nsteps-1)*nfld),nfld]
      meanfld = mean(onefld)
      if i=1 then
         meanall=meanfld
      else
         meanall=meanall & meanfld
      end if		
   end for
   return meanall

end avgtime_met


#-----------------------------------------------------------------------
# --- Fortran function to average many 3D fields.

#include "avgtime.f90"

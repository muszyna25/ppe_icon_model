# Metview Macro: ICON errors
# 
# run as: metview -b zonal.error 22 CC ml diff 20110101 00 20110103 00
#
# Koehler Martin, August 2011
#-----------------------------------------------------------------------
  
# --- argument list

mode = runmode()
if mode = 'batch' or mode = 'execute' then  
  args    = arguments()
  print("parameters: ", args)
  expnum  = args[1]      # experiment ID (e.g. 22)
  varfile = args[2]      # variable name (e.g. T)
  levtype = args[3]      # level type (e.g. pl, ml, lnd)
  stat    = args[4]      # statistic (snap or diff) 
  inidate = args[5]      # 
  initime = args[6]      # 
  verdate = args[7]      # 
  vertime = args[8]      # 
  if initime < 10 then
     initime = "0"&initime
  end if
  if vertime < 10 then
     vertime = "0"&vertime
  end if
else
  expnum  = 22
  varfile = 'T_P'        # T U V QV QC QI CC Q1 Q2 Q3
  levtype = 'pl'         # sfc, ml, lnd, L90          
  stat    = 'diff'        # snap, diff
  inidate = '20110101'
  initime = '00'
  verdate = '20110101'
  vertime = '00'
end if  


#-----------------------------------------------------------------------
# --- setup

expres  = 'NWP.R2B04L90'
vartext = varfile 

user = getenv("USER")
plotdir = '/fe1-daten/'&user&'/plots/icon/nwp.exp'&expnum

case stat of
  'diff':
    plotfile= plotdir&'/zon.'&expres&'.exp'&expnum&'-ifs.'&varfile&'.'&verdate&vertime&'.L1'  # no ".ps"
    title   = vartext&'    exp'&expnum&'     EXP-ANA    '&inidate&initime&' to '&verdate&vertime
  end
  'snap':
    plotfile= plotdir&'/zon.'&expres&'.exp'&expnum&    '.'&varfile&'.'&verdate&vertime&'.L1' 
    title   = vartext&'    exp'&expnum&'    '&verdate&vertime
  end
  'ctr':
    plotfile= plotdir&'/zon.'&expres&'.exp'&expnum&'.ifs.'&varfile&'.'&verdate&vertime&'.L1'
    title   = vartext&'    ANA    '&verdate&vertime
  end
end case

precision( 4 )           # precision of numbers in plots


#-----------------------------------------------------------------------
#--- read data

if stat <> 'ctr' then
  var_exp = read(  
		SOURCE   : '/uwork1/mkoehler/icon/experiments/exp'&expnum&'/NWP_iconR2B04_DOM01_'&inidate&initime&'_0001_'&varfile&'_'&levtype&'.grb',
		date     : verdate,
		time     : vertime
	)
  nlev = count(var_exp)
 #print(var_exp)
end if
	
if stat <> 'snap' then
  if levtype = 'pl' then
    case varfile of
      'T_P' : param = 'T' end
      'U_P' : param = 'U' end
      'V_P' : param = 'V' end
      'QV_P': param = 'Q' end
      'Z'   : param = 'Z' end
      'R_P' : param = 'R' end
    end case
     var_ana = read(  
 		SOURCE   : '/uwork1/mkoehler/ifs.data/oper/ifs_oper_2x2_20110101-20.pl.grb',
 		param    : param,
 		date     : verdate,
 		time     : vertime
 	)  
  else
     var_ana = read(  
 		SOURCE   : '/uwork1/mkoehler/icon/experiments/exp'&expnum&'/NWP_iconR2B04_DOM01_'&verdate&vertime&'_0001_'&varfile&'_'&levtype&'.grb', 
 		date     : verdate,
 		time     : vertime
	)
  end if
  nlev = count(var_ana)
 #print(var_ana)
end if


#-----------------------------------------------------------------------
#--- processing

case stat of
  'diff':var_diff = var_exp-var_ana
  end
  'snap':var_diff = var_exp
  end
  'ctr': var_diff = var_ana
  end
end case

	
var_zonal = xs_average(  
		DIRECTION           : "EW", 
		PRESSURE_LEVEL_AXIS : "LOG", 
		DATA                : var_diff 
	)
	


# --- variable specific plotting

#level_type = 'count'         #linear
level_type  = 'level_list'    #exponential
level_count = 12

maxi = -1e10
mini =  1e10
for k = 1 to nlev do
  ave  = average_ew(var_diff[k], [90,-180,-90,180], 2.0)
  maxi = max(maxi,maxvalue(ave))
  mini = min(mini,minvalue(ave))
end for

min_level  = mini
max_level  = max(-mini,maxi)
if max_level > 0.0 then
  max_level  = 4*round( max_level/4, -round(log10(max_level/4),0)+1 )
end if


statistic  = 'Min:  '&mini&'   Mean:  '&integrate(mean(var_diff))&'   Max:  '&maxi
          
# case varfile of
#   'QC' :      #level_count = 9 
#               min_level   = 0.00001
#               max_level   = 0.0001       # 20               0.03   40
#   end
#   end
#   otherwise:  min_level  = minvalue(var_diff)
#               max_level  = maxvalue(var_diff)
#   end
# end case

#max_level = 4.0
 level_list = [-max_level, -max_level/2, -max_level/4, -max_level/8, -max_level/16, max_level/16, max_level/8, max_level/4, max_level/2, max_level]
#level_list = [-max_level, -max_level/2, -max_level/4, -max_level/8,                              max_level/8, max_level/4, max_level/2, max_level]
#level_list = [-20,-10,-5,-2,-1, 1,2,5,10,20]


#-----------------------------------------------------------------------
# --- Plot setup

text = mtext(  
        text_line_count :   2,
        TEXT_LINE_1     :   title, 
        text_line_2     :   statistic,
        text_font_size  :   0.6,
        TEXT_COLOUR     :   'BLACK' 
    )

neg = mcont(  
		CONTOUR                        : 'OFF', 
		CONTOUR_LEVEL_SELECTION_TYPE   : 'COUNT', 
		CONTOUR_LEVEL_COUNT            : level_count,
		CONTOUR_MAX_LEVEL              : -min_level, 
		CONTOUR_MIN_LEVEL              : -max_level, 
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
		CONTOUR_SHADE_MAX_LEVEL_COLOUR : 'YELLOW' 
	) 
pos = mcont(  
		CONTOUR                        : 'OFF', 
		CONTOUR_LEVEL_SELECTION_TYPE   : 'COUNT', 
		CONTOUR_LEVEL_COUNT            : level_count,
		CONTOUR_MAX_LEVEL              : max_level, 
		CONTOUR_MIN_LEVEL              : min_level, 
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
		CONTOUR_SHADE_MAX_LEVEL_COLOUR : 'BLUE_PURPLE', 
		CONTOUR_SHADE_MIN_LEVEL_COLOUR : 'YELLOW' 
	)
all = mcont(  
		CONTOUR                        : 'OFF', 
		CONTOUR_LEVEL_SELECTION_TYPE   : 'COUNT', 
		CONTOUR_LEVEL_COUNT            : level_count,
#       CONTOUR_MAX_LEVEL              : max_level, 
#   	CONTOUR_MIN_LEVEL              : min_level, 
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
		CONTOUR_SHADE_MAX_LEVEL_COLOUR : 'RED', 
		CONTOUR_SHADE_MIN_LEVEL_COLOUR : 'BLUE_PURPLE',
        contour_shade_colour_direction : "clockwise"
        	)
cont = mcont(  
		CONTOUR                        : 'OFF', 
		CONTOUR_LEVEL_SELECTION_TYPE   : level_type, 
		CONTOUR_LEVEL_COUNT            : level_count,
		CONTOUR_MAX_LEVEL              : max_level, 
		CONTOUR_MIN_LEVEL              : -max_level,
		contour_level_list             : level_list,
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
		contour_shade_colour_method    : "list",
#		contour_shade_colour_list      : ["red","orange","orange_yellow","yellow","white","white","green","blue_green","blue","blue_purple"]
		contour_shade_colour_list      : ["blue_purple", "blue", "blue_green", "green", "white", "yellow", "orange_yellow", "orange","red"]   # 9
#		contour_shade_colour_list      : ["blue", "blue_green", "green", "white", "yellow", "orange","red"]                                   # 7
#		contour_shade_colour_list      : ["red","orange","yellow","white","white","green","blue_green","blue"]
 	)  

legend = mlegend(
        legend_text_colour    :    "black",
        legend_text_height    :    0.4
        )


#-----------------------------------------------------------------------
# --- Plot
 	
# Setup output format
file_ps  = ps_output(  OUTPUT_NAME : plotfile )
file_png = png_output( OUTPUT_NAME : plotfile )

if mode = 'batch' or mode = 'execute' then  
  shell('mkdir -p '&plotdir)
 #setoutput(file_ps, file_png)  
  setoutput(file_png)  
end if  
display_window = build_layout()


if stat = 'diff' then
  plot ( display_window[1], text, var_zonal, cont, legend ) 
else
  plot ( display_window[1], text, var_zonal, all,  legend ) 
end if

print('output: ',plotfile,'.ps')
#shell('gv '&plotfile&'.ps&')





# Importing : /ICON/Cartesian View

cartesian_view = cartesianview(
        y_axis_type    :    "logarithmic"
        )

# Importing : /ICON/Cartesian View

cartesian_view = cartesianview(
        y_axis_type    :    "logarithmic",
        y_min    :    1,
        y_max    :    1000
        )



#-----------------------------------------------------------------------
# --- Function to build the layout.

function build_layout()

    #PageDescription  
    CartesianView = cartesianview(  
    		MAP_PROJECTION              : "cartesian", 
    		X_AXIS_TYPE                 : "regular", 
    		X_AUTOMATIC                 : "ON", 
    		X_MIN                       : 0, 
    		X_MAX                       : 100, 
    		Y_AXIS_TYPE                 : "regular", 
    		Y_AUTOMATIC                 : "ON", 
    		Y_MIN                       : 1000, 
    		Y_MAX                       : 0, 
    		SUBPAGE_X_POSITION          : 11, 
    		SUBPAGE_Y_POSITION          : 7.5, 
    		SUBPAGE_X_LENGTH            : 85, 
    		SUBPAGE_Y_LENGTH            : 80, 
    		PAGE_FRAME                  : "ON", 
    		PAGE_FRAME_COLOUR           : "BLUE", 
    		PAGE_FRAME_LINE_STYLE       : "SOLID", 
    		PAGE_FRAME_THICKNESS        : 2, 
    		PAGE_ID_LINE                : "OFF", 
    		PAGE_ID_LINE_TYPE           : "BOTH", 
    		PAGE_ID_LINE_COLOUR         : "BLUE", 
    		PAGE_ID_LINE_SYSTEM_PLOT    : "OFF", 
    		PAGE_ID_LINE_DATE_PLOT      : "OFF", 
    		PAGE_ID_LINE_USER_TEXT_PLOT : "ON", 
    		PAGE_ID_LINE_ERRORS_PLOT    : "OFF", 
    		PAGE_ID_LINE_LOGO_PLOT      : "OFF", 
    		PAGE_ID_LINE_HEIGHT         : 0.25, 
    		PAGE_ID_LINE_QUALITY        : "MEDIUM", 
    		SUBPAGE_FRAME               : "ON", 
    		SUBPAGE_FRAME_COLOUR        : "BLACK", 
    		SUBPAGE_FRAME_LINE_STYLE    : "SOLID", 
    		SUBPAGE_FRAME_THICKNESS     : 2, 
    		SUBPAGE_BACKGROUND_COLOUR   : "WHITE" 
    	) 
    Page = plot_page(  
    		TOP        : 0, 
    		BOTTOM     : 100, 
    		LEFT       : 0, 
    		RIGHT      : 100, 
    		ROWS       : 1, 
    		COLUMNS    : 1, 
    		PAGE_X_GAP : 0, 
    		PAGE_Y_GAP : 0, 
    		VIEW       : CartesianView 
    	)  
    _Display_Window_ = plot_superpage(  
    		LAYOUT_SIZE        : "A4", 
    		LAYOUT_ORIENTATION : "LANDSCAPE", 
    		CUSTOM_WIDTH       : 29.7, 
    		CUSTOM_HEIGHT      : 21.0, 
    		PAGES              : [ Page ] 
    	) 

    return _Display_Window_ 

end build_layout

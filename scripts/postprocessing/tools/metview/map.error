# Metview Macro: ICON errors
# 
# run as: metview -b map.error 22 CC ml diff 20110101 00 20110103 00 2 R2B04
#
# Koehler Martin, August 2011
#-----------------------------------------------------------------------
  
# --- argument list

mode = runmode()
if mode = 'batch' or mode = 'execute' then  
  args    = arguments()
  print()
  print("map.error parameters: ", args)
  expnum  = args[1]      # experiment ID (e.g. 22)
  varname = args[2]      # variable name (e.g. T)
  levtype = args[3]      # level type (e.g. sfc, pl, zl, ml, lnd, L90)
  stat    = args[4]      # statistic (snap, ctr or diff) 
  inidate = args[5]      # 
  initime = args[6]      # 
  verdate = args[7]      # 
  vertime = args[8]      #
  ndays   = args[9]      # mean of multiple forecasts separated by one day
  exphres = args[10]     # horizontal resolution (e.g. R2B04)
  if initime < 10 then
     initime = "0"&initime
  end if
  if vertime < 10 then
     vertime = "0"&vertime
  end if
else
  expnum  = 37
  varname = 'TCC'        # T U V QV QC QI CC Q1 Q2 Q3;  T_SO_tile_1 W_SO_tile_1
  levtype = 'sfc'                    
  stat    = 'ctr' 
  inidate = '20110101'
  initime = '00'
  verdate = '20110102'
  vertime = '00'
  ndays   = 1
  exphres = 'R2B04'
end if  


#-----------------------------------------------------------------------
# --- setup

user     = getenv("USER")
plotdir  = getenv("PLOTDIR")
datafile = getenv("DATAFILE")
tailfile = getenv("TAILFILE")
lmonth   = getenv("LMONTH")
yyyymm   = getenv("YYYYMM")
#plotdir = '/fe1-daten/'&user&'/plots/icon/nwp.exp'&expnum

expres  = 'NWP.'&exphres&'L90'

varfile  = varname
case levtype of
  'ml':  
     vartitle = varname&'  ml'
     varplot  = varname
     end
  'pl':  
     vartitle = varname&'  pl'  
     varplot  = varname&'_P'
     end
  'zl':  
     vartitle = varname&'  zl'  
     varplot  = varname&'_Z'
     end
  'sfc': 
     vartitle = varname
     varplot  = varname
     end 
  'lnd': 
     vartitle = varname
     varplot  = varname
     end 
end case


if ndays > 1  then
  nd_txt1 = '_n'&ndays
  nd_txt2 = ' '&ndays&' days'
else
  nd_txt1 = ''
  nd_txt2 = ''
end if

case stat of
  'diff':
    plotfile= plotdir&'/map.'&expres&'.exp'&expnum&'-ifs.'&varplot&'.'&verdate&vertime&nd_txt1     # no ".ps"
    title   = vartitle&'    exp'&expnum&'     EXP-ANA    '&inidate&initime&' to '&verdate&vertime&nd_txt2
  end
  'snap':
    plotfile= plotdir&'/map.'&expres&'.exp'&expnum&    '.'&varplot&'.'&verdate&vertime&nd_txt1
    title   = vartitle&'    exp'&expnum&'    '&verdate&vertime&nd_txt2
  end
  'ctr':
    plotfile= plotdir&'/map.'&expres&'.exp'&expnum&'.ifs.'&varplot&'.'&verdate&vertime&nd_txt1
    title   = vartitle&'    ANA    '&verdate&vertime&nd_txt2
  end
end case

precision( 4 )           # precision of numbers in plots


#-----------------------------------------------------------------------
#--- read data

# delete "_tile_1"
txt_index = search (varfile, '_tile_1')
if txt_index > 0 then
  varfile = substring(varfile, 1, txt_index-1)
end if
# capitalization
if varname = 'QC'     or varname = 'QI'   or varname = 'RAIN_CON' or varname = 'RAIN_GSP' or 
   varname = 'T_SNOW' or varname = 'W_I'  or
   varname = 'CLWC'   or varname = 'CIWC' or varname = 'CRWC'     or varname = 'CSWC' then
  varfile = lowercase(varfile)
end if
# rename
case varfile of
 'ACCSOB_S':  varfile = '0.4.0'       end
 'ACCSOB_T':  varfile = '0.4.1'       end
 'ACCTHB_S':  varfile = '0.5.0'       end
 'ACCTHB_T':  varfile = '0.5.1'       end
 'ACCLHFL_S': varfile = '0.0.10'      end
 'ACCSHFL_S': varfile = '0.0.11'      end
 'TOT_PREC':  varfile = '0.1.52'      end
 'RAIN_CON':  varfile = 'PRR_CON'     end
 'RAIN_GSP':  varfile = 'PRR_GSP'     end
 'SNOW_CON':  varfile = '0.1.14'      end
 'SNOW_GSP':  varfile = '0.1.15'      end
 'TCC':       varfile = 'CLCT'        end
 'CC':        if levtype = 'pl' then
                varfile = '0.6.22'  
              else
                varfile = 'CLC'
              end if                  end
 'Q1':        varfile = '192.201.28'  end
 'QTVAR':     varfile = '192.201.39'  end
 'ttendsw':   varfile = '192.162.100' end
 'ttendlw':   varfile = '192.162.101' end
end case


for nd=1 to ndays do 


# --- data files

# source_ini_icon = '/uwork1/mkoehler/icon/experiments/exp'&expnum&
#   '/NWP_icon'&exphres&'_DOM01_'&inidate&initime&'_0001_'&varfile&'_'&levtype&'.grb'
# source_ver_icon = '/uwork1/mkoehler/icon/experiments/exp'&expnum&
#   '/NWP_icon'&exphres&'_DOM01_'&verdate&vertime&'_0001_'&varfile&'_'&levtype&'.grb' 
# source_pl_ifs ='/uwork1/mkoehler/ifs.data/oper/ifs_oper_2x2_20110101-20.pl.grb'
# source_sfc_ifs='/uwork1/mkoehler/ifs.data/oper/ifs_oper_2x2_20110101-20.sfc.grb'

  if lmonth = 0 then
    source_ini_icon = datafile&inidate&initime&'_0001_'&varfile&'_'&levtype&'.grb'
    source_ver_icon = datafile&verdate&vertime&'_0001_'&varfile&'_'&levtype&'.grb'
  else
    source_ini_icon = datafile&yyyymm&'_0001_'&varfile&'_'&levtype&tailfile
    source_ver_icon = datafile&yyyymm&'_0001_'&varfile&'_'&levtype&tailfile 
  end if

  source_pl_ifs ='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_20120601-0701.'&varname&'.pl.grb'
  source_sfc_ifs='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_20120601-0701.sfc.grb'


#--- read ICON experiment

  vertime1 = parse(vertime)
  initime1 = parse(initime)
  step = 24 * (date(verdate)+vertime1/24.0 - date(inidate)-initime1/24.0)

  if stat <> 'ctr' then
    temp = read(
                SOURCE   : source_ini_icon,
#               param    : varname,
#               levtype  : levtype,
  		date     : inidate,
  		time     : initime,
                step     : step
  	       )
    scale = 1.0
    case varname of
      'ACCSOB_S':        scale= 1.0/86400.0 end
      'ACCTHB_S':        scale= 1.0/86400.0 end
      'ACCSOB_T':        scale= 1.0/86400.0 end
      'ACCTHB_T':        scale= 1.0/86400.0 end
      'ACCLHFL_S':       scale= 1.0/86400.0 end
      'ACCSHFL_S':       scale= 1.0/86400.0 end
    end case
    temp = temp * scale
    if nd=1 then
      nlev    = count(temp)
      var_exp = temp
     #print(var_exp)
    else
      var_exp = var_exp & temp
    end if
  end if


#--- read IFS data
	
  if stat <> 'snap' then
    case levtype of
      'pl':
        param = varname
        case varname of
#         'T_P' : param = 'T' end
#         'U_P' : param = 'U' end
#         'V_P' : param = 'V' end
#         'QV_P': param = 'Q' end
          'FI'  : param = 'Z' end
          'CLWC': param = 'QC' end
          'CIWC': param = 'QI' end
          'CLC' : param = 'CC' end
#         'R_P' : param = 'R' end
        end case
        temp = read(  
                SOURCE   : source_pl_ifs,
                param    : param,
                date     : verdate,
  		time     : vertime
        )
        end
      'sfc':
        scale  = 1.0
       #ddays = date(verdate)+hour(vertime) - date(inidate)-hour(initime)
        vertime1 = parse(vertime)
        initime1 = parse(initime)
        ddays = date(verdate)+vertime1[1]/24.0  - date(inidate)-initime1[1]/24.0
        param = varname
        case varname of
          'CLCT':            param = 'TCC'  end
          'TQV':             param = 'TCWV' end
          'TQC':             param = 'TCLW' end
          'TQI':             param = 'TCIW' end
          'U_10M':           param = '10U'  end
          'V_10M':           param = '10V'  end
          'T_2M':            param = '2T'   end
         #'':                param = 'CP'   end
         #'':                param = 'LSP'  end
          'TOT_PREC':        param = 'TP'  ; scale=1000.0 end
         #'':                param = 'SSTK' end
          'H_SNOW_tile_1':   param = 'SD'   end
          'RHO_SNOW_tile_1': param = 'RSN'  end
          'T_G':             param = 'SKT'  end
          'ACCSOB_S':        param = 'SSR'  ; scale= 1.0/86400.0/ddays end
          'ACCTHB_S':        param = 'STR'  ; scale= 1.0/86400.0/ddays end
          'ACCSOB_T':        param = 'TSR'  ; scale= 1.0/86400.0/ddays end
          'ACCTHB_T':        param = 'TTR'  ; scale= 1.0/86400.0/ddays end
          'ACCLHFL_S':       param = 'SLHF' ; scale= 1.0/86400.0/ddays end
          'ACCSHFL_S':       param = 'SSHF' ; scale= 1.0/86400.0/ddays end
        end case
        temp = read(  
  		SOURCE   : source_sfc_ifs,
  		param    : param,
  		date     : verdate,
  		time     : vertime
      	)
        temp = temp * scale
        end
      otherwise:
        case varname of
          'QV'  : varfile = '192.201.28' end
          'CLWC': varfile = 'qc' end
          'CIWC': varfile = 'qi' end
        end case
        temp = read(  
  		SOURCE   : source_ver_icon, 
#               param    : varname,
#               levtype  : levtype,
   		date     : verdate,
   		time     : vertime,
                step     : 0
  	)
        end
    end case

    if nd=1 then
      nlev    = count(temp)
      var_ana = temp
     #print(var_ana)
    else
      var_ana = var_ana & temp
    end if
  end if

  inidate = inidate + 1
  verdate = verdate + 1

end for

#-----------------------------------------------------------------------
#--- processing

case stat of
  'diff':var_data = var_exp-var_ana
  end
  'snap':var_data = var_exp
  end
  'ctr': var_data = var_ana
  end
end case

#open memory
var_ana=0
var_exp=0
temp   =0

var_data = avgtime_met(var_data,nlev,ndays)

if mode = 'visualize' or mode = 'prepare' then  
  nlev=1
end if

if nlev=1 then
  k1=1
  k2=1
  k3=1
else
  k1=2
  k2=nlev
  k3=4
end if

#k1=10
#k2=10

for k=k1 to k2 by k3 do

  if mode = 'visualize' or mode = 'prepare' then  
    var_data_k = var_data
  else
    var_data_k = var_data[k]
  end if
  
  statistic   = 'Min:  ' &minvalue(var_data_k)&'   Max:  '&maxvalue(var_data_k)&
             '   Mean:  '&integrate(mean(var_data_k))
  if stat = 'diff' then 
    statistic = statistic&'   RMS:  '&sqrt(integrate(var_data_k*var_data_k))
  end if

  if levtype = 'pl' then
    title1   = title&'    L'&k
  else
    title1   = title&'    L'&k  
  end if


# --- variable specific plotting

 #level_type = 'count'         #linear
  level_type  = 'level_list'    #exponential
  level_count = 12
 #min_level   = 0
 #max_level   = 4        # 20               0.03   40

  min_level  = minvalue(var_data_k)
  max_level  = max(-minvalue(var_data_k),maxvalue(var_data_k))
  if max_level > 0.0 then
    max_level  = 4*round( max_level/4, -round(log10(max_level/4),0)+1 )
  end if

#custom contours:
#level_count = 14
#min_level   = 0.01
#max_level   = 0.16

 #level_list = [-20,-10,-5,-2,-1, 1,2,5,10,20]
  level_list = [-max_level, -max_level/2, -max_level/4, -max_level/8, -max_level/16, max_level/16, max_level/8, max_level/4, max_level/2, max_level]

#level_list = [1, 1.4, 2, 2.8, 4, 5.7, 8, 11.3, 16, 22.6, 32, 45.2]

#-----------------------------------------------------------------------
# --- Plot setup

  text = mtext(  
        text_line_count :   2,
        TEXT_LINE_1     :   title1, 
        text_line_2     :   statistic,
        text_font_size  :   0.6,
        TEXT_COLOUR     :   'BLACK' 
    )

  all = mcont(  
                LEGEND                         : 'ON',
		CONTOUR                        : 'OFF', 
		CONTOUR_LEVEL_SELECTION_TYPE   : 'COUNT', 
#		CONTOUR_LEVEL_SELECTION_TYPE   : 'LEVEL_LIST', 
		CONTOUR_LEVEL_COUNT            : level_count,
#		contour_level_list             : level_list,
#		CONTOUR_MAX_LEVEL              : max_level, 
# 		CONTOUR_MIN_LEVEL              : min_level,
                CONTOUR_LABEL                  : 'OFF',
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
#		CONTOUR_SHADE_MAX_LEVEL_COLOUR : 'RED', 
#		CONTOUR_SHADE_MIN_LEVEL_COLOUR : 'BLUE_PURPLE',
#               contour_shade_colour_direction : "clockwise"
		contour_shade_colour_method    : "list",
                contour_shade_colour_list      : [                         # 12 colors:
                                                 "RGB(0.0 , 0.2 , 0.6)",   # dark blue
                                                 "RGB(0.2 , 0.4 , 0.7)",   #  i
                                                 "RGB(0.4 , 0.6 , 0.8)",   #  i
                                                 "RGB(0.6 , 0.8 , 0.9)",   #  i
                                                 "RGB(0.9 , 0.95, 1.0)",   # light blue
                                                 "RGB(0.93, 0.9 , 0.85)",  #  i
                                                 "RGB(0.96, 0.85, 0.75)",  #  i
                                                 "RGB(1.0 , 0.8 , 0.6)",   # light beige 
                                                 "RGB(0.95, 0.6 , 0.45)",  #  i
                                                 "RGB(0.9 , 0.4 , 0.3)",   #  i 
                                                 "RGB(0.8 , 0.2 , 0.15)",  #  i
                                                 "RGB(0.7 , 0.0 , 0.0)" ]  # dark red
        )
  cont = mcont(
                LEGEND                         : 'ON',
		CONTOUR                        : 'OFF',
		CONTOUR_LEVEL_SELECTION_TYPE   : level_type, 
		CONTOUR_LEVEL_COUNT            : level_count,
		CONTOUR_MAX_LEVEL              : max_level, 
		CONTOUR_MIN_LEVEL              : -max_level, 
		contour_level_list             : level_list,
                CONTOUR_LABEL                  : 'OFF',
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
		contour_shade_colour_method    : "list",
#		contour_shade_colour_list      : ["red","orange","orange_yellow","yellow","white","white","green","blue_green","blue","blue_purple"]
#		contour_shade_colour_list      : ["blue_purple", "blue", "blue_green", "green", "white", "yellow", "orange_yellow", "orange","red"]
#		contour_shade_colour_list      : ["red","orange","yellow","white","white","green","blue_green","blue"]
                contour_shade_colour_list      : ["RGB(0.0,0.2,0.7)", "RGB(0.3,0.5,0.8)", "RGB(0.6,0.7,0.9)", "RGB(0.9,0.95,1.0)", "white", 
                                                  "RGB(1.0,0.9,0.7)", "RGB(0.9,0.6,0.4)", "RGB(0.8,0.3,0.2)", "RGB(0.7,0.0 ,0.0)" ]                   # 9
 	)  

  legend = mlegend(
        legend_text_colour      :    "black",
        legend_text_font_size   :    0.4
        )


#-----------------------------------------------------------------------
# --- Plot
 	
# Setup output format
 #file_pdf = pdf_output( OUTPUT_NAME : plotfile&'.L'&k )
 #file_eps = eps_output( OUTPUT_NAME : plotfile&'.L'&k )
 #file_svg = svg_output( OUTPUT_NAME : plotfile&'.L'&k )
  file_ps  = ps_output ( OUTPUT_NAME : plotfile&'.L'&k )
 #file_png = png_output( OUTPUT_NAME : plotfile&'.L'&k )

  if mode = 'batch' or mode = 'execute' then  
    shell('mkdir -p '&plotdir)
   #setoutput(file_ps, file_png)  
   #setoutput(file_png)  
   #setoutput(file_pdf)  
   #setoutput(file_eps)  
   #setoutput(file_svg)  
    setoutput(file_ps)  
  end if  
  display_window = build_layout()

  if stat = 'diff' then
    plot ( display_window[1], text, var_data_k, cont, legend ) 
  else
    plot ( display_window[1], text, var_data_k, all,  legend )
  end if

end for

print('output: ',plotfile,'*.*')
#shell('xv '&plotfile&'*.png&')


#-----------------------------------------------------------------------
# --- Function to build the layout.

function build_layout()

    #PageDescription  
    Coastlines = mcoast(  
    		MAP_GRID_LATITUDE_INCREMENT  : 20, 
    		MAP_GRID_LONGITUDE_INCREMENT : 40 
    	) 
    Global = mapview(  
    		MAP_PROJECTION              : "CYLINDRICAL", 
    		AREA                        : [ -90,-180,90,180 ], 
    		SUBPAGE_X_POSITION          : 5, 
    		SUBPAGE_Y_POSITION          : 12, 
    		SUBPAGE_X_LENGTH            : 90, 
    		SUBPAGE_Y_LENGTH            : 90, 
    		PAGE_FRAME                  : "ON", 
    		PAGE_FRAME_COLOUR           : "BLUE", 
    		PAGE_FRAME_LINE_STYLE       : "SOLID", 
    		PAGE_FRAME_THICKNESS        : 2, 
    		PAGE_ID_LINE                : "OFF", 
    		PAGE_ID_LINE_TYPE           : "BOTH", 
    		PAGE_ID_LINE_COLOUR         : "BLUE", 
    		PAGE_ID_LINE_SYSTEM_PLOT    : "OFF", 
    		PAGE_ID_LINE_DATE_PLOT      : "OFF", 
    		PAGE_ID_LINE_USER_TEXT_PLOT : "ON", 
    		PAGE_ID_LINE_ERRORS_PLOT    : "OFF", 
    		PAGE_ID_LINE_LOGO_PLOT      : "OFF", 
    		PAGE_ID_LINE_HEIGHT         : 0.25, 
    		PAGE_ID_LINE_QUALITY        : "MEDIUM", 
    		SUBPAGE_FRAME               : "ON", 
    		SUBPAGE_FRAME_COLOUR        : "BLACK", 
    		SUBPAGE_FRAME_LINE_STYLE    : "SOLID", 
    		SUBPAGE_FRAME_THICKNESS     : 2, 
    		SUBPAGE_BACKGROUND_COLOUR   : "WHITE", 
    		COASTLINES                  : Coastlines 
    	) 
    Page = plot_page(  
    		TOP        : 15, 
    		BOTTOM     : 100, 
    		LEFT       : 0, 
    		RIGHT      : 100, 
    		ROWS       : 1, 
    		COLUMNS    : 1, 
    		PAGE_X_GAP : 0, 
    		PAGE_Y_GAP : 0, 
    		VIEW       : Global 
    	)
    _Display_Window_ = plot_superpage(  
    		LAYOUT_SIZE        : "A4", 
    		LAYOUT_ORIENTATION : "LANDSCAPE", 
    		CUSTOM_WIDTH       : 29.7, 
    		CUSTOM_HEIGHT      : 21.0, 
    		PAGES              : [ Page ] 
    	) 

    return _Display_Window_ 

end build_layout


#-----------------------------------------------------------------------
# --- Metview function to average many 3D fields.

function avgtime_met(fields,nfld,nsteps)

   for i=1 to nfld do
      onefld  = fields[i,i+((nsteps-1)*nfld),nfld]
      meanfld = mean(onefld)
      if i=1 then
         meanall=meanfld
      else
         meanall=meanall & meanfld
      end if		
   end for
   return meanall

end avgtime_met


#-----------------------------------------------------------------------
# --- Fortran function to average many 3D fields.

#include "avgtime.f90"

# Metview Macro: ICON errors
# 
# run as: metview4 -b map.error dei2_005 T ml diff 20110101 00 20110102 00 1 R2B05
#
# export PLOTDIR=metplots
# export DATAFILE=grb_data/dei2_005_
# export YYYYMM=201201
# export LMONTH=0
# export TAILFILE=.grb
# export LMONTH=1
# export TAILFILE=_0_24_mn2-31.grb   or  _0_240_mn11-31.grb
#
# Koehler Martin, August 2011
#-----------------------------------------------------------------------
  
# --- argument list

mode = runmode()
if mode = 'batch' or mode = 'execute' then  
  args    = arguments()
  print()
  print("map.error parameters: ", args)
  expnum  = args[1]      # experiment ID (e.g. 22)
  varname = args[2]      # variable name (e.g. T)
  levtype = args[3]      # level type (e.g. sfc, pl, zl, ml, lnd, L90)
  stat    = args[4]      # statistic (snap, ctr or diff) 
  inidate = args[5]      # 
  initime = args[6]      # 
  verdate = args[7]      # 
  vertime = args[8]      #
  ndays   = args[9]      # mean of multiple forecasts separated by one day
  exphres = args[10]     # horizontal resolution (e.g. R2B04)
  if initime < 10 then
     initime = "0"&initime
  end if
  if vertime < 10 then
     vertime = "0"&vertime
  end if
else
  expnum  = 37
  varname = 'TCC'        # T U V QV QC QI CC Q1 Q2 Q3;  T_SO W_SO
  levtype = 'sfc'                    
  stat    = 'ctr' 
  inidate = '20110101'
  initime = '00'
  verdate = '20110102'
  vertime = '00'
  ndays   = 1
  exphres = 'R2B04'
end if


# --- environment variables

user     = getenv("USER")
plotdir  = getenv("PLOTDIR")
datafile = getenv("DATAFILE")
tailfile = getenv("TAILFILE")
lmonth   = getenv("LMONTH")
yyyymm   = getenv("YYYYMM")
#plotdir = '/fe1-daten/'&user&'/plots/icon/nwp.exp'&expnum


#-----------------------------------------------------------------------
# --- setup

if levtype = 'sfc' then 
  grid     = [1.0,1.0]          # default: '' or [1.5,1.5]
else
  grid     = [1.0,1.0]          # same
end if

precision( 4 )           # precision of numbers in plots

firstinidate = inidate
expres  = 'NWP.'&exphres&'L90'

case levtype of
  'ml':  
     vartitle = varname&'  ml'
     varplot  = varname
     end
  'pl':  
     vartitle = varname&'  pl'  
     varplot  = varname&'_P'
     end
  'zl':  
     vartitle = varname&'  zl'  
     varplot  = varname&'_Z'
     end
  'sfc': 
     vartitle = varname
     varplot  = varname
     end 
  'lnd': 
     vartitle = varname
     varplot  = varname
     end 
   114:
     vartitle = varname
     varplot  = varname
     end 
end case

if ndays > 1  then
  nd_txt1 = '_n'&ndays
  nd_txt2 = ' '&ndays&' days'
else
  nd_txt1 = ''
  nd_txt2 = ''
end if

case stat of
  'diff':
    plotfile= plotdir&'/map.'&expres&'.'&expnum&'-ifs.'&varplot&'.'&verdate&vertime&nd_txt1     # no ".ps"
    title   = vartitle&'    '&expnum&'     EXP-ANA    '&inidate&initime&' to '&verdate&vertime&nd_txt2
  end
  'snap':
    plotfile= plotdir&'/map.'&expres&'.'&expnum&    '.'&varplot&'.'&verdate&vertime&nd_txt1
    title   = vartitle&'    '&expnum&'    '&verdate&vertime&nd_txt2
  end
  'ctr':
    plotfile= plotdir&'/map.'&expres&'.'&expnum&'.ifs.'&varplot&'.'&verdate&vertime&nd_txt1
    title   = vartitle&'    ANA    '&verdate&vertime&nd_txt2
  end
end case


#-----------------------------------------------------------------------
#--- read data

varfile  = lowercase(varname)

# delete "_tile_1"
#txt_index = search (varfile, '_tile_1')
#if txt_index > 0 then
#  varfile = substring(varfile, 1, txt_index-1)
#end if

# capitalization
#if varname = 'QC'     or varname = 'QI'   or # varname = 'RAIN_CON' or varname = 'RAIN_GSP' or 
#   varname = 'T_SNOW' or varname = 'W_I'  or
#   varname = 'CLWC'   or varname = 'CIWC' or varname = 'CRWC' or varname = 'CSWC' then
#  varfile = lowercase(varfile)
#end if

# rename
case varname of
 'ACCSOB_S':  varfile = 'ssr'         end
 'ACCSOB_T':  varfile = 'nswrf'       end
 'ACCTHB_S':  varfile = 'str'         end
 'ACCTHB_T':  varfile = 'ttr'         end
 'ACCLHFL_S': varfile = 'slhf'        end
 'ACCSHFL_S': varfile = 'sshf'        end
 'TOT_PREC':  varfile = 'tp'          end
 'RAIN_CON':  varfile = '0.1.76'      end
 'RAIN_GSP':  varfile = '0.1.77'      end
 'SNOW_CON':  varfile = 'csrwe'       end    # 0.1.55
 'SNOW_GSP':  varfile = 'lssrwe'      end    # 0.1.56
 'TCC'     :  varfile = '0.6.1'       end
 'HCC'     :  varfile = 'cc.0'        end  # levtype =sfc
 'MCC'     :  varfile = 'cc.400'      end  # levtype =sfc
 'LCC'     :  varfile = 'cc.800'      end  # levtype =sfc
 'TQV'     :  varfile = '0.1.214'     end    # diag
 'TQC'     :  varfile = '0.1.215'     end    # diag
 'TQI'     :  varfile = '0.1.216'     end    # diag
 'TQ1'     :  varfile = 'tciwv'       end    # prog
 'TQ2'     :  varfile = '0.1.69'      end    # prog
 'TQ3'     :  varfile = '0.1.70'      end    # prog
 'TQ4'     :  varfile = 'tcolr'       end    # prog
 'TQ5'     :  varfile = 'tcols'       end    # prog
 'QV'      :  varfile = '0.1.211'     end    # diag
 'QC'      :  varfile = '0.1.212'     end    # diag
 'QI'      :  varfile = '0.1.213'     end    # diag
 'Q1'      :  varfile = 'q'           end    # prog
 'Q2'      :  varfile = 'clwmr'       end    # prog
 'Q3'      :  varfile = '0.1.82'      end    # prog
 'QR'      :  varfile = 'rwmr'        end    # prog
 'QS'      :  varfile = 'snmr'        end    # prog
 'CC'      :  varfile = '0.6.22'      end
 'QTVAR'   :  varfile = '192.201.39'  end
 'ttendsw' :  varfile = '192.162.100' end
 'ttendlw' :  varfile = '192.162.101' end
 'T_G'     :  varfile = 't'           end
 'T_2M'    :  varfile = '2t'          end
 'U_10M'   :  varfile = '10u'         end
 'V_10M'   :  varfile = '10v'         end
 'W'       :  varfile = '0.2.9'       end
 'FI'      :  varfile = 'z'           end
 'P'       :  varfile = 'pres'        end
 'PS'      :  varfile = 'sp'          end
 'PMSL'    :  varfile = 'prmsl'       end
 'DZH_SNOW':  varfile = 'sd'          end
 'DZH_SNOW_M':varfile = '0.1.11'      end  # levtype =114
 'RHO_SNOW_M':varfile = '0.1.61'      end  # levtype =114
 'T_SNOW_M'  :varfile = '0.0.18'      end  # levtype =114
 'SST'     :  varfile = 'wtmp'        end
 'FR_SEAICE': varfile = 'icec'        end
 'H_SEAICE':  varfile = 'icetk'       end
 'T_SEAICE':  varfile = 'ist'         end
 'W_SO'    :  varfile = '2.3.20'      end  # levtype =sfc
 'T_SO'    :  varfile = '2.3.18'      end  # levtype =sfc
end case

if varname = 'W_SO' or varname = 'T_SO' then
  levtype2 = 'lnd'
else
  levtype2 = levtype
end if

#verify QV,QC,QI against Q1,Q2,Q3 at initial condition (IFS)
varfile2 = varfile
case varname of
 'QV'      :  varfile2 = 'q'          end  # compare to Q1 initial condition
 'QC'      :  varfile2 = 'clwmr'      end
 'QI'      :  varfile2 = '0.1.82'     end
end case


for nd=1 to ndays do 


# --- setup: data files

# source_ini_icon = '/uwork1/mkoehler/icon/experiments/exp'&expnum&
#   '/NWP_icon'&exphres&inidate&initime&'_DOM01_0001_'&varfile&'_'&levtype&'.grb'
# source_ver_icon = '/uwork1/mkoehler/icon/experiments/exp'&expnum&
#   '/NWP_icon'&exphres&verdate&vertime&'_DOM01_0001_'&varfile&'_'&levtype&'.grb' 
# source_pl_ifs ='/uwork1/mkoehler/ifs.data/oper/ifs_oper_2x2_20110101-20.pl.grb'
# source_sfc_ifs='/uwork1/mkoehler/ifs.data/oper/ifs_oper_2x2_20110101-20.sfc.grb'

  mntxt = parse(tailfile, "_")
  

  if lmonth = 0 then
    source_ini_icon = datafile&inidate&initime&'_DOM01_0001_'&varfile&'_'&levtype&'.grb'
    source_ver_icon = datafile&verdate&vertime&'_DOM01_0001_'&varfile2&'_'&levtype&'.grb'
    source_pl_ifs ='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_'&yyyymm&'.pl.grb'
    source_sfc_ifs='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_'&yyyymm&'.sfc.grb'
    nfc = ndays
  else
    source_ini_icon = datafile&yyyymm&'_DOM01_0001_'&varfile&'_'&levtype&tailfile
    source_ver_icon = datafile&yyyymm&'_DOM01_0001_'&varfile2&'_'&levtype&tailfile 
    source_pl_ifs ='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_'&yyyymm&'.pl.' &mntxt[3]
    source_sfc_ifs='/scratch/ms/de/deia/ifs_data/ifs_oper_1x1_'&yyyymm&'.sfc.'&mntxt[3]
    nfc = parse(mntxt[3], "-")
    nfc = parse(nfc[2],".")
    nfc = nfc[1]
  end if


#--- read ICON experiment

  vertime1 = parse(vertime)
  initime1 = parse(initime)
  step = 24 * (date(verdate)+vertime1/24.0 - date(inidate)-initime1/24.0)

  if stat <> 'ctr' then
    temp = read(
                SOURCE   : source_ini_icon,
                grid     : grid,
#               param    : varname,
#               levtype  : levtype,
  		date     : inidate,
  		time     : initime,
                step     : step
  	       )
# fluxes: take last 24h diff
    if varname = 'ACCSOB_S'  or varname = 'ACCTHB_S'  or varname = 'ACCSOB_T' or varname = 'ACCTHB_T' or 
       varname = 'ACCLHFL_S' or varname = 'ACCSHFL_S' or varname = 'TOT_PREC' or varname = 'RAIN_CON' or 
       varname = 'RAIN_GSP'  or varname = 'SNOW_CON'  or varname = 'SNOW_GSP' then 
      temp_24h = read(
                SOURCE   : source_ini_icon,
                grid     : grid,
  	       #date     : inidate,         #attention: date maybe 1 day off in monthly means?
  		time     : initime,
                step     : step-24
  	       )
      temp = temp - temp_24h
    end if
    scale = 1.0
    case varname of
      'ACCSOB_S':        scale= 1.0/86400.0 end
      'ACCTHB_S':        scale= 1.0/86400.0 end
      'ACCSOB_T':        scale= 1.0/86400.0 end
      'ACCTHB_T':        scale= 1.0/86400.0 end
      'ACCLHFL_S':       scale= 1.0/86400.0 end
      'ACCSHFL_S':       scale= 1.0/86400.0 end
      'TCC':             scale= 0.01        end
      'HCC':             scale= 0.01        end
      'MCC':             scale= 0.01        end
      'LCC':             scale= 0.01        end
    end case
    temp = temp * scale
    if nd=1 then
      nlev    = count(temp)
      var_exp = temp
    else
      var_exp = var_exp & temp
    end if
  end if


#--- read IFS data
	
  if stat <> 'snap' then
    case levtype2 of
      'pl':
        param = varname
        case varname of
          'FI'  : param = 'Z' end
          'Q1'  : param = 'QV' end
          'Q2'  : param = 'QC' end
          'Q3'  : param = 'QI' end
        end case
        temp = read(  
                SOURCE   : source_pl_ifs,
                grid     : grid,  
                param    : param,
                date     : verdate,
  		time     : vertime
        )
        end
      'sfc':
        scale  = 1.0
       ##ddays = date(verdate)+hour(vertime) - date(inidate)-hour(initime)
       #vertime1 = parse(vertime)
       #initime1 = parse(initime)
       #ddays = date(verdate)+vertime1[1]/24.0  - date(inidate)-initime1[1]/24.0
        param = varname
        case varname of
          'TCC':             param = 'TCC'  end
          'HCC':             param = 'HCC'  end
          'MCC':             param = 'MCC'  end
          'LCC':             param = 'LCC'  end
          'TQV':             param = 'TCWV' end
          'TQC':             param = 'TCLW' end
          'TQI':             param = 'TCIW' end
          'TQ1':             param = 'TCWV' end
          'TQ2':             param = 'TCLW' end
          'TQ3':             param = 'TCIW' end
          'U_10M':           param = '10U'  end
          'V_10M':           param = '10V'  end
          'T_2M':            param = '2T'   end
          'PS':              param = 'SP'   end
          'TOT_PREC':        param = 'TP'   ; scale= 1000.0 end
         #'':                param = 'CP'   end
         #'':                param = 'LSP'  end
         #'':                param = 'SSTK' end
          'DZH_SNOW':        param = 'SD'   end
          'RHO_SNOW':        param = 'RSN'  end
          'T_G':             param = 'SKT'  end
          'ACCSOB_S':        param = 'SSR'  ; scale= 1.0/86400.0 end
          'ACCTHB_S':        param = 'STR'  ; scale= 1.0/86400.0 end
          'ACCSOB_T':        param = 'TSR'  ; scale= 1.0/86400.0 end
          'ACCTHB_T':        param = 'TTR'  ; scale= 1.0/86400.0 end
          'ACCLHFL_S':       param = 'SLHF' ; scale= 1.0/86400.0 end
          'ACCSHFL_S':       param = 'SSHF' ; scale= 1.0/86400.0 end
        end case
        if lmonth = 0 then
          date_sfc = date(verdate - 1)
          step_sfc = 24
        else
          date_sfc = verdate
          step_sfc = 0
        end if
        temp = read(  
  		SOURCE   : source_sfc_ifs,
                grid     : grid,  
  		param    : param,
  		time     : vertime,
                date     : date_sfc,
                step     : step_sfc   # attention: all IFS sfc data was retrieved as step=24
      	)
        temp = temp * scale
        end
      otherwise:
        temp = read(  
  		SOURCE   : source_ver_icon, 
                grid     : grid,  
#               param    : varname,
#               levtype  : levtype,
   		date     : verdate,
   		time     : vertime,
                step     : 0
  	)
        end
    end case

    if nd=1 then
      nlev    = count(temp)
      var_ana = temp
     #print(var_ana)
    else
      var_ana = var_ana & temp
    end if
  end if

  inidate = inidate + 1
  verdate = verdate + 1

end for


#-----------------------------------------------------------------------
#--- processing

case stat of
  'diff':var_data = var_exp-var_ana
  end
  'snap':var_data = var_exp
  end
  'ctr': var_data = var_ana
  end
end case

#open memory
var_ana=0
var_exp=0
temp   =0

var_data = avgtime_met(var_data,nlev,ndays)

if nlev=1 then
  k1=1
  k2=1
  k3=1
else
  if levtype='ml' and lmonth=0 then
    k1=2
    k2=nlev
    k3=4
  else
    k1=1
    k2=nlev
    k3=1
end if

#k1=56
#k2=57

for k=k1 to k2 by k3 do

  statistic   = 'Min:  ' &minvalue(var_data[k])&'   Max:  '&maxvalue(var_data[k])&
             '   Mean:  '&integrate(mean(var_data[k]))
  rms = sqrt(integrate(var_data[k]*var_data[k]))
  if stat = 'diff' then 
    statistic = statistic&'   RMS:  '&rms
    append (plotdir&"/scores_"&expnum&".txt", 
      varname, tab, levtype,' level: ', k, tab, 'inidatetime: ', firstinidate, initime, 
      '   step: ', step, '   nfc: ', nfc, tab, statistic, newline)
  end if
  statistic = statistic & '   Mem:  '&nfc

  if levtype = 'pl' or levtype = 'ml' or levtype2 = 'lnd' then
    title1 = title&'    L'&k
  else
    title1 = title 
  end if


# --- variable specific plotting

 #level_type = 'count'         #linear
  level_type = 'level_list'    #exponential
  level_count= 12

  diff_level = max(-minvalue(var_data[k]),maxvalue(var_data[k]))
  diff_level = min(diff_level,10.0*rms)   # limit diff scale for noisy plot  
  if diff_level > 0.0 then
    diff_level_2    = 4*round( diff_level/4, -round(log10(diff_level/4),0)   )
    if diff_level_2 = 0 then
      diff_level_2  = 4*round( diff_level/4, -round(log10(diff_level/4),0)+1 )
    end if
    diff_level = diff_level_2
  end if

 #custom contouring:
 #level_count= 14
 #min_level  = 0.01
 #diff_level = 0.16

 #level_list = [-20,-10,-5,-2,-1, 1,2,5,10,20]
 #level_list = [1, 1.4, 2, 2.8, 4, 5.7, 8, 11.3, 16, 22.6, 32, 45.2]
  level_list = [-diff_level, -diff_level/2, -diff_level/4, -diff_level/8, -diff_level/16, diff_level/16, diff_level/8, diff_level/4, diff_level/2, diff_level]


#-----------------------------------------------------------------------
# --- Plot setup

  text = mtext(  
        text_line_count :   3,
        text_line_1     :   title1, 
        text_line_2     :   statistic,
        text_line_3     :   ' ',
        text_font_size  :   0.6,
        TEXT_COLOUR     :   'BLACK' 
    )
  all = mcont(  
                LEGEND                         : 'ON',
		CONTOUR                        : 'OFF', 
		CONTOUR_LEVEL_SELECTION_TYPE   : 'COUNT', 
		CONTOUR_LEVEL_COUNT            : level_count,
                CONTOUR_LABEL                  : 'OFF',
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
		contour_shade_colour_method    : "list",
                contour_shade_colour_list      : [                         # 12 colors:
                                                 "RGB(0.0 , 0.2 , 0.6)",   # dark blue
                                                 "RGB(0.2 , 0.4 , 0.7)",   #  i
                                                 "RGB(0.4 , 0.6 , 0.8)",   #  i
                                                 "RGB(0.6 , 0.8 , 0.9)",   #  i
                                                 "RGB(0.9 , 0.95, 1.0)",   # light blue
                                                 "RGB(0.93, 0.9 , 0.85)",  #  i
                                                 "RGB(0.96, 0.85, 0.75)",  #  i
                                                 "RGB(1.0 , 0.8 , 0.6)",   # light beige 
                                                 "RGB(0.95, 0.6 , 0.45)",  #  i
                                                 "RGB(0.9 , 0.4 , 0.3)",   #  i 
                                                 "RGB(0.8 , 0.2 , 0.15)",  #  i
                                                 "RGB(0.7 , 0.0 , 0.0)" ]  # dark red
    )
  cont = mcont(
                LEGEND                         : 'ON',
		CONTOUR                        : 'OFF',
		CONTOUR_LEVEL_SELECTION_TYPE   : level_type, 
		CONTOUR_LEVEL_COUNT            : level_count,
		CONTOUR_MAX_LEVEL              : diff_level, 
		CONTOUR_MIN_LEVEL              : -diff_level, 
		contour_level_list             : level_list,
                CONTOUR_LABEL                  : 'OFF',
		CONTOUR_SHADE                  : 'ON', 
		CONTOUR_SHADE_METHOD           : 'AREA_FILL', 
		contour_shade_colour_method    : "list",
#		contour_shade_colour_list      : ["red","orange","orange_yellow","yellow","white","white","green","blue_green","blue","blue_purple"]
#		contour_shade_colour_list      : ["blue_purple", "blue", "blue_green", "green", "white", "yellow", "orange_yellow", "orange","red"]   # 9
#		contour_shade_colour_list      : ["blue", "blue_green", "green", "white", "yellow", "orange","red"]                                   # 7
#		contour_shade_colour_list      : ["red","orange","yellow","white","white","green","blue_green","blue"]
                contour_shade_colour_list      : ["RGB(0.0,0.2,0.7)", "RGB(0.3,0.5,0.8)", "RGB(0.6,0.7,0.9)", "RGB(0.9,0.95,1.0)", "white", 
                                                  "RGB(1.0,0.9,0.7)", "RGB(0.9,0.6,0.4)", "RGB(0.8,0.3,0.2)", "RGB(0.7,0.0 ,0.0)" ]                   # 9
    )
  legend = mlegend(
        legend_text_colour      :    "black",
        legend_text_font_size   :    0.4
    )


#-----------------------------------------------------------------------
# --- Plot
 	
# Setup output format
 #file_pdf = pdf_output( OUTPUT_NAME : plotfile&'.L'&k )
 #file_eps = eps_output( OUTPUT_NAME : plotfile&'.L'&k )
 #file_svg = svg_output( OUTPUT_NAME : plotfile&'.L'&k )
 #file_ps  = ps_output ( OUTPUT_NAME : plotfile&'.L'&k )
  file_png = png_output( OUTPUT_NAME : plotfile&'.L'&k )

  if mode = 'batch' or mode = 'execute' then  
    shell('mkdir -p '&plotdir)
   #setoutput(file_ps, file_png)  
    setoutput(file_png)  
   #setoutput(file_pdf)  
   #setoutput(file_eps)  
   #setoutput(file_svg)  
   #setoutput(file_ps)
  end if  
  display_window = build_layout()

  if stat = 'diff' then
    plot ( display_window[1], text, var_data[k], cont, legend ) 
  else
    plot ( display_window[1], text, var_data[k], all,  legend )
  end if

# shell('ls -lrt '&plotfile&'.L'&k&'.p*')
# shell('convert -rotate 90 '&plotfile&'.L'&k&'.ps '&plotfile&'.L'&k&'.png')
##  shell('ls -lrt '&plotfile&'.L'&k&'.png')
# shell('\rm -f '            &plotfile&'.L'&k&'.ps ')

end for

#km1=k-1
##shell('ls -lrt '&plotfile&'.L'&km1&'.png')
print('output: ',plotfile,'*.*')
#shell('gv '&plotfile&'*.ps&')


#-----------------------------------------------------------------------
# --- Function to build the layout.

function build_layout()

    Coastlines = mcoast(  
    		MAP_GRID_LATITUDE_INCREMENT  : 20, 
    		MAP_GRID_LONGITUDE_INCREMENT : 40,
                MAP_LABEL_HEIGHT             : 0.4,
                MAP_LABEL_TOP                : 'off'
    	) 
    Global = mapview(  
    		MAP_PROJECTION              : "CYLINDRICAL", 
    		AREA                        : [ -90,-180,90,180 ], 
    		SUBPAGE_X_POSITION          : 5, 
    		SUBPAGE_Y_POSITION          : 12, 
    		SUBPAGE_X_LENGTH            : 90, 
    		SUBPAGE_Y_LENGTH            : 90, 
    		COASTLINES                  : Coastlines 
    	) 
    Page = plot_page(  
    		TOP        : 5, 
    		BOTTOM     : 100, 
    		LEFT       : 0, 
    		RIGHT      : 100, 
    		ROWS       : 1, 
    		COLUMNS    : 1, 
    		PAGE_X_GAP : 0, 
    		PAGE_Y_GAP : 0, 
    		VIEW       : Global 
    	)
    _Display_Window_ = plot_superpage(  
    		LAYOUT_SIZE        : "A4", 
    		LAYOUT_ORIENTATION : "LANDSCAPE", 
    		CUSTOM_WIDTH       : 29.7, 
    		CUSTOM_HEIGHT      : 21.0, 
    		PAGES              : [ Page ] 
    	) 

    return _Display_Window_ 

end build_layout


#-----------------------------------------------------------------------
# --- Metview function to average many 3D fields.

function avgtime_met(fields,nfld,nsteps)

   for i=1 to nfld do
      onefld  = fields[i,i+((nsteps-1)*nfld),nfld]
      meanfld = mean(onefld)
      if i=1 then
         meanall=meanfld
      else
         meanall=meanall & meanfld
      end if		
   end for
   return meanall

end avgtime_met


#-----------------------------------------------------------------------
# --- Fortran function to average many 3D fields.

#include "avgtime.f90"

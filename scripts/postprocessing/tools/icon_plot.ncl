;---------------------------------------------------------------
; This script makes contour/vector plots of general ICON data files
; For scalar variables the underlying grid can be used instead of automatic
; contour lines. Both modes are capable of masking the input files before
; plotting, see the command line options below for details.
;---------------------------------------------------------------
; Usage:
;   ncl icon_ocean.ncl 'iFile="path/file.nc"' 'varName="W"'    'mapLLC=(/35.0, -8/)' 'mapURC=(/55, 8/)'
;   ncl icon_ocean.ncl 'iFile="path/file.nc"' 'varName="ELEV"' 'oFile="test"' timeStep=1 levIndex=1

; Masking:
;   ncl icon_ocean.ncl 'iFile="oce_aqua_planet_O.R2B04L4_0001.nc"' 'varName="ELEV"' 'maskName="wet_c"' 
;   ncl icon_ocean.ncl 'iFile="oce.nc"' 'varName="W"' 'maskName="topo"' 'maskFile="icon_mask.nc"' 
;
; Vectorplot:
;   ncl icon_ocean.ncl 'iFile="oce.nc"' 'vecVars="u-veloc v-veloc"' 'oFile="test"'
;---------------------------------------------------------------
;
; Required Parameter:
; iFile         : input file
; oFile         : plot file wihtout extension (it set by the output type: oType)
; varName       : name of the variable to (contour) plot
; vecVars       : space separated string of the 2 vector components u and v to draw a vector plot
;
; Optional Parameter:
; oType         : output graphics format (ps, eps, png, default: eps)
; resolution    : resolution string whish is used for remapping the icon data
;                 to regular grid (default: r90x45)
; vecRefLength  : reference vector length (default: 8.0)
; vecColByLen   : should vectors get coloured according to their lengths (default:False)
; vecMinDist    : minimal distance between vectors (default:0.017)
; timeStep      : no of timestep (default:0)
; levIndex      : vertical level index (default:0)
; mapLLC        : (lon,lat) value array of the Lower Left Corner of the map
; mapURC        : (lon,lat) ------- || ------- Upper Right Corner of the map
;                  use -180 to 180 for longitude !
; centerLon     : center longitute for satelite view (default:30.)
; centerLat     : center latitude for satelite view (default:20.)
; satDist       : satelite distance (default:20.0)
; scaleFactor   : optional scale factor
; selMode       : mode for level spacing of the plot:
;                  halflog (uses half logarythmic levels,i.e. 1,2,5 per decade), 
;                  manual (automatic linear spacing with usage of minVar and maxVar)
;                  auto (default: let do ncl the spacing)
; scaleLimit    : Limits the number of decades for levels in selMode-halflog
; minVar/maxVar : min/maximal Value to plot for selMode=manual or halflog
; numLevs       : set a number of labels for manual selMode only. NumCol=numLevs+2
;                 (Not set directly, but used for computing the contour level spacing. default=10)
; contLevs      : set individual contour levels (not yet)
; mapType       : projection type (default: lonlat), other: ortho (not compatible with showGrid), NHps
;                  and SHps (polar stereographic projections centered at the north and south pole respectively) 
; mapLine       : (logical) draws continent lines on the plot (foreground/transparent)
; maskName      : variable to mask with. maskName is expected NOT to have time dimension
;                  'maskName="none"' is same as default (no mask variable)
; maskFile      : optional Filename of the mask variable maskName
;                  it's only taken into account, if maskName is given
; lStrg         : left string
; rStrg         : right string
; tStrg         : title string
; bStrg         : base string - default is prgr name and time stamp only
; showPreview   : (logical) draw a preview window
; maxView       : (logical) maximize plot area on paper (not for buildbot -> convert to png)
; colormap      : string for predefined colormaps of the plot
; showGrid      : display polygon lines with filled colors instead of contour plot
; showNcd       : display NDC Grid to find Normalized Device Coordinates on the plot
;---------------------------------------------------------------
; altLibDir     : Alternative directory for loading icon_plot_lib.ncl
;---------------------------------------------------------------
; Authors       : Ralf Mueller (ralf.mueller@zmaw.de)
;                 Stephan Lorenz (stephan.lorenz@zmaw.de)
;---------------------------------------------------------------

 load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_code.ncl"
 load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_csm.ncl"
 load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/contributed.ncl"
 load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/shea_util.ncl"

 
 if ( .not. isvar("altLibDir") )  then
   print("load default library from /pool/data/ICON/tools")
   loadscript("/pool/data/ICON/tools/icon_plot_lib.ncl")
 else
   print("Load library: "+altLibDir+"/icon_plot_lib.ncl")
   loadscript(altLibDir +"/icon_plot_lib.ncl")
 end if

;===============================================================
;----- MAIN PROGRAM --------------------------------------------
;- options handling + checking
 begin
  plotMode  = PLOTMODE

  wcStrt    = systemfunc("date")

  print("+++++ "+wcStrt)

  Model     = "Icon: explicit ocean test"

  ; input/output files
  if(.not. isvar("iFile")) then
    print("Input file is required! Use iFile option.")
    print(ABORTMSG)
    exit
  else
    if ( .not. isfilepresent(iFile) )
      print("Could not read from input file: "+iFile+"!")
      print(ABORTMSG)
      exit
    end if
  end if
  if(.not. isvar("oType")) oType = "eps" end if
  if(.not. isvar("oFile")) then
    ext      = get_file_suffix(iFile,0)
    oFile    = ext@fBase
  end if
  print("Outputfile '"+str_concat((/oFile,".",oType/))+"' will be created in "+systemfunc("dirname "+iFile))

  if(.not. isvar("numLevs")) then
    numLevs  = NUMLEVS
  else
    if (numLevs .lt. 1) then
      print("WARNING: numLevs must be >= 1")
      print(ABORTMSG)
      exit
    end if
  end if

  if (.not. isvar("DEBUG"))       DEBUG        = False           end if
  if (.not. isvar("showPreview")) showPreview  = False           end if
  if (.not. isvar("showGrid"))    showGrid     = False           end if
  if (.not. isvar("showNdc"))     showNdc      = False           end if
  if (.not. isvar("maxView"))     maxView      = False           end if
  if (.not. isvar("scaleLimit"))  scaleLimit   = 2               end if
  if (.not. isvar("selMode"))     selMode      = "auto"          end if
  if (.not. isvar("timeStep"))    timeStep     = 0               end if
  if (.not. isvar("levIndex"))    levIndex     = 0               end if
  if (.not. isvar("scaleFactor")) scaleFactor  = 1               end if
  if (.not. isvar("colormap"))    colormap     = "BlueDarkRed18" end if

  if (.not.isvar("mapType"))      mapType      = "lonlat"        end if

  if ( mapType .eq. "NHps" .and. .not.isvar("mapLLC")) mapLLC = (/-45., 45./)  end if
  if ( mapType .eq. "NHps" .and. .not.isvar("mapURC")) mapURC = (/135., 45./)  end if
  if ( mapType .eq. "SHps" .and. .not.isvar("mapLLC")) mapLLC = (/-45.,-45./)  end if
  if ( mapType .eq. "SHps" .and. .not.isvar("mapURC")) mapURC = (/135.,-45./)  end if

  if (.not.isvar("mapLLC"))       mapLLC       = (/-180.,-90./)  end if
  if (.not.isvar("mapURC"))       mapURC       = (/180.0,90.0/)  end if
  if (.not.isvar("centerLon"))    centerLon    = -30.            end if
  if (.not.isvar("centerLat"))    centerLat    =  20.            end if
  if (.not.isvar("satDist"))      satDist      =  20.            end if
  if (.not.isvar("mapLine"))      mapLine      = True            end if
  if (.not.isvar("resolution"))   resolution   = "r90x45"        end if
  if (.not.isvar("vecRefLength")) vecRefLength = 8.0             end if
  if (.not.isvar("vecColByLen"))  vecColByLen  = False           end if
  if (.not.isvar("vecMinDist"))   vecMinDist   = 0.017           end if
  if (.not.isvar("secPoints"))    secPoints    = 20              end if
  ; default + optional coordinates
  if (isvar("lonCo"))             DEFAULTLON   = lonCo           end if
  if (isvar("latCo"))             DEFAULTLAT   = latCo           end if

  ; mask handling
  if (.not.isvar("maskName"))
    useMask     = False
  else
    if ( .not.isstring(maskName)) then
      print("Parameter 'maskName' has to be a string!")
      exit
    else
      useMask  = True
      if (.not.isvar("maskFile"))
        if (maskName.eq."none") then
          useMask = False
        else
          if (DEBUG) then
            print("Use internal mask variable " +maskName)
          end if
        end if
      else
        if (DEBUG) then
          print("Use external mask file " + maskFile)
        end if
      end if
    end if
  end if


  ; expect a regular grid for vector plot as you get it from
  if (isvar("vecVars")) then
    ; expectes is a string or an array of size 2: "u-veloc v-veloc" or (/"u-veloc","v-veloc"/)
    if (isstring(vecVars)) then
      vecVars_ = str_split(vecVars," ")
      delete(vecVars)
      vecVars = vecVars_
    end if
    plotMode = "vector"
    if (isvar("varName")) plotMode = "overlay" end if
  else
    plotMode = "scalar"
  end if
  if ( (isvar("secLC").or.isvar("secRC")).ne.(isvar("secLC").and.isvar("secRC"))) then
    print("Please provide secLC AND secRC for generatin a section plot!")
    exit
  end if
  if (isvar("secLC").and.isvar("secRC")) plotMode = "section" end if

  if (plotMode.eq."vector" .or. plotMode.eq."overlay" .or. plotMode.eq."section") then
    ; performe some remapping to a regular grid because ncl cannot draw vector
    ; from unstructured grids
    remapFilename = remapForVecPlot(iFile,resolution,useMask,plotMode,DEBUG)
    checkRemappedFile(iFile,remapFilename)
    rFile = addfile( remapFilename, "r" )
  end if
  File  = addfile( iFile, "r" )

  if (DEBUG) printVarNames(File) end if

  ;Read mask variable
  if( useMask ) then
    mFile = File
    if (isvar("maskFile")) then
      maskVar = getMaskVar(maskName,File,True,maskFile,timeStep,levIndex,plotMode)
    else
      if (plotMode.eq."vector" .or. plotMode.eq."section") then
        maskVar = getMaskVar(maskName,rFile,False,"",timeStep,levIndex,plotMode)
      else
        maskVar = getMaskVar(maskName,File,False,"",timeStep,levIndex,plotMode)
      end if
    end if
  end if

  if (plotMode.eq."vector") then
    print("Plot vector variables: " + vecVars)
  else
    if (plotMode.eq."overlay") then
      print("Plot vector variables: " + vecVars)
      print("Plot variable: " + varName)
    end if
    if (plotMode.eq."section") then
      print("Plot variable: " + varName)
    end if
  end if
  ;---------------------------------------------------------------
  if (DEBUG) then
    print("iFile       = "+iFile)
    print("oFile       = "+oFile)
    print("Graphics format is " +oType)
    print("plotMode    = "+plotMode)

    if (plotMode.eq."scalar" .or. plotMode.eq."section") then
      print("varName     = "+varName)
    else
      print("vecVars     = "+vecVars)
      if (plotMode.eq."overlay") then print("varName     = "+varName) end if
    end if

    print("timeStep    = "+timeStep)
    print("mapLLC(lon) = "+mapLLC(0))
    print("mapLLC(lat) = "+mapLLC(1))
    print("mapURC(lon) = "+mapURC(0))
    print("mapURC(lat) = "+mapURC(1))
    if (useMask) then
    print("maskName    = "+maskName)
    end if
    print("#==== END OF DEBUG OUTPUT =====================================")
  end if
  ;---------------------------------------------------------------


  ; Reading data variables =====================================================
  if (plotMode.eq."scalar" .or. plotMode.eq."overlay") then ; scalar mode ================================

    printVar(varName, File)

    var = selIconVar(varName,File,timeStep,levIndex)

    scaleVar(var,scaleFactor)

    lonlats = getLonLats(var,File)
    x       = lonlats(0,:)
    y       = lonlats(1,:)

    ; set minVar_maxVar for plotting
    if(.not. isvar("minVar")) minVar = min(var) end if
    if(.not. isvar("maxVar")) maxVar = max(var) end if
    checkMinMaxVar(minVar,maxVar)

    if ( useMask ) then
      ; set variable var to missing, where var is not equal mvalue (3rd
      ; parameter)
      var = mask(var,maskVar,1)
      ;slm = maskVar - 0.5
      ;var = mask ( var, slm, 0.5)
    end if
  end if
  if (plotMode.eq."vector" .or. plotMode.eq."overlay") then
    uvarname = vecVars(0)
    vvarname = vecVars(1)

    if (has_var(rFile,uvarname) .and. has_var(rFile,vvarname)) then
      checkDimsOfVars(uvarname,vvarname,rFile)
    else
      print("Remapped file does not have variables "+uvarname+" or "+vvarname+"!")
      exit
    end if

    uvar = selRegularField(uvarname,rFile,timeStep,levIndex)
    vvar = selRegularField(vvarname,rFile,timeStep,levIndex)

    scaleVar(uvar,scaleFactor)
    scaleVar(vvar,scaleFactor)

    if ( useMask .and. plotMode.eq."vector") then
      uvar = mask(uvar,maskVar,1)
      vvar = mask(vvar,maskVar,1)
    end if

    velocity = sqrt(uvar*uvar + vvar*vvar)
    ; set minVar/maxVar for plotting
    if(.not. isvar("minVar")) minVar = min(velocity) end if
    if(.not. isvar("maxVar")) maxVar = max(velocity) end if
    checkMinMaxVar(minVar,maxVar)
  end if
  if (plotMode.eq."section") then
  print(rFile)
    var = selRegularVar(varName,rFile,timeStep)
    if(.not. isvar("minVar")) minVar = min(var) end if
    if(.not. isvar("maxVar")) maxVar = max(var) end if
    checkMinMaxVar(minVar,maxVar)
    ; masking before computing the cross section
    if ( useMask ) then
      ; set variable var to missing, where var is not equal mvalue (3rd
      ; parameter)
      var = mask(var,maskVar,1)
    end if
  end if ; Reading data variables =============================================

  ;---------------------------------------------------------------
  ; make the plot
  ;---------------------------------------------------------------
  ; preparations
  wks = gsn_open_wks(oType,oFile)

  gsn_define_colormap(wks,colormap)

  if (showPreview) then
    xwks = gsn_open_wks("x11","x11")
    gsn_define_colormap(xwks,colormap)
  end if

  if (showNdc)
    drawNDCGrid(wks)
    if (showPreview) drawNDCGrid(xwks) end if
  end if

  ResC = True

  setDefaultResource(ResC)

  if (maxView) ResC@gsnMaximize = True end if

  if (useMask) setMaskColor(wks,ResC) end if

  if (plotMode.eq."scalar" .or. plotMode.eq."overlay") setCoordinates(ResC,x,y) end if

  if (plotMode.eq."scalar" .or. plotMode.eq."overlay" .or. plotMode.eq."section") setAutomaticPlotCaptions(ResC,plotMode,varName,File,iFile,timeStep,levIndex) end if

  if (plotMode.eq."section") trans = setSection(secLC,secRC,secPoints,var) end if

  setAutomaticBaseString(wks,plotMode)
  if (showPreview) setAutomaticBaseString(xwks,plotMode) end if

  setLevels(selMode,ResC,minVar,maxVar,scaleLimit,numLevs,DEBUG)

  setMapType(ResC,mapType,centerLon,centerLat,satDist)

  selMapCut(ResC,mapLLC,mapURC)

  setMapVisibility(ResC,mapLine)

  if (DEBUG) showMapInfo(ResC,mapType,mapLine) end if

  ; MAIN PLOT CALLS ===========================================================
  if (plotMode .eq. "vector") then ; vector plot ==============================
    if (showGrid) then
      print("#= WARNING =============================================")
      print("Display Vectors and the underlying grid is not usefull, ")
      print("because original data is interpolated to a regular grid for vector representation.")
      print(ABORTMSG)
      exit
    else
        setDefaultVectorPlot(ResC,5.0,vecRefLength,"CurlyVector",vecMinDist)

        if ( showPreview ) then
          if (vecColByLen) then
            x11 = gsn_csm_vector_scalar_map(xwks,uvar,vvar,velocity,ResC)
          else
            x11 = gsn_csm_vector_map(xwks,uvar,vvar,ResC)
          end if
        end if
        if (vecColByLen) then
          vc = gsn_csm_vector_scalar_map(wks,uvar,vvar,velocity,ResC)
        else
          vc = gsn_csm_vector_map(wks,uvar,vvar,ResC)
        end if
    end if
  end if
  if (plotMode.eq."overlay") then
   ;reset the second resource
    ResC2                    = ResC
    ResC2@gsnDraw            = False
    ResC2@gsnFrame           = False
    setPlotCaptions(ResC2,"","","","")
    selMapCut(ResC2,mapLLC,mapURC)
    setDefaultVectorPlot(ResC2,5.0,vecRefLength,"CurlyVector",vecMinDist)
    ResC2@vcVectorDrawOrder  = "Postdraw"
    ResC2@lbOrientation      = "Vertical"
    ResC2@lbTitleString      = "Speed"
    ResC2@lbTitlePosition    = "Left"
    ResC2@cnInfoLabelOn      = False
    ResC2@lbTitleFontHeightF = 0.02
    ResC2@lbLabelFontHeightF = 0.015
    ResC2@lbLeftMarginF      = 0.01
    ResC2@lbLabelBarOn       = False ; switch of the vector label bar, because the speed is show as vector lenghts

    ResC@gsnDraw             = False
    ResC@gsnFrame            = False
    if (vecColByLen) then
      vc = gsn_csm_vector_scalar(wks,uvar,vvar,velocity,ResC2)
    else
      vc = gsn_csm_vector(wks,uvar,vvar,ResC2)
    end if

    plot = gsn_csm_contour_map(wks,var,ResC)
    if (showGrid) then
      print("plotting GRID in overlay mode is not supported")
      exit
      ;plot_ = plot
      ;plotGrid(wks,plot_,var,x,File,ResC,DEBUG)
    end if

    overlay(plot,vc)
    draw(plot)
  end if
  if (plotMode.eq."scalar") then
    if (DEBUG) print("Gridtype is "+getGridType(var)) end if
    plot                     = gsn_csm_contour_map(wks,var,ResC)
    if (showPreview) preview = gsn_csm_contour_map(xwks,var,ResC) end if

    if (showGrid) then
      if (showPreview) then
        plotGrid(xwks,preview,var,x,File,ResC,DEBUG)
        print("#=======================================================")
        print("For reasons of performance, the preview of a grid plot is not written to the output file be default")
        print("Please set 'showPreview=False' on the command line!")
      else
        plotGrid(wks,plot,var,x,File,ResC,DEBUG)
      end if
    end if
  end if
  if (plotMode.eq."section") then

    plot = new(2,graphic)
    points   = ispan(0,secPoints-1,1)*1.0 
    copy_VarAtts(var,trans)          ; copy attributes
    trans!0 = "depth"
    trans&depth = var&depth
    res            = True;           plot mods desired
    setAutomaticPlotCaptions(res,plotMode,varName,File,iFile,timeStep,levIndex)
    setLevels(selMode,res,minVar,maxVar,scaleLimit,numLevs,DEBUG)
    res@gsnFrame   = False;                don't turn page yet
    res@gsnDraw    = False;                don't draw yet
    res@tmXBMode   = "Explicit";     explicitly label x-axis
    res@tmXBValues = (/points(0),points(secPoints-1)/);  points to label values
    res@tmXBLabels = (/ secLC(1) +", "+ secLC(0) , secRC(1)+", "+secRC(0) /)

    res@cnFillOn            = True         ; turn on color
    res@lbLabelAutoStride   = True         ; nice label bar label stride
    res@gsnSpreadColors     = True         ; use full range of colormap
    res@cnLinesOn           = False        ; turn off countour lines
    res@lbOrientation       = "vertical"   ; vertical label bar
    res@pmLabelBarOrthogonalPosF = -0.05        ; move label bar closer to plot


    res@vpWidthF          = 0.6;            set width of plot
    res@vpHeightF         = 0.4;            set height of plot

    res@vpXF              = 0.2
    res@vpYF              = 0.9
;       res@tiMainString  = "Transect";    add title
;       res@tiXAxisString = "lat/lon along transect"
    res@trYReverse        = True;          reverse y axis
;      res@trXReverse     = True;          reverse x axis (neg longitudes)
;    res@cnLevelSpacingF   = 1.0;           set contour spacing
    plot(0)               = gsn_csm_contour(wks,trans,res);   create plot

    ; map with section polygon
    mres                  = True
    mres@gsnFrame         = False;                don't turn page yet
    mres@gsnDraw          = False;                don't draw yet
    mres@vpWidthF         = 0.8;          set width of plot
    mres@vpHeightF        = 0.3;          set height of plot
    mres@vpXF             = 0.1
    mres@vpYF             = 0.4
    plot(1)               = gsn_csm_map_ce(wks,mres)
    pres                  = True;            polyline mods desired
    pres@gsnFrame         = False;                don't turn page yet
    pres@gsnDraw          = False;                don't draw yet
    pres@gsLineColor      = "Black";           color of lines
    pres@gsLineThicknessF = 2.0;             line thickness
    gsn_polyline(wks,plot(1),(/ secLC(0),secRC(0) /),(/ secLC(1),secRC(1) /),pres)
    resP                  = True; modify the panel plot
    resP@txString         = ""
    resP@gsnPanelLabelBar = False; add common colorbar

    draw(plot(0))
    draw(plot(1))
  end if
  if (showPreview) frame(xwks) end if
  frame(wks)
end

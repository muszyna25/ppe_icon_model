SRC            = ["icon_plot.ncl","icon_plot_lib.ncl"]
HOSTS          = ["m300064@blizzard"]
DIR            = '/pool/data/ICON/tools'
DST            = HOSTS.map {|v| v + ':' + DIR}
CP             = 'scp -p'
LS             = 'ls -crtlh'
PLOT_TEST_FILE = ENV['HOME']+'/data/icon/test.nc'
OFMT           = 'png'

iconPlot = lambda {|ifile,ofile,otype,varname,opts|
  libdir = FileUtils.pwd
  cmd    = "ncl #{SRC[0]} 'altLibDir = \"#{libdir}\"' 'varName = \"#{varname}\"' 'iFile = \"#{ifile}\"' 'oFile = \"#{ofile}\"' 'oType = \"#{otype}\"' #{opts.join}"
  puts cmd
  sh cmd
}

def del(file)
  FileUtils.rm(file) if File.exists?(file)
end

task :default => [:check]

task :install do
  SRC.each {|src| DST.each {|dst| sh [CP,src,dst].join(' ') }}
end

task :check do
  SRC.each {|src| HOSTS.each {|host| sh ['ssh',host,['"',LS,DIR,'"'].join(' ')].join(' ') }}
end

task :test_plot do
  ofile          = 'test_icon_plot.' + OFMT
  del(ofile)
  varname        = 'T'
  iconPlot.call(PLOT_TEST_FILE,ofile,OFMT,varname,[])
  system("qiv #{ofile}")
end

task :test_plotlevels do
  varname         = 'T'
  maxlev          = 10
  images, threads = [],[]
  (0...maxlev).each {|lev|
    ofile          = "test_icon_plotlevel_#{lev}." + OFMT
    del(ofile)
    threads << Thread.new(ofile,varname,lev) {|ofile,varname,lev|
    iconPlot.call(PLOT_TEST_FILE,ofile,OFMT,varname,["levIndex=#{lev}"])
    }
    images << ofile
  }
  threads.map(&:join)
  system("qiv #{images.join(' ')} &")
end

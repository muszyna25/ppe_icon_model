SRC                = ["icon_plot.ncl","icon_plot_lib.ncl"]
HOSTS              = ["m300064@blizzard"]
DIR                = '/pool/data/ICON/tools'
DST                = HOSTS.map {|v| v + ':' + DIR}
CP                 = 'scp -p'
LS                 = 'ls -crtlh'
OCE_PLOT_TEST_FILE = ENV['HOME']+'/data/icon/oce.nc'
ATM_PLOT_TEST_FILE = ENV['HOME']+'/data/icon/atm.nc'
COMPARISON         = {:oce => OCE_PLOT_TEST_FILE, :atm => ATM_PLOT_TEST_FILE}
OFMT               = 'png'
DEFAULT_VARNAME    = 'T'
PLOT_CMD           = 'qiv'

iconPlot = lambda {|ifile,ofile,otype,varname,opts=[]|
  libdir = FileUtils.pwd
  unless File.exists?(ifile)
    warn "Input file #{ifile} dows NOT exist!"
    exit
  end
  cmd   ="ncl #{SRC[0]} 'altLibDir=\"#{libdir}\"' 'varName=\"#{varname}\"' 'iFile=\"#{ifile}\"' 'oFile=\"#{ofile}\"' 'oType=\"#{otype}\"' #{opts.join(' ')}"
  puts cmd
  sh cmd
}

def del(file)
  FileUtils.rm(file) if File.exists?(file)
end
def show(*files)
  system("#{PLOT_CMD} #{files.join(' ')} &")
end

desc "check files on pool"
task :default => [:check]

desc "install plotting tools in /pool on blizzard"
task :install do
  SRC.each {|src| DST.each {|dst| sh [CP,src,dst].join(' ') }}
end

desc "check files on pool"
task :check do
  SRC.each {|src| HOSTS.each {|host| sh ['ssh',host,['"',LS,DIR,'"'].join(' ')].join(' ') }}
end

desc "performe simple oce plot"
task :test_oce do
  ofile          = 'test_icon_plot.' + OFMT
  del(ofile)
  varname        = 'T'
  iconPlot.call(OCE_PLOT_TEST_FILE,ofile,OFMT,varname)
  show(ofile)
end

desc "performe simple oce plot"
task :test_atm do
  ofile          = 'test_icon_plot.' + OFMT
  del(ofile)
  varname        = 'T'
  iconPlot.call(ATM_PLOT_TEST_FILE,ofile,OFMT,varname)
  show(ofile)
end

desc "plot different levels of an ocean file"
task :test_plotlevels do
  varname         = 'T'
  maxlev          = 10
  images, threads = [],[]
  (0...maxlev).each {|lev|
    ofile          = "test_icon_plotlevel_#{lev}." + OFMT
    del(ofile)
    threads << Thread.new(ofile,varname,lev) {|ofile,varname,lev|
    iconPlot.call(OCE_PLOT_TEST_FILE,ofile,OFMT,varname,["levIndex=#{lev}"])
    }
    images << ofile
  }
  threads.map(&:join)
  show(*images)
end

desc "Try to plot vertical section of ocean model output"
task :test_section_oce do
  images = []
  secopts = ["'secLC=(/0,80/)'","'secRC=(/0,-80/)'","showSecMap=False","secPoints=100"]
  ofile = "test_section_ice"
  iconPlot.call(OCE_PLOT_TEST_FILE,ofile,OFMT,DEFAULT_VARNAME,secopts)
  ofile += ".#{OFMT}"
  show(ofile)
end

desc "plot section of ocean and atmosphere (height, pressure and model level)"
task :test_sections do
  images = []
  secopts = ["'secLC=(/0,80/)'","'secRC=(/0,-80/)'","showSecMap=False","secPoints=100"]
  COMPARISON.each {|itype,ifile|
    ofile = "test_section_#{itype.to_s}"
    if itype == :atm
      iconPlot.call(ifile,ofile+'h',OFMT,DEFAULT_VARNAME,secopts +["'atmLev=\"h\"'"]);images << ofile+'h'
      iconPlot.call(ifile,ofile+'p',OFMT,DEFAULT_VARNAME,secopts +["'atmLev=\"p\"'"]);images << ofile+'p'
      iconPlot.call(ifile,ofile+'m',OFMT,DEFAULT_VARNAME,secopts +["'atmLev=\"m\"'"]);images << ofile+'m'
    else
      iconPlot.call(ifile,ofile,OFMT,DEFAULT_VARNAME,secopts); images << ofile
    end
  }
  images.map! {|i| i+= ".#{OFMT}"}
  show(*images)
end

# monmeans_clim.met
#
# metview script called by mmeans to retrieve climate run
# variables and make monthly means
#
# run as: metview3 -b monmeans_clim.met ehwv 20000801 2001 3 3 ml 60 1 60 /scratch/rd/pao
#
# note for 2005: claude suggest to do monthly means first and THEN
# interpolate for speed and efficiency. sigh.
#
# Martin Koehler
# Update 28-10-2008 P Bechtold: replace getksec2 by grib_get_long
# Update 28-10-2009 I Russel P Bechtold: mods for GRIB_API compatible
#-----------------------------------------------------------------------------

putenv ('GRIB_GRIBEX_MODE_ON', '1')


# argument list processing:

args = arguments()
print("parameters: ", args)
expv    = args[1]    # experiment ID (e.g. e9va)
inidate = args[2]    # initial date  (e.g. 19870501 or 19871101)
yy_start= args[3]    # first yyyy in averaging period
mm_start= args[4]    # first mm in averaging period
mm_len  = args[5]    # length of averaging period in months
levtype = args[6]    # level type (ml=model levels, pl=pressure levels)
nlev    = args[7]    # number of model levels (e.g. 60 or 91)
lev1    = args[8]    # lowest  level processed
lev2    = args[9]    # highest level processed
datadir = args[10]   # data dir (e.g. /scratch/rd/pao)
fcrange = args[11]   # fcrange
class   = args[12]   # class
number  = args[13]   # number of ensemble members
tim     = args[14]   # initial time

# setup

if number = -99 then 
  stream='oper'
else 
  stream='seas'
end if 

# interval [h] between two data points:
#   requires balance between speed and statistics:
#   best statistics: int=24h always (takes 24h+ processing/ens member)
#   best speed: (1/3/10 days for 1/3/12 month means)
#               takes ~3h processing/ens member

                    # slow/medium/fast
int     = 24        # 24/48/72
if mm_len > 2 then
  int   = 72        # 24/48/72
end if
if mm_len > 5 then
  int   = 240       # 72/120/240
end if
if levtype = 'sfc' then
  int   = 24        # 24h for sfc always
end if

nmon=1

mm=mm_start
yy=yy_start
mml=mm_len

#-------------------------------------------------------
#  loop over periods in one simulation
#-------------------------------------------------------

for imon=1 to nmon do

	datever1 = yy[imon]*10000+ mm[imon]           *100+01
	datever2 = yy[imon]*10000+(mm[imon]+mml[imon])*100+01

# define steps
        if fcrange=-99 then
	  vdat1    = date(datever1)
	  vdat2    = date(datever2-1)

          datelist=inidate

	  indat=date(inidate)
	  ndays1=vdat1-indat
	  ndays2=vdat2-indat

	  step1=ndays1*24
	  step2=ndays2*24
	  if step1=0 then
		step1=step1+int
	  end if
	  steplist=[]
	  numsteps=int((step2-step1)/int)+1
	  for ns=1 to numsteps do
		steplist=steplist&list(step1+(ns-1)*int)
	  end for
#          class="rd"
        else
	  vdat1    = date(datever1)-fcrange
	  vdat2    = date(datever2)-fcrange-1
print (" fc range ",fcrange, " vdat12 ",vdat1," ",vdat2)
          numsteps=vdat2-vdat1+1
print (" numsteps ",numsteps)
          steplist = fcrange*24
          steplist2 = (fcrange-1)*24 # make one day averages for acc fields
          datelist=[vdat1,"to",vdat2]
#          class="od"
        end if

# define variables

        if levtype = "sfc" then
###          if fcrange = -99 then
          if 1 = 1 then # operations now has all variable...
            variables = ["TCC", "LCC", "MCC", "HCC", "CP",  "LSP", "SSHF","SLHF","BLH", "SSR", 
                       "STR", "TSR", "TTR", "2T",  "2D",  "SD" ,"10U", "10V", "SSTK","SKT", "TCW", 
                       "TCWV","TCLW","TCIW","TSRC","TTRC","CAPE","SUND"]
                     #  101,   102,   103,   104,   105,   106,   107,   108,   109,   110, 
                     #  111,   112,   113,   114,   115,   116,   117,   118,   119,   120]
            vartype   = ["ins", "ins", "ins", "ins", "acc", "acc", "acc", "acc", "ins", "acc", 
                       "acc", "acc", "acc", "ins", "ins", "ins", "ins", "ins", "ins", "ins", "ins",
                       "ins", "ins", "ins", "acc", "acc", "ins", "ins"]
                     # "ins", "ins", "ins", "ins", "ins", "ins", "ins", "acc", "acc", "acc",
                     # "ins", "ins", "ins", "ins", "ins", "ins", "ins", "ins", "ins", "ins"]
          else # use this for 'old' dates
            variables = ["TCC", "LCC", "MCC", "HCC", "CP",  "LSP", "SSHF","SLHF","BLH", "SSR", 
                       "STR", "TSR", "TTR", "2T",  "2D",  "SD", "10U", "10V", "SSTK","SKT", "TCW", 
                       "TCWV","TSRC","TTRC"]
            vartype   = ["ins", "ins", "ins", "ins", "acc", "acc", "acc", "acc", "ins", "acc", 
                       "acc", "acc", "acc", "ins", "ins", "ins", "ins", "ins", "ins", "ins", "ins",
                       "ins", "acc", "acc"]
          end if
	  levelist  = "off"
          nlev=1

	else if levtype = "ml" then
	  variables = ["q", "clwc", "ciwc", "75", "76", "cc", "T", "u", "v", "w"]
                     #  80, 84, 85, 86, 87, 88, 89, 90, 91, 98, 100]
          vartype   = "ins"
          levelist  = [lev1,"to",lev2]
          nlev      = lev2 - lev1 + 1

	else if levtype = "pl" then
          vartype   = "ins"
          if fcrange = -99 then 
  	    variables = ["q", "R", "Z", "T", "u", "v", "w", "clwc", "ciwc", "cc"]
	    levelist  = [1,2,3,5,7,10,20,30,50,70,100,150,200,250,300,400,500,
                       600,700,775,850,925,1000]          #23 levels (climate&ERA40)
          else 
  	    variables = ["q", "R", "Z", "T", "u", "v", "w"]
	    levelist  = [1,2,3,5,7,10,20,30,50,70,100,150,200,250,300,400,500,
                       700,850,925,1000]          #23 levels (other runs)
          end if
          levelist  = levelist[lev1,lev2]
          nlev      = lev2 - lev1 + 1
        else
          print("levtype ", levtype, " not supported")
          fail
	end if

	nvar        = count(variables)
	nfld        = nvar * nlev

	if levtype = "ml" or levtype = "pl" then   # assume type instantaneous
		for i=2 to nfld do
			vartype=vartype & " ins" 
		end for
		vartype = parse(vartype, " ")
	end if

	print ("Date ", inidate, " TIME ", tim, " Month ", yy[imon]*100+mm[imon], 
               " Step ", steplist)
        print (" stream ",stream)
        print (" class ",class)
        print (" number ",number)
	print (" Steps ", steplist)
	print (" Levels ", levelist)
        print (" stream ",stream," number ",number)
	print (" exp ", expv)
        print (" date ",datelist)
        print (" time ",tim)
        print (" steps ",steplist)
        print (" leveltype ",levtype)        
        print (" levelist ",levelist)

# retrieve

	if levtype = "ml" and lev1 = 1 then
	  print ("retrieving lnsp for exp ", expv)		
	  lnsp = retrieve(
		class	:	class,
		stream  :       stream,
		system  :       0,
                method  :       1,
                number  :       number,
		type	:	"fc",
		expver	:	expv,
		levtype	:	levtype,
		levelist:	[1],
		repres	:	"sh",
		param	:	"lnsp",
		date	:	datelist,
		time    :       tim,
		step	:	steplist,
                grid    :       [2.5,2.5]
		)
	end if

	vardata = retrieve(
 		class	:	class,
		stream  :       stream,
		system  :       0,
                method  :       1,
                number  :       number,
 		type	:	"fc",
 		expver	:	expv,
 		levtype	:	levtype,
 		levelist:	levelist,
 		param	:	variables,
 		date	:	datelist,
         	time    :       tim,
 		step	:	steplist,
                grid    :       [2.5,2.5]
 		)

	diffvardata = nil

        if fcrange > 1 and levtype = "sfc" then 
	  vardatam1 = retrieve(
 		class	:	class,
		stream  :       stream,
		system  :       0,
                method  :       1,
                number  :       number,
  		type	:	"fc",
 		expver	:	expv,
 		levtype	:	levtype,
 		levelist:	levelist,
 		param	:	variables,
 		date	:	datelist,
         	time    :       tim,
 		step	:	steplist2,
                grid    :       [2.5,2.5]
 		)
          diffvardata=vardata-vardatam1
        end if

        # (to force FDB add: database:	"hpca FDB" or "fdb")

# mean & save

        if levtype = "sfc" then
   	  meanvar = average(vardata,nfld,numsteps,int,vartype,variables,fcrange,diffvardata)
        else
          nlon=grib_get_long(vardata[1],"Ni")
          nlat=grib_get_long(vardata[1],"Nj")
          ntime=count(vardata)/(nlev*nvar)
          meanvar=avgtime(vardata,nlon,nlat,nvar,nlev,ntime) #large files from 3mon mean
        end if

	if levtype = "ml" and lev1 = 1 then
	  meanlnsp   = mean(lnsp)
	  meanfields = meanvar&meanlnsp
	else
	  meanfields = meanvar
	end if

        
        if number=-99 then
          if fcrange=-99 then
 	    fname = datadir&"/mmean_"&expv&"_"&levtype&"_ini"&inidate&"_mon"&
                string(yy[imon]*100+mm[imon])&"_n"&mml[imon]&".grb"
          else
	    fname = datadir&"/mmean_"&expv&"_"&class&"_day"&string(fcrange)&"_"&levtype&"_mon"&
                string(yy[imon]*100+mm[imon])&"_n"&mml[imon]&".grb"
          end if
        else
	  fname = datadir&"/mmean_"&expv&"_"&levtype&"_ini"&inidate&"_mem"&string(number)&"_mon"&
                string(yy[imon]*100+mm[imon])&"_n"&mml[imon]&".grb"
        end if   
	print ("Writing Output: ", fname)
	write(fname,meanfields)

end for

#-------------------------------------------------------
#  end loop over months in one simulation
#-------------------------------------------------------


#--------------------------------------------------------------#

function average(fields,nfld,numsteps,int,vartype,variables,fcrange,diffvardata)

	#
	# special fields: find the 10V index for the 10SI field
	#
    for i=1 to nfld do
       if variables[i] = "10V" then
         i10v=i
       end if
       if variables[i] = "10U" then
         i10u=i # last occurrence
       end if
    end for 

    for i=1 to nfld do
       if vartype[i] = "ins" or fcrange > -99 then
          onefld=fields[i,i+((numsteps-1)*nfld),nfld]
#
# special fields: 10SI
#
          if variables[i] = "SUND" then
            u10=fields[i10u,i10u+((numsteps-1)*nfld),nfld]
            v10=fields[i10v,i10v+((numsteps-1)*nfld),nfld]
            onefld=sqrt(u10*u10+v10*v10)
            onefld=grib_set_long(onefld,['paramId',207])
          end if
          meanfld=mean(onefld)

# special case - forecast ops fields plus accum 
          if vartype[i] = "acc" then
            if fcrange > 1 then
               onefld=diffvardata[i,i+((numsteps-1)*nfld),nfld]
               meanfld=mean(onefld)
            end if
               meanfld=meanfld/(24*3600)
          end if
       else
          meanfld = ( fields[i+((numsteps-1)*nfld)] - fields[i] )
                  / ( numsteps * int * 3600 )
       end if
       if i=1 then
         meanall=meanfld
       else
         meanall=meanall & meanfld
       end if		
	end for
	return meanall
end average

include "avgtime.f90"

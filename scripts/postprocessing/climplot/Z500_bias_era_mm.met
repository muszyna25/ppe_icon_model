# --------------------------------------------
#
#        READS DATA FOR CLIMATE RUNS
#
# --------------------------------------------

# ----------------------- input -------------------------
interactive=0

if (interactive=0) then
	args = arguments()
	expid   = args[1]  # experiment ID (e.g. e9va)
	start_dates = args[2]  # start time of ensemble fc
    yymm	    = args[3]  # ini year month
    nmon        = args[4]  # nmons in av period
    res         = args[5]  # lat/lon resolution for plotting
    eratext     = args[6]  # ERA40  or ERAI
else
	expid='ehrp'
	mm1=12             # start month of period diagnosed
	nmon=3           # number of months of period diagnosed
	start_dates=[20001001,20001002,20001003]
    res=2.5
    eratext='ERA40'
end if
# -------------------------------------------------------

# --- some general definitions
lev_type='pl'
param='Z'
level=500
grid=[res,res]
ERATEXT=eratext

start_dates=(parse(string(start_dates),"/")) 
nens=count(start_dates)


# directory
dir = getenv("PLOTDATA") 
if (dir="") then
  dir="."
end if 
dir=dir&"/"
###dir='/scratch/rdx/ei4a/data/'
###

filename=param&string(level)&'_'&expid&'_nens'&nens&'_'&string(yymm)&'_nmon'&string(nmon)&'.ps'
filename=dir&filename

file_mod=dir&"mmean_"&expid&"_pl_alldates.grb"
file_era=dir&"mmean_ERA40_pl_alldates.grb"

datestr=string(date(yymm*100+01),"mmmm yyyy")

fc_data = read(expver	:	expid,
					levtype	:	"pl",
					levelist:	level,
					grid	:	grid,
					param	:	param,
                    source  :	file_mod
					)

mars_an = read(levtype	:	"pl",
					levelist:	level,
					grid	:	grid,
					param	:	param,
                    source  :	file_era
					)

# ---------------------- PLOT RESULTS ------------------

File = output(  
	FORMAT                   :  'POSTSCRIPT', 
	DESTINATION              :  'FILE', 
	PRINT_OPTION             :  'VISIBLE', 
	NCOPIES                  :  1, 
	FILE_NAME                :  filename, 
	PRINTER                  :  'ps_floor3_c', 
	PRINTER_CUSTOMIZE        :  'NO' 
	) 
  
# Checks running mode  
mode = runmode()  
if mode = 'batch' then  
          setoutput(File)  
end if  
  
if mode = 'execute' then  
          setoutput(File)  
end if  
  
# Call function to build layout (defined at end of macro)
display_window = build_layout()

###	TEXT_LINE_1              :  'Mean Z500 Difference '&expid&' - '&ERATEXT&' ('&date1&'-'&date2&' nens='&nens&')', 

Text_Plot = ptext(  
	TEXT_AUTOMATIC           :  'NO', 
	TEXT_USER                :  'YES', 
	TEXT_LINE_1              :  'Mean Z500 Difference '&expid&' - '&ERATEXT&' ('&datestr&' nmon'&nmon&' nens='&count(start_dates)&')', 
	TEXT_QUALITY             :  'HIGH', 
	TEXT_COLOUR              :  'BLACK',
        legend_text_maximum_height      : 0.8,
        legend_text_colour              : "BLACK",
        legend_text_quality             : "HIGH" 
	) 

Legend_Entry = legendentry(  
	LEGEND_AUTOMATIC_TEXT_EXTREMA:  'NONE' 
	) 

Contour_red = pcont(  
	LEGEND                   :  'ON', 
        CONTOUR                  :  'ON', 
	CONTOUR_LEVEL_SELECTION_TYPE:  'LEVEL_LIST', 
        CONTOUR_LINE_COLOUR      :  'BLUE',
	CONTOUR_LEVEL_LIST       :  [2,4,6,8,10,12,15],
	CONTOUR_SHADE            :  'ON', 
	CONTOUR_SHADE_COLOUR_METHOD : 'LIST',
	CONTOUR_SHADE_COLOUR_LIST:  ["RGB(1,1,0.1)","RGB(1,0.78,0.294)","RGB(1.0,0.5,0.188)","RGB(0.933,0.251,0.094)","RGB(0.60,0.0,0.0)","RGB(0.20,0.0,0.0)","VIOLET"],
	CONTOUR_SHADE_METHOD     :  'AREA_FILL', 
	CONTOUR_HIGHLIGHT        :  'OFF', 
	CONTOUR_HILO             :  'OFF', 
	GRIB_SCALING_OF_DERIVED_FIELDS:  'ON', 
        CONTOUR_LABEL_QUALITY    :  'HIGH',
	LEGEND_ENTRY             :  Legend_Entry 
	) 

Contour_blue = pcont(  
	LEGEND                   :  'ON', 
        CONTOUR                  :  'ON', 
	CONTOUR_LEVEL_SELECTION_TYPE:  'LEVEL_LIST', 
        CONTOUR_LINE_COLOUR      :  'BLUE',
	CONTOUR_LEVEL_LIST       :  [-15,-12,-10,-8,-6,-4,-2],
	CONTOUR_SHADE            :  'ON', 
	CONTOUR_SHADE_COLOUR_METHOD : 'LIST',
	CONTOUR_SHADE_COLOUR_LIST:  ["BLUISH_PURPLE","RGB(0,0,0.69)","RGB(0.188,0.22,1)","RGB(0.377,0.44,1)","RGB(0.56,0.66,1)","RGB(0.776,0.91,1)","RGB(0.5,1,1)","RGB(0.2,1,1)"],
	CONTOUR_SHADE_METHOD     :  'AREA_FILL',
	CONTOUR_HIGHLIGHT        :  'OFF', 
	CONTOUR_HILO             :  'OFF', 
        CONTOUR_LABEL_QUALITY    :  'HIGH',
	GRIB_SCALING_OF_DERIVED_FIELDS:  'ON', 
	LEGEND_ENTRY             :  Legend_Entry 
	)  

Contour_bg = pcont(  
	CONTOUR_LINE_THICKNESS   :  3, 
	CONTOUR_LINE_COLOUR      :  'BLACK', 
	CONTOUR_LEVEL_SELECTION_TYPE:  'INTERVAL', 
        CONTOUR_INTERVAL         :  5,
        CONTOUR_HIGHLIGHT        :  'OFF',
        CONTOUR_HILO             :  'OFF',
        CONTOUR_LABEL_QUALITY    :  'HIGH',
        CONTOUR_LABEL_HEIGHT     :  0.4,
	GRIB_SCALING_OF_DERIVED_FIELDS:  'ON' 
	) 

 # Plot command  
plot ( display_window[1], Text_Plot, mean(fc_data)-mean(mars_an), Contour_blue, Contour_red, mean(0*fc_data)+mean(mars_an), Contour_bg ) 


# -----------------  Function to build the layout.
function build_layout()

    #PageDescription  
    Coastlines = pcoast(  
    	MAP_COASTLINE_COLOUR     :  'BLACK', 
    	MAP_COASTLINE_THICKNESS  :  2, 
    	MAP_GRID_COLOUR          :  'BLACK', 
    	MAP_LABEL                :  'OFF', 
        MAP_GRID                 :  'OFF',
    	MAP_COASTLINE_LAND_SHADE :  'ON', 
    	MAP_COASTLINE_LAND_SHADE_COLOUR:  'GREY' 
    	) 
    NH1 = mapview(  
    	MAP_PROJECTION           :  'POLAR_STEREOGRAPHIC', 
    	MAP_HEMISPHERE           :  'NORTH', 
    	AREA                     :  [ -0.94,-48.45,3.37,130.09 ], 
    	MAP_VERTICAL_LONGITUDE   :  0, 
    	SUBPAGE_X_POSITION       :  7.5, 
    	SUBPAGE_Y_POSITION       :  5, 
    	SUBPAGE_X_LENGTH         :  85, 
    	SUBPAGE_Y_LENGTH         :  85, 
    	PAGE_FRAME               :  'OFF', 
    	PAGE_ID_LINE             :  'OFF', 
    	PAGE_ID_LINE_TYPE        :  'BOTH', 
    	PAGE_ID_LINE_COLOUR      :  'BLUE', 
    	PAGE_ID_LINE_SYSTEM_PLOT :  'OFF', 
    	PAGE_ID_LINE_DATE_PLOT   :  'OFF', 
    	PAGE_ID_LINE_USER_TEXT_PLOT:  'ON', 
    	PAGE_ID_LINE_ERRORS_PLOT :  'OFF', 
    	PAGE_ID_LINE_LOGO_PLOT   :  'OFF', 
    	PAGE_ID_LINE_HEIGHT      :  0.25, 
    	PAGE_ID_LINE_QUALITY     :  'MEDIUM', 
    	SUBPAGE_FRAME            :  'ON', 
    	SUBPAGE_FRAME_COLOUR     :  'BLACK', 
    	SUBPAGE_FRAME_LINE_STYLE :  'SOLID', 
    	SUBPAGE_FRAME_THICKNESS  :  2, 
    	SUBPAGE_BACKGROUND_COLOUR:  'WHITE', 
    	COASTLINES               :  Coastlines 
    	) 
    Page635 = plot_page(  
    	TOP                      :  0, 
    	BOTTOM                   :  100, 
    	LEFT                     :  0, 
    	RIGHT                    :  100, 
    	ROWS                     :  1, 
    	COLUMNS                  :  1, 
    	PAGE_X_GAP               :  0, 
    	PAGE_Y_GAP               :  0, 
    	VIEW                     :  NH1 
    	)  
      
      
    # SuperPageDescription 
      
    _Display_Window_ = plot_superpage(  
    	LAYOUT_SIZE              :  'A4', 
    	LAYOUT_ORIENTATION       :  'LANDSCAPE', 
    	CUSTOM_WIDTH             :  29.7, 
    	CUSTOM_HEIGHT            :  21.0, 
    	PAGES                    :  [ Page635 ] 
    	) 
    # plot_superpage returns a list of drop identifiers. 
    # Index 1 is for first page, and so on. 
    # end of superpage definition  
      
    return _Display_Window_ 

end build_layout

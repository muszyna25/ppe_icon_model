# Diurnal Cycle program for climate package
# Part II Plotting of Amplitude and Phase
# Anton Beljaars and Peter Bechtold  2009

# to be run after last ensemble after save_mean_diurnal_flux.met
# metview_new -b  plot_amp_phase_clim.met $EXPVER ${PLOTDATA}

# attention only preliminar for offline test yet, has to be put under sms

#include "setplotfile"
include "cossinlon1.f90"
#
#  This job retrieves averaged data and computes amplitude and phase of diurnal cycle. 
#
args=arguments()
exp1=args[1]
start_dates=args[2]
datelist=(parse(string(start_dates),"/")) 
datefiln=args[3]
nmon=args[4]
freado  = args[5] # read option for observational data, 'disc' or 'ecfs'
ecfsdir = args[6] # directory where Obs data is read from

plotobs='n'
Grib2='y'
obstyp='TRMM_3G68Climatology'
obsfn='trmm'
instnam=['radiom','radar']
instno=[3,7]
instno=instno[1] #plotting obs radiometer for amplitude and radar for phase
                 # used for filenames 3=radiometer 7=radar

NENS=count(datelist)
seasonst=datefiln&'_nmon'&nmon
datec=string(datefiln)
mm=substring(datec,5,6)

if nmon=12 then
  seasons="YEAR"
else if nmon=3 and  mm="06" then
  seasons="JJA"
else if nmon=3 and  mm="12" then
  seasons="DJF"
else if nmon=3 and  mm="09" then
  seasons="SON"
else if nmon=3 and  mm="03" then
  seasons="MAM"
end if

if seasons="YEAR" or seasons="DJF" or seasons="JJA" then

#seasons=["JJA","DJF","YEAR"]
#seasonst=["200106_nmon3","200012_nmon3","200009_nmon12"]
#NENS=4

datadir = getenv("PLOTDATA") 
if (datadir="") then
  datadir="."
end if 
datadir=datadir&"/"

plotdir=datadir

grid="av"
params=["tp","sshf","slhf","ttr","ttrcf","tcliw","skt","2t","2d"]
obs='trmm'
#
area=[-90,-180,90,180]
#-----------------------------------------------------------------------------------------
#
#  1. Automatic settings
#
#
#
#  1.1  Parameter dependent settings (scaling, contours etc.)
#
# defaults
acc="yes"
nct=8
units="?"
scale=1.
contour=10
levlst_a=nil
levlst_p=nil
#
#        List of time levels for phase 
#       (has to be list of 9; below and above is white)
levlst_p=[10.5,11,11.5,12,12.5,13,13.5,14,14.5]

for np=1 to count(params) do
for ns=1 to count(seasons) do

   season=seasons[ns]
   seasont=seasonst[ns]
   param=params[np]
   #
   if param ="2t" then
     nct=9
     units="C"
     scale=1.
     levlst_a=[0.1,0.2,0.5,1.,2.5,5.,7.5,10.]
   else if param ="skt" then
     nct=9
     units="C"
     scale=1.
     levlst_a=[0.1,0.2,0.5,1.,2.5,5.,10.,15.]
   else if param ="2d" then
     nct=7
     units="g/kg"
     scale=1000.
     levlst_a=[0.05,0.1,0.2,0.5,1.,2.5]
   else if param ="sshf" then
     nct=8
     units="W/m2"
     scale=1.
     contour=2
   else if param ="slhf" then
     nct=8
     units="W/m2"
     scale=2.5008E+6
     contour=4
   else if param ="tp" then
     nct=9
     units="mm/day"
     scale=3600*24#*1000
     levlst_a=[0.2,0.5,1.,2.5,5.,10.,15.,20.]
   else if param ="ttr" then
     nct=8
     units="W/m2"
     scale=1.
     contour=2
   else if param ="ttrcf" then  # cloudy OLR or cloudforcing OLR
     nct=8
     units="W/m2"
     scale=1.
     contour=2
   else if param ="tcliw" then  # column integrated cloud condensate
     nct=8
     units="kg/m2"
     scale=1.
     levlst_a=[0.005,0.01,0.02,0.05,0.1,0.2,0.4,0.6,1]
   else if param ="cape" then  # CAPE
     nct=8
     units="W/m2"
     scale=1.
     levlst_a=[10,50,100,200,400,600,800,1000]
   else if param =93 then  # CAPE
     nct=8
     units="W/m2"
     scale=1.
     levlst_a=[10,25,50,75, 100,200,300,400]
   else if param =91 or param=92 then  # CAPE
     nct=8
     units="W/m2"
     scale=3600.
     levlst_a=[10,25,50,75, 100,200,300,400]
   end if

   #
   #   1.2  List of colours
   #
   coltbl_a = ["YELLOW","YELLOWISH_ORANGE","ORANGE","REDDISH_ORANGE","RED_ORANGE","RED","BRICK","BROWN","CHESTNUT"]
   #coltbl_p = ["WHITE","GREY","SKY","BLUE_GREEN","TURQUOISE","GREENISH_BLUE","BLUE","BLUISH_PURPLE","VIOLET","WHITE"]
   coltbl_p = ["GREY","SKY","BLUE_GREEN","TURQUOISE","GREENISH_BLUE","BLUE","BLUISH_PURPLE","VIOLET"]
   #
   #
   #  1.3  Build list of contours if necessary
   #
   if count(levlst_a) < 2 then 
     for j=1 to nct do
       levlst_a=levlst_a&list((j-0.5)*contour)
     end for
   end if
   #
   #  1.5 Data file and plotfile directories
   #
   datafile=datadir&"diurnal_"&param&"_"&exp1&"_"&season&"_Nens"&NENS&".fld"
   plotfile1=plotdir&"amp_"&param&"_"&exp1&"_nens"&NENS&"_"&seasont&".ps"
   plotfile2=plotdir&"phase_"&param&"_"&exp1&"_nens"&NENS&"_"&seasont&".ps"
   plotfile1o=plotdir&"amp_"&param&"_"&exp1&"_"&obsfn&instno&"_nens"&NENS&"_"&seasont&".ps"
   plotfile2o=plotdir&"phase_"&param&"_"&exp1&"_"&obsfn&instno&"_nens"&NENS&"_"&seasont&".ps"
   #
   #
   #  1.6 Get T159 LSM
   #
   if freado="t" then
      lsm=read(source:ecfsdir&'dcycle/ampph_lsm.grb')
   else
       lsm = retrieve(
		   expver	:	1,
		   levtype	:	"sfc",
		   class	:	"od",
		   type	:	"an",
		   repres	:	"gg", 
		   levelist:	"off",
		   param	:	"lsm",
		   date	:	20020101,
		   time	:	0,
		   step	:	0,
		   grid	:	grid
		   )
   end if
 
   lsm=lsm>0.5
   # lsm=bitmap(lsm,1.)
   #
   #
   #  2.  Read data and set time
   #
   fld1=read(source:datafile)
   fld1=fld1*scale

   #
   istep=24
   T0=0
   if param="sshf" or param="slhf" or param="tp" or param="ttr" or param="ttrcf" or param="tcliw" then ; T0=0.5 ; end if
   timelist=[1-T0]
   for i=2 to 24 do
     timelist=timelist&[i-T0]
   end for
#  print("Timelist: ",timelist)
   #
   #  3.  Conmputations of amplitude and phase
   #
   #
   #  3.1 Do time integral
   #
   pi=4.*atan(1.)
   cosint=fld1[1]*0. # just to have zero's in a field
   sinint=fld1[1]*0.

   for i=1 to istep do
      cossin=cossinlon1(fld1[i],timelist[i])
      cosint=cosint+fld1[i]*cossin[1]*2/(istep)
      sinint=sinint+fld1[i]*cossin[2]*2/(istep)
   end for

   #
   #  3.2 Convert to amplitude and phase 
   #
   EPSI=0.05
   amppha=amp_phase(cosint,sinint,EPSI)
   #
   #  3.3 Put phase of small amplitudes to missing value 
   #      (threshold is smallest amplitude contour)
   #
   limit=amppha[1]>levlst_a[1]
   amppha[2]=limit*(amppha[2]*12/pi+12)+(1-limit)*(-1)

   #  3.5 Comparison with TRMM observations
   if param="tp" then
    fldo=read(source:ecfsdir&'dcycle/'&obstyp&'_'&season&'_'&instno&'.grb')
    fldo7=read(source:ecfsdir&'dcycle/'&obstyp&'_'&season&'_7.grb')
    fldo=fldo*24     # scaling
    fldo7=fldo7*24     # scaling
    cosint=fldo[1]*0. 
    sinint=fldo[1]*0.
    cosint7=cosint
    sinint7=sinint
    for i=1 to istep do
      phi=2*pi*(timelist[i]-12)/24
      cossin=cos(phi)
      cosint=cosint+fldo[i]*cossin*2/(istep)
      cosint7=cosint7+fldo7[i]*cossin*2/(istep)
      cossin=sin(phi)
      sinint=sinint+fldo[i]*cossin*2/(istep)
      sinint7=sinint7+fldo7[i]*cossin*2/(istep)
    end for
    ampphao=amp_phase(cosint,sinint,EPSI)
    ampphao7=amp_phase(cosint7,sinint7,EPSI)
    limit=ampphao[1]>levlst_a[1]
    ampphao[2]=limit*(ampphao[2]*12/pi+12)+(1-limit)*(-1)
    ampphao7[2]=limit*(ampphao7[2]*12/pi+12)+(1-limit)*(-1)
   end if

   #
   #  4. Plotting
   #
   #
   #  4.1  Define metview contours for amplitude and phase
   #
   leg="on"

   con_a = pcont(

		   legend	:	leg,
		   contour_min_level	:	0,
		   contour_max_level	:	levlst_a[count(levlst_a)],
		   contour_level_selection_type	:	"level_list",
		   contour_level_list	:	levlst_a,
		   contour_reference_level	:	levlst_a[1],
		   contour_shade	:	"on",
		   contour_shade_min_level	:	0,
		   contour_shade_max_level	:	levlst_a[count(levlst_a)],
		   contour_shade_colour_list	:	coltbl_a,
		   contour_shade_colour_method	:	"LIST",
		   contour_shade_method	:	"area_fill",
		   contour_line_colour	:	"black",
		   contour_line_thickness	:	2,
		   contour_shade_label_blanking	:	"off",
		   contour_highlight	:	"off",
		   contour_label	:	"off",
		   contour_hilo	:	"off",
		   input_field_gradient_control	:	"flat_only",
		   input_field_gradient_limitation	:	"both",
		   grib_text	:	"off"
		   )

   con_p2 = pcont(
		   legend	:	leg,
		   contour_min_level	:	0,
		   contour_max_level	:	24,
		   contour_line_colour	:	"black",
		   contour_shade_min_level	:	0,
		   contour_shade_max_level	:	24,
		   contour_level_selection_type	:	"interval",
		   contour_interval	:	2,
		   contour			:	"off",
		   contour_shade		:	"on",
		   contour_shade_min_level_colour	:	"HSL(0,0.5,0.5)",
		   contour_shade_max_level_colour	:	"HSL(359,0.5,0.5)",
		   contour_shade_colour_direction	:	"anticlockwise",
		   contour_shade_technique	:	"cell_shading",
		   contour_shade_cell_method	:	"nearest",
		   contour_shade_cell_resolution	:	40,
		   contour_label	:	"off",
		   contour_hilo	:	"off",
		   grib_text	:	"off"
		   )


   #
   #  5.   Plotting
   #
   #
   #  5.1  Define text
   #
   txta=param&"("&units&")                  "&season&" "&exp1&"
   txtp=param&           "                  "&season&" "&exp1&"
   texta="Amplitude 1st harmonic of diurnal cycle; "&txta
   textpa=set_text(texta)
   textp="Phase 1st harmonic of diurnal cycle (LST), "&txtp
   textpp=set_text(textp)
   txta=param&"("&units&")                  "&season&" "&obstyp&' '&instnam[1]&"
   txtp=param&           "                  "&season&" "&obstyp&' '&instnam[2]&"
   texta="Amplitude 1st harmonic of diurnal cycle; "&txta
   textpao=set_text(texta)
   textp="Phase 1st harmonic of diurnal cycle (LST), "&txtp
   textppo=set_text(textp)

   #amppha[1]=amppha[1]*(1-lsm) - lsm
   #amppha[2]=amppha[2]*(1-lsm) - lsm
   #
   #  5.1  Define page and plot
   # 
   npag=1
   page=setplotfile(plotfile1,area,npag)
   #
   if Grib2='y' then
     geo  = grib_to_geo(data : amppha[1])
     amppha[1] = geo_to_grib(grid      : [1.125,1.125],
                   geopoints : geo)  
     geo  = grib_to_geo(data : amppha[2])
     amppha[2] = geo_to_grib(grid      : [1.125,1.125],
                   geopoints : geo)
   end if  
   #       Page 1
   plot (page,amppha[1],con_a,textpa) 
   if param="tp" and plotobs='y' then
     areao=[-40,-180,40,180]
     page=setplotfile(plotfile1o,areao,2)
     plot(page[1],amppha[1],con_a,textpa)
     plot(page[2],ampphao[1],con_a,textpao)
   end if

   #
   #       Page 2   
   page=setplotfile(plotfile2,area,npag)
   plot (page,amppha[2],con_p2,textpp) 
   if param="tp" and plotobs='y' then
     areao=[-40,-180,40,180]
     page=setplotfile(plotfile2o,areao,2)
     plot(page[1],amppha[2],con_p2,textpp)
     plot(page[2],ampphao7[2],con_p2,textppo)
   end if 

end for # plotting seasons
end for # plotting all parameters

end if
print('fine finish')
#-------------------------------------------------------------------------------------
function setplotfile(filename,area,npag)
	ps_output = output(
			format		:	"postscript", 
			destination	:	"file",
			file_name	 :	filename,
			print_option 	:   	"all",
			ncopies		:	1,
			printer		:	"ps_oa_c"
			)

	setoutput(ps_output)
#
#  4.   Window and coastline
#
if area[3]-area[1] < 90 then
  latinc=20
  loninc=30
else
  latinc=45
  loninc=30
end if
#

coastlines = pcoast(
		map_coastline_colour	:	"black",
		map_coastline_thickness	:	4,
		map_grid_line_style	:	"dot",
		map_grid_thickness	:	2,
		map_grid_colour	:	"black",
		map_label_colour	:	"black",
		map_label_height	:	0.4,
		map_label_quality	:	"high",
		map_grid_latitude_increment	:	latinc,
		map_grid_longitude_increment	:	loninc
		)
globe=mapview(
	area		:	area,
	page_frame	:	"off",
       subpage_frame_thickness:4,
	coastlines	:	coastlines
	    )
if npag=1 then
  page0 = plot_page(
		top	:	0,
		bottom	:	100,
		view	:	globe
		)
  pages=page0
else if npag=2 then
  page1 = plot_page(
		top	:	0,
		bottom	:	50,
		view	:	globe
		)
  page2 = plot_page(
		top	:	50,
		bottom	:	100,
		view	:	globe
		)
  pages=[page1]&[page2]
end if
page = plot_superpage(
		layout_orientation	:	"landscape",
		custom_width	:	29.4,
		pages	:	pages
		)
return(page)
end setplotfile
#
#------------------------------------------------------------
function set_text(utext)
#----------------------------------------------------------

ptext = ptext(
		   text_automatic	:	"no",
		   text_user	:	"yes",
		   text_justification	:	"left",
		   text_reference_character_height	:	0.7, 
		   text_line_count	:	1,
		   text_line_1	:	utext,
                   text_colour     :'black',
		   legend_text_quality	:	"high",
		   legend_text_colour	:	"black"
		   )
   return ptext

end set_text
#------------------------------------------------------------
function amp_phase(cosint, sinint, eps)
#----------------------------------------------------------
# amp_phase computes amplitude and phase of vector (sinint,cosint)
#
#     in: 
#         cosint  : x-component of vector
#         sinint  : y-component of vector
#         eps     : small number
#     out:
#         fieldset: amplitude
#                   phase (-pi to pi)
#----------------------------------------------------------
#
# 
# print(type(sinint))
# print(type(cosint))
# print(type(eps))
#
PI=4.*atan(1.)
signc=sgn(cosint)
mepsc=abs(cosint) > eps
signc=signc*mepsc
#
cosint1=mepsc*cosint+(1.-mepsc)*eps
#
case0=PI*0.5*sgn(sinint)
atan1=atan(sinint/cosint1)
caseplus=atan1
casemin =atan(sinint/cosint1) - PI*(sinint < 0) + PI*(sinint >= 0)
phase=case0*(signc = 0) + caseplus*(signc > 0) + casemin*(signc < 0)
amp=sqrt(cosint^2+sinint^2)
#
return(amp&phase)
#
#
end amp_phase

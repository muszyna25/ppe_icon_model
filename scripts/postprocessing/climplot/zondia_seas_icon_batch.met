# zondia_seas_icon_batch.met
#
# zonal mean plots for climate runs - batch version
#
# interactive test:
# setenv PLOTDATA /scratch/rd/pao/temp
# metview4 -b zondia_seas_icon_batch.met ERA40 flhu 20000801 4 200009 12 pl 91 avg 2.5 ERAI
#
# Martin Koehler & Thomas Jung
#
# Update 28-10-2008 P Bechtold: replace getksec2 by grib_get_long
# Martin Koehler, October 2011 upgrade to Metview4
# Peter Bechtold, Februar 2012 upgrade to Metview4
#--------------------------------------------------------------#

  global p_min
  global p_max
  global p_scale
  global lat_min
  global lat_max
  global lon_min 
  global lon_max
  global ave_dir


################################################################

# --- argument list processing

  x = arguments()
  print("parameters: ", x)
  exid       = ["",""]
  exid[1]    = x[1]    # control exp ID (e.g. ERA40 or e8s7 or e9va)
  exid[2]    = x[2]    # experiment ID (e.g. e9va)
  inidate    = x[3]    # initial date of first ensemble member (e.g. 19871101)
  nens       = x[4]    # number of ensemble members
  yymm_start = x[5]    # first yyyymm in averaging period
  mm_len     = x[6]    # length of averaging period in months
  lev_type   = x[7]    # level type (ml=model levels, pl=pressure levels)
  nlev       = x[8]    # number of levels (e.g. 60 or 91)
  stat       = x[9]    # statistic ("avg" or "std")
  res        = x[10]   # lat/lon resolution for plots
  eratext    = x[11]   # ERA title in plots ERA40 or ERAI

  grid=[res,res]
  ERATEXT=eratext

# --- Period

  fc_steps     = [2,3,4]               #irrelevant
  years        = 1987                  #  -"-
  month_start  = 5                     #  -"-

# ERA ONLY AVAILABLE ON 60 LEVELS - 
# CRASH OUT IF L<>60 AND ERA40 ML PLOT
  if exid[1] = "ERA40" and nlev = 91 and lev_type='ml' then
    return
  end if

# --- Misc

  data_mode      = "FILES"
  file_id        = lev_type
  exp_mode       = ["RD_SEAS","RD_SEAS"]
  if exid[1] = "ERA40" then
    exp_mode[1]  = "ERA40"
  end if


# --- Statistic

  if exid[1] = exid[2] then
    plot_modus   = "Average"
  else
    plot_modus   = "Average Difference"
  end if
  if stat = "avg" then
    statistic    = "Average"
    statname     = "mn"
  else
    statistic    = "Standard Deviation"
    statname     = "stdev"
  end if


# --- Variables, units & scaling

  if lev_type = "pl" then

    levels       = [1,2,3,5,7,10,20,30,50,70,100,150,200,250,300,400,500,
                   # 600,700,775,800,850,900,925,950,1000] #26 levels (climate&ERA40)
                     600,700,775,850,925,1000]             #23 levels (climate&ERA40&levels in IFS experiment
    p_max        = 1000
    p_min        = 1
   # ... variables available on pressure levels by default
    if plot_modus  = "Average Difference" then
      #param      = ["T" ,"R","U","V","W"  ,"Q" ]
      #cint_param = [0.5 ,2  ,1  ,0.2,0.002,0.2 ]
      #cmin_param = cint_param
      #cmax_param = [10  ,30 ,10 ,2  ,0.05 ,2   ]
      #scale      = [1   ,1  ,1  ,1  ,1    ,1000]
      param      = ["T" ,"U","V" ]  #,"Q" ]
      cint_param = [0.5 ,1  ,0.2 ]  #,0.2 ]
      cmin_param = cint_param
      cmax_param = [10  ,10 ,2 ]  # ,2   ]
      scale      = [1   ,1  ,1  ]  #,1000]
    else
      #param      = ["T" ,"R","U","V","W"  ,"Q" ,"CC","CLWC","CIWC"]
      #cint_param = [2   ,5  ,2  ,0.5,0.005,1    ,5   ,5      ,1   ]
      #cmin_param = [220 ,5  ,2  ,0.5,0.005,1    ,5   ,5      ,1   ]
      #cmax_param = [300 ,100,40 ,5  ,0.1  ,20  ,100 ,60     ,20   ]
      #scale      = [1   ,1  ,1  ,1  ,1    ,1000,100 ,1000000,1000000]
      param      = ["T" ,"U","V"]
      cint_param = [2   ,2  ,0.5   ]
      cmin_param = [220 ,2  ,0.5  ]
      cmax_param = [300 ,40 ,5    ]
      scale      = [1   ,1  ,1 ]
    end if

  else  #ml

    levels = []
    for k=1 to nlev do
      levels     = levels&[k]
    end for
    p_max        = nlev
    p_min        = 1
#   p_max        = 20

    if plot_modus  = "Average Difference" then
      param      = ["T" ,"U","V","W"  ,"Q" ,"CC","CLWC" ,"CIWC" ,"CRWC" ,"CSWC" ]
      cint_param = [0.5 ,1  ,0.2,0.002,0.1 ,1   ,1      ,0.5  ,0.5  ,0.5  ]
      cmin_param = cint_param
      cmax_param = [10  ,10 ,2  ,0.05 ,1   ,20  ,10     ,5    ,5   ,5     ]
      scale      = [1   ,1  ,1  ,1    ,1000,100 ,1000000,1000000,1000000,1000000]
    else
      param      = ["T" ,"U","V","W"  ,"Q" ,"CC","CLWC" ,"CIWC" ,"CRWC" ,"CSWC"]
      cint_param = [2   ,2  ,0.5,0.005,1   ,5   ,5      ,1      ,0.5    ,2   ]
      cmin_param = [220 ,2  ,0.5,0.005,1   ,5   ,5      ,1      ,0.5    ,2   ]
      cmax_param = [300 ,40 ,5  ,0.1  ,20  ,100 ,60     ,20     ,10     ,30  ]
      scale      = [1   ,1  ,1  ,1    ,1000,100 ,1000000,1000000,1000000,1000000]
    end if


  end if

# --- Plot specifics

  offset         = nil
  for nn = 1 to count(param) do 
    offset       = offset & [0]
  end for

  output_mode    = "PS_FILE"
  cont_modus     = "Fancy Contour Shading"
  dlat           = 2.
  dlon           = 2.
  lat_min        = -90
  lat_max        =  90
  lon_min        = -180
  lon_max        =  180
  ave_dir        = "EW"
  background     = 1
  verbose        = 1
  isig           = "None"
  p_lev          = 5
  ensnum_con     = [0] # irrelevant, if "from files"
  ensnum_exp     = [0] #        -"-
  system         = 2
  p_scale        = "linear"

###########################################################################

# --- Write infos to screen if verbose = 1

  print("@I Messages from ZONDIA-SEAS-ICON:")
  print("-")

  if verbose = 1 then
    print("@I User Definitions:")
    print("@I  Output Device       : ", output_mode)
    print("@I  Data obtained from  : ", data_mode)
    print("@I  Additional file ID  : ", file_id)
    print("@I  Exp. Id. (Control)  : ", exid[1])
    print("@I  Exp. Id. (Forecast) : ", exid[2])
    print("@I  Level Type          : ", lev_type)
    print("@I  Vertical Levels     : ", levels)
    print("@I  Lowermost Level     : ", p_min)
    print("@I  Uppermost Level     : ", p_max)
    print("@I  Vertical Scaling    : ", p_scale)
    print("@I  Parameter           : ", param)
    print("@I  Plotting Mode       : ", plot_modus)
    print("@I  Contour Mode        : ", cont_modus)
    print("@I  Contour Intervals   : ", cint_param)
    if cont_modus = 'Fancy Contour Shading' then
      print("@I  Maximum Shading Values: ",cmax_param) 
      print("@I  Minimum Shading Values: ",cmin_param) 
    end if
    print("@I  Scales              : ", scale)
    print("@I  Offset              : ", offset)
    print("@I  Horizontal Resol.   : ", dlat,",",dlon)
    print("@I  Latitude Range      : ", lat_min," to ",lat_max)
    print("@I  Longitude Range     : ", lon_min," to ",lon_max)
    print("@I  Averaging Direction : ", ave_dir)
    if background = 0 then
      print("@I  No average control background fields are plotted")
    else
      print("@I  Average control background fields are plotted")
    end if
  end if

# -------- Some consistency checks: Avoid errors --------

# --- parameters and contour intervals

  if count(param) <> count(cint_param) then
    fail("@E Number of parameters and number of contour intervals mismatch !!! MACRO STOPPED!")
  end if

# --- check array dimensions

  if count(scale) <> count(param) then
    print (count(scale), " ",count(param))
    fail("@E Number of Scales has to be equal to number of parameters!")
  end if
  if count(offset) <> count(param) then
    fail("@E Number of Offsets has to be equal to number of parameters!")
  end if

# --- parameters and contour intervals

  if cont_modus = 'Fancy Contour Shading' and (count(param) <> count(cint_param)) then
    fail("@E Number of parameters and max. n of shading values mismatch !!! MACRO STOPPED!")
  end if

  if ave_dir = "NS" then
    isig = "None"
    print("@I No significance test avaialabe for North-South averaging")
  end if

# -------- Some global settings --------

# --- set some variables

  nfor=count(fc_steps)         # number of different forecast lengths
  npar=count(param)            # number of parameters
  levtype = lev_type

# --- set log filename and make working directory

  wrkdir = getenv("PLOTDATA") & "/"
  shell("test -d " & wrkdir & " || mkdir " & wrkdir)

# change p_lev
  p_lev = p_lev/100.0

# --- init
  control_filename=[]
  forecast_filename=[]

# -------- MAIN LOOP OVER FORECAST STEPS --------

  print("-")
  print("@I Constructing date_lists filenames and performing MARS retrieval")

# --- Make date list ---

  date_list_con=[]
  date_list_exp=[]
  for iyear = 1 to count(years) by 1 do
    date_list_exp=date_list_exp&[years[iyear]*10000+(month_start)*100+1]
    for imonth = 1 to count(fc_steps) by 1 do
      if month_start+fc_steps[imonth]-1 <= 12 then
        date_base=years[iyear]*10000+(month_start+fc_steps[imonth]-1)*100
      else
        date_base=(years[iyear]+1)*10000+((fc_steps[imonth]-1-(12-month_start)))*100
      end if
      date_list_con=date_list_con&[date_base]
    end for
  end for

  ndates=count(date_list_con)

# -------- Make data filenames --------

  num = 0
  control_filename =""&wrkdir&"mmean_"&exid[1]&"_"&lev_type&"_alldates.grb"
  forecast_filename=""&wrkdir&"mmean_"&exid[2]&"_"&lev_type&"_alldates.grb"

  print("@I   Control Data from :",control_filename)
  print("@I   Forecast Data from :",forecast_filename)

# -------- MARS retrieval, if necessary --------

  if data_mode = "MARS" then
     print("@I   Data are being retreived from MARS and written to files")
     include "zondia-seas-icon_mars"
  else      # from files
     print("@I   Data are being read from existing files")
  end if

# -------- Main computational part --------

  print("-")
  print("@I Main Computational Part: ")
  for iparam = 1 to count(param) by 1 do

    print("@I  Processing parameter ",param[iparam],newline)

# --- define postscript file names  

    ps_filename = ""&wrkdir&"zon_"&exid[2]&"-"&exid[1]&"_"&statname&"_"&param[iparam]&
                  "_"&lev_type&"_nens"&string(nens)&"_"&yymm_start&"_nmon"&mm_len
    ps_filename_2=""&wrkdir&"zon_"&exid[1]            &"_"&statname&"_"&param[iparam]&
                  "_"&lev_type&"_nens"&string(nens)&"_"&yymm_start&"_nmon"&mm_len

    ps_filenamelog = ""&wrkdir&"zon_"&exid[2]&"-"&exid[1]&"_"&statname&"_"&param[iparam]&
                  "_"&lev_type&"log_nens"&string(nens)&"_"&yymm_start&"_nmon"&mm_len
    ps_filenamelog_2=""&wrkdir&"zon_"&exid[1]            &"_"&statname&"_"&param[iparam]&
                  "_"&lev_type&"log_nens"&string(nens)&"_"&yymm_start&"_nmon"&mm_len

    
# --- metview settings for output (PS ONLY!)

    file_ps   = ps_output(  OUTPUT_NAME : ps_filename   )
    file_ps_2 = ps_output(  OUTPUT_NAME : ps_filename_2 )
    file_pslog= ps_output(  OUTPUT_NAME : ps_filenamelog   )
    file_pslog_2 = ps_output(  OUTPUT_NAME : ps_filenamelog_2 )
    Screen    = output (    FORMAT      :  'SCREEN'     )

    when 
      output_mode = 'PS_FILE':
        print("@I  Output to be send to postscript files")
        if plot_modus = 'Average Difference' then
          setoutput (file_ps)
          print("@I  Output to be send to: ",ps_filename)
        else
          setoutput (file_ps_2)
          print("@I  Output to be send to: ",ps_filename_2)
        end if
      end
      output_mode = 'SCREEN':
        print("@I  Output to be send to screen")
        setoutput (Screen)
      end
    end when

# --- loop over number of levels: This is necessary to work with little memory

    avg_con = nil        # init control average
    avg_for = nil        # init forecast average
    sig     = nil

# --- read data and determine average for control

    control = read(
      source    :  control_filename,
      levtype   :  lev_type,
      levelist  :  levels,
      parameter :  param[iparam],
      grid      :  grid
    )

# --- read data headers (GRIB); dimensions are needed

    nlon_con= grib_get_long(control[1],"Ni")
    nlat_con= grib_get_long(control[1],"Nj")
    nlev=count(levels)
    ntime=count(control)/nlev
    npar=1

    print("nlev ",nlev," ntime ",ntime)
    print(levels)
# --- calculate average

    avg_con=nil
    for k=1 to count(levels) do
      mcon=read(data:control,levelist:levels[k])
      avg_con=avg_con & mean(mcon)*scale[iparam]
    end for

    if statistic = "Average" then
      avg_con=avgtime(scale[iparam]*control+offset[iparam],nlon_con,nlat_con,npar,nlev,ntime)
    else
#     isig = "None"
      avg_con=stdtime(scale[iparam]*control+offset[iparam],nlon_con,nlat_con,npar,nlev,ntime)
    end if
# --- for ERA Interim on ecfs revert back to slow Metview average as avgtime assumes certain order
#     of fields

# --- read data and determine average for forecast

    forecast=read(
      source   :  forecast_filename,
      levtype  :  lev_type,
      levelist :  levels,
      parameter:  param[iparam],
      grid: grid
    )
   
# --- read data headers (GRIB); dimensions are needed

    nlon_for= grib_get_long(forecast[1],"Ni")
    nlat_for= grib_get_long(forecast[1],"Nj")
    nlev=count(levels)
    ntime=count(forecast)/nlev
    print("nlev ",nlev," ntime ",ntime)
    print(levels) 
    npar=1
# -- calculate average

    if statistic = "Average" then
      avg_for=avgtime(scale[iparam]*forecast+offset[iparam],nlon_for,nlat_for,npar,nlev,ntime)
    else
#     isig = "None"
      avg_for=stdtime(scale[iparam]*forecast+offset[iparam],nlon_for,nlat_for,npar,nlev,ntime)
    end if

# --- calculate difference
    diff = avg_for-avg_con
    print(avg_for," ",avg_con)
    print(diff)

    if ( param[iparam] = "T" ) then
     print(avg_con)
     print(avg_for)
    end if

# --- title definitions

    ndates=nens
    if exid[1] = exid[2] then
      title_txt_1 = "Zonal Mean "&statistic&" "&param[iparam]
    else
      title_txt_1 = "Difference: Zonal Mean "&statistic&" "&param[iparam]&" (n="&ndates&")"
    end if
    
    title_txt_2 = ""
    
    if exp_mode[2] = "RD_SEAS" then
      title_txt_2 = title_txt_2&"Climate Forecast ("&exid[2]&")" 
    else
      title_txt_2 = title_txt_2&"OD Seasonal Forecast (System "&system&""
    end if
    
    if exid[1] <> exid[2] then
      if exp_mode[1] = "ERA40" then
        title_txt_2 = title_txt_2&" - "&ERATEXT
      else
        title_txt_2 = title_txt_2&" - ("&exid[1]&")" 
      end if
    end if
    
    title_txt_3 = ndates&" Dates: "&inidate&", ...   Averaging Period Start: "&yymm_start&"  Length: "&mm_len&" Months"
    
    title = mtext(
            TEXT_COLOUR              :  'BLACK',
            TEXT_LINE_COUNT          :  3,
            TEXT_LINE_1              :  title_txt_1,
            TEXT_LINE_2              :  title_txt_2,
            TEXT_LINE_3              :  title_txt_3, 
            TEXT_FONT_SIZE           :  0.5,
            TEXT_JUSTIFY             :  'left'
            )

# --- contouring and shading definitions

    cont_max_level_pos=cmax_param[iparam]
    cont_min_level_pos=cmin_param[iparam]
    cont_shade_max_level_pos=cont_max_level_pos
    cont_shade_min_level_pos=cont_min_level_pos

    cont_max_level_neg=(-1)*cont_min_level_pos    # symmetry
    cont_min_level_neg=(-1)*cont_max_level_pos    # symmetry
    cont_shade_max_level_neg=(-1)*cont_shade_min_level_pos
    cont_shade_min_level_neg=(-1)*cont_shade_max_level_pos

    include "zondia_def_contour"

    legend = mlegend(
        legend_entry_plot_direction    :    "column",
        legend_box_mode    	       :    "positional",
        legend_box_x_position          :    26.5,
        legend_box_y_position          :    0.6,
        legend_box_x_length   	       :    2,
        legend_label_frequency:2,
        legend_box_y_length    	       :    17.5,
        legend_text_font_size          :    0.4,
    	legend_title		       :    "off" )

# --- plot
    Display_Window=layout(lev_type,p_scale,p_min,p_max)

    avg_data = xs_average(  
       DIRECTION           : "EW", 
       DATA  		    : avg_con
      )
    when 
       plot_modus = 'Average Difference': 
       diff_data = xs_average(  
         DIRECTION           : "EW", 
         DATA  		    : diff  
       )
         if background = 1 then
           case cont_modus of
             'Contour Shading':
                plot (Display_Window[1], title, diff_data, shade,                      legend, avg_data, contours_simple_bg)
                end
             'Fancy Contour Shading':
                print("plotting")
                plot (Display_Window[1], title, diff_data, contours_neg, contours_pos, legend, avg_data, contours_simple_bg)
                print("plotted")
                end
             'Contour Levels':
                plot (Display_Window[1], title, diff_data, red, blue,                  legend, avg_data, contours_simple_bg)
                end
           end case
         else
           case cont_modus of
             'Contour Shading':
                plot (Display_Window[1], title, diff_data, shade,                      legend, diff_data, red2, blue2)
                end
             'Fancy Contour Shading':
                plot (Display_Window[1], title, diff_data, contours_neg, contours_pos, legend)
                end
             'Contour Levels':
                plot (Display_Window[1], title, diff_data, red, blue,                  legend)
                end
           end case
         end if
         if param[iparam]="T" or param[iparam]="U" and p_scale="linear"  and lev_type="pl" then
           setoutput (file_pslog)
           Display_Window=layout(lev_type,"logarithmic",p_min,p_max)
           plot (Display_Window[1], title, diff, contours_neg, contours_pos, legend, avg_con, contours_simple_bg)
         end if
       end
       plot_modus = 'Average':
         plot  (Display_Window[1], title, avg_data, shade2,                      legend)
         if param[iparam]="T" or param[iparam]="U" and p_scale="linear"  and lev_type="pl" then
            setoutput (file_pslog_2)
            Display_Window=layout(lev_type,"logarithmic",p_min,p_max)
            plot (Display_Window[1], title, avg_con, shade2,                    legend)
         end if


       end
    end when


  end for # end if loop over parameter

  print("-")
  print("@I ZONDIA-SEAS-ICON successfully finished")


function layout(lev_type,p_scale,p_min,p_max)

    lat_axis = maxis(
        axis_position            :   "left",
        axis_title_text          :   "Latitude [deg]",
        axis_title_height        :   0.6,
        axis_line_thickness	 :   5,
        axis_tick_label_height	 :   0.5,
        axis_tick_interval       :   30          )

    if lev_type = "pl" then
        axis_title_text     = "Pressure [hPa]"
    else
        axis_title_text     = "Model Level"
    end if
   
    if p_scale = "linear" then
        y_axis_type = "regular"
    else
        y_axis_type = "logarithmic"
    end if

    vertical_axis = maxis(
        axis_title_text          :  axis_title_text,
        axis_title_height        :  0.6,
        axis_line_thickness	 :  5,
        axis_tick_label_height	 :  0.5,
        axis_orientation         :  "vertical" )

    if  y_axis_type = "logarithmic" then
       Cartesian_View = maverageview(
         direction           :  "EW",
         vertical_scaling    : "log",
         horizontal_axis     :  lat_axis,
         vertical_axis       :  vertical_axis,
         top_level 	     :  p_min,
         bottom_level        :  p_max
   	   )
    else
       Cartesian_View = maverageview(
         direction           :  "EW",
         horizontal_axis     :  lat_axis,
         vertical_axis       :  vertical_axis
   	   )
    end if

    Page = plot_page(  
        TOP                      :  5, 
        BOTTOM                   :  98, 
        LEFT                     :  0, 
        RIGHT                    :  90, 
        ROWS                     :  1, 
        COLUMNS                  :  1, 
        PAGE_X_GAP               :  0, 
        PAGE_Y_GAP               :  0, 
        VIEW                     :  Cartesian_View)

    Display_Window = plot_superpage(  
        LAYOUT_SIZE              :  'A4', 
        LAYOUT_ORIENTATION       :  'LANDSCAPE', 
        CUSTOM_WIDTH             :  29.7, 
        CUSTOM_HEIGHT            :  21.0, 
        PAGES                    :  Page )

    return Display_Window 
end layout

  include "avgtime.f90"

#!/bin/ksh
#
# Function for checking if the return status is OK 

check_error()
{
  if [ $1 -eq 0 ]; then  # No problem

    echo $2: done.

  else # Stop running this script and return the error status

    echo $2: ERROR ENCOUNTERED!
    exit $1
  fi
}

#==========================================================================
#                          USER'S SPECIFICATIONS 
#--------------------------------------------------------------------------
# 0. Model name 
#--------------------------------------------------------------------------

Model="ICOHAM"   # or "ECHAM", "ICONAM"

#--------------------------------------------------------------------------
# 1. About the model output
#--------------------------------------------------------------------------
# 1.1 What is the experiment ID? 
# The experiment ID is the first part of the file name of your model output, 
# which is followed by information on hor. and vert. resolution (cf. 1.5),
# and a file index (cf. 1.6) if the output has been split on several files.
# You may have used something like "A0001" just for simplicity.

EXP="hat_ape_qobs_moist_RH00-clip"

# 1.2 In which directory are the data files located? (Don't forget the trailing "/"!)

model_data_path="somewhere/"

# The ICON model developers have an automatic testing system which uses
# the following convention:
 
dir=`pwd -P`
icon_path=${dir%%scripts/postprocessing/testcases}
model_data_path="${icon_path}experiments/$EXP/"

# 1.3 Shape of control volume (3 = triangle, 6 = hexagon/pentagon) 

cell_type=3

# 1.4 Spatial resolution
# (This script assumes that a string indicating the spatial resolution,
#  e.g., "_R2B04L31", has been added after ${EXP} as part of the name
#  of the model output.)

horizontal_resolution="R2B04"
vertical_resolution="L31"

# 1.5 The experiment identifier that will appear in the plots, e.g.,
# "brk R2B5L31" 

exp_config="$Model $horizontal_resolution$vertical_resolution"

#--------------------------------------------------------------------------
# 2. Decide what to do
#--------------------------------------------------------------------------
# A complete set of the contour plots includes
#
#   a. evolution of...
#   b. time-and-zonal-mean of the user-specified period
#
# If you want to have data and/or plot of (a), set the next variable to 1:

#diag_evolution=0

# This script assumes that the output has been split into a series of files. 
# The first file is named ${EXP}"_RxBxxLxx_0001",the second one "_0002",
# and so on. Now specify the starting and ending file indices for diagnosis (a)
# (see above)

#evol_istart=210
#evol_iend=211

# If you want to have data and/or plot of (b), set the next variable to 1
#
diag_climate=1

#clim_istart=$evol_istart
#clim_iend=$evol_iend

clim_istart=151
clim_iend=220


# If you want to obtain plots, set the next variable to 1 
make_plot=1

# Top of vertical domain [km] in vertical cross section plots
export TopHeight=35 

# What format do you want, pdf, eps or ps?
export plot_file_format="pdf"

# Set the orientation to "landscape" if you explicitly set it so.
# (No specification means NCL default - "portrait".)
#export wkOrientation="landscape"

# Before plotting, some data processing is needed. 
# If you have already done that and stored the data, turn this step off.

do_computation=1   # (1=ON,0=OFF)

# For the hydrostatic models, model output will be vertically interpolated to 
# pressure levels before plotting. Specify the pressure levels if
# you want a set different from the standard 17 levels (e.g., when you 
# have the upper atmosphere resolved). Note that unit is Pa, not hPa!
# Example: 
#      plevs="100000,50000,10000,5000,1000,100"
#
# Setting plevs to null, or not setting the variable at all means choosing
# the standard 17 levels up to 100 hPa.

plevs=""

# To diagnose the zonal mean circulation, the ICON model output 
# on the geodesic grid needs to be interpolated to a Gaussian grid. 
# Choose the Gaussian grid by specifying the triangular truncation:

trunc=63

# For the horizontal interpolation from the ICON grid to Gaussian grid,
# a large part of the time will be spent on calculating the remapping 
# weights. This may take very long when the resolution is high.
# Therefore we suggest calculating the weights only once and store them 
# for later use. 

compute_remap_weights=0   # (1=ON,0=OFF)

# The remapping weights file generated by this script will be named, 
# e.g., icon_R2B04_spr0.90_tri_cell_to_T159.nc 
# If the weights are already available, specify the location:
# (Don't forget the trailing "/")

remap_weights_path="${model_data_path}remap_weights/"

# For the remapping, we also need to know which optimization was used 
# to generate the ICON grid. For example,
#   "ori"     : original icosahedral grid without optimization
#   "hro"     : Heikes-Randall optimization
#   "spr0.90" : spring dynamics, with spring coefficient 0.90

grid_optimization="spr0.90"

# Remove these files after finishing the diagnoses? 
# (1=REMOVE,0=SAVE FOR LATER USE)

rm_tmp_files=0

# Where should the plot files be located? Don't forget the trailing "/".

plot_file_path="${model_data_path}plots/"

#--------------------------------------------------------------------------
# Now specify the directory in which the intermediate files 
# (excluding the remapping weights) should be placed. 
# Don't forget the trailing "/".

tmp_data_path="${model_data_path}tmp/"

#--------------------------------------------------------------------------
# Specify the reference experiment for making difference plots

ref_config="ref exp"
ref_expname=$EXP
ref_resolution=${horizontal_resolution}_${vertical_resolution}
ref_timerange="${clim_istart}-${clim_iend}"
ref_datapath=$tmp_data_path

#--------------------------------------------------------------------------
# Do you want CDO to run in silence mode, or to report everything
# it is doing?

cdo_silence=1   #( 1 = silence mode; 0 = detailed report )

#--------------------------------------------------------------------------
#                    END OF USER'S SPECIFICATIONS 
#==========================================================================

if [ -f set_env ] ; then
  source ./set_env
fi

echo
echo "**********************************************************"
echo "***    ICON Tool Kit for APE: Zonal-mean Climate       ***"
echo "**********************************************************"
echo 

# Temporary variables

script_path=${icon_path}'/scripts/postprocessing/'

resolution=${horizontal_resolution}${vertical_resolution}
fori=${model_data_path}${EXP}_${resolution}
ftmp=${tmp_data_path}${EXP}_${resolution}

if [ $cdo_silence -eq 1 ]; then
   silence='-s'
else
   silence=''
fi

if [ $Model == "ECHAM" ]; then
   compute_remap_weights=0
fi

# The directories for intermediate data and plots will be created, if 
# not already there

if [ ! -d ${plot_file_path} ]; then
   mkdir -p ${plot_file_path} 
fi
if [ ! -d ${tmp_data_path} ]; then
   mkdir -p ${tmp_data_path} 
fi

# Create a directory for soft links. This is used later for 
# computing the time mean from multiple data files.

lnkdir=${tmp_data_path}${clim_istart}"-"${clim_iend}"_lnk"
if [ -d $lnkdir ]; then
   rm -rf $lnkdir
fi
mkdir $lnkdir
flnk=${EXP}_${resolution}

#==========================================================================
# Prepare remappping weights
#==========================================================================

weights=${remap_weights_path}"icon_"${horizontal_resolution}

if [ ${cell_type} -eq 3 ]; then
   weights=${weights}"_"${grid_optimization}"_cell_to_T"${trunc}".nc"
elif [ ${cell_type} -eq 6 ]; then
   weights=${weights}"_"${grid_optimization}"_vert_to_T"${trunc}".nc"
else
   echo "Wrong choice of cell_type. Should be 3 or 6 !"
   exit 1
fi

# compute weights

if [ ${compute_remap_weights} -eq 1 ]; then

 if [ ! -d ${remap_weights_path} ]; then
    mkdir -p ${remap_weights_path} 
 fi

 echo
 echo "=== Computing remapping weights (ICON to Gaussian) ..."

 label=$(printf "%04d" ${clim_istart})
 cdo $silence gendis,t${trunc}grid \
     -seltimestep,1 -selname,PS ${fori}"_"${label}".nc" ${weights}

 check_error $? "Computing remapping weights"

fi

#========================================================================
# Zonal mean climate: calculate and plot
#========================================================================

if [ $diag_climate -eq 1 ]; then

    timerange=${clim_istart}"-"${clim_iend}

    # Look up the user-specified variable name in a registry in order to
    # inquire necessary information for data postprocessing and plotting.
    # The script lookup_variable.ksh returns the entry ID (as variable "ie"), 
    # all cause exit if the variable is not found in the registry.

    export varname=$1
    . ./lookup_variable.ksh $varname

    # Pre-plot data processing

    if [ $do_computation -eq 1 ]; then

      echo
      echo "=== Computing statistics for variable $varname ..."

      #------------------
      # Select variables 
      #------------------
      ifile=$clim_istart
      while [ $ifile -le $clim_iend ] ; do
        label=$(printf "%04d" $ifile)

        # Do it only if the selection has not done before
        if [ ! -f ${ftmp}"_"$label"_"${varname}".nc" ]; then

           case $Model in 
           "ICOHAM" | "ICONAM")

              cdo $silence selname,${varname} ${fori}"_"$label".nc" \
                                              ${ftmp}"_"$label"_"${varname}".nc"
           ;;
           "ECHAM")

             if [ ${afterbn[$ie]} -eq 1 ]; then  # dynamics variables

                cat >$Model_$EXP_$varname.nml <<EOF
                &SELECT
                 TYPE = 20, FORMAT = 2,
                 CODE = ${varcode[$ie]}
                &END
EOF
                after ${fori}"_"$label".nc" \
                      ${ftmp}"_"$label"_"${varcode[$ie]}".nc" \
                      < $Model_$EXP_$varname.nml >after.out

                cdo $silence setname,${varname} \
                    ${ftmp}"_"$label"_"${varcode[$ie]}".nc" \
                    ${ftmp}"_"$label"_"${varname}".nc"
  
                rm  ${ftmp}"_"$label"_"${varcode[$ie]}".nc"
                rm  after.out $Model_$EXP_$varname.nml 

             else # physics variables

                cdo $silence setname,$varname -selname,${tmpname[$ie]} \
                    ${fori}"_"$label".nc" \
                    ${ftmp}"_"$label"_"$varname".nc"
             fi
       
           ;; 
           *)
             echo "Wrong model name! Abort."
             exit
           esac 
           check_error $? "Set/selname,  File $label"
        fi

        ln -s ${ftmp}"_"$label"_"$varname".nc" $lnkdir"/"${flnk}"_"$label"_"$varname".nc"
        check_error $? "Soft link of  File $label"

        ifile=` expr $ifile + 1 `
      done

      #-------------------------------------------------------------------
      # Compute time and zonal mean. Note that
      #  1. In order to avoid merging all time steps into a single file,
      #     we make use of the operator "ensavg" which accepts multiple
      #     inputs; To avoid having an extremely long list of input files,
      #     cdo is called from a temporary directory in which soft links 
      #     to the actual input files are located.
      #  2. For the ICON models, interpolation to Gaus grid is necessary. 
      #-------------------------------------------------------------------
      case $Model in 
      "ICOHAM" | "ICONAM")
         intp="-remap,t${trunc}grid,${weights}"
      ;;
      "ECHAM")
         intp=""
      ;;
      esac

      here=`pwd` ; cd  $lnkdir

      cdo $silence ensavg \
          ${flnk}"_"[0-9][0-9][0-9][0-9]"_"$varname".nc" \
          ${ftmp}"_"$timerange"_"$varname"_ensavg.nc"

      check_error $? "cdo ensavg"
      cd $here

      cdo $silence zonavg $intp -timavg \
          ${ftmp}"_"$timerange"_"$varname"_ensavg.nc"    \
          ${ftmp}"_"$timerange"_"$varname"_zmta_T"$trunc".nc"

      check_error $? "Zonal and time average"
      rm ${ftmp}"_"$timerange"_"$varname"_ensavg.nc"
      rm -rf ${lnkdir}

      #----------------------------------------------------------------------------
      # Interpolate from model levels to pressure levels (hydrostatic models only)
      #----------------------------------------------------------------------------
      case $Model in 
      "ICOHAM" | "ECHAM")

        if [ $varname == "PS" ] || [ $varname == "PHIS" ] ; then
           echo PS and PHIS - skip ml2pl.
        else

           cdo $silence merge \
               ${ftmp}"_"$timerange"_"$varname"_zmta_T"$trunc".nc" \
               ${ftmp}"_"$timerange"_"PS"_zmta_T"$trunc".nc"       \
               ${ftmp}"_"$timerange"_"PHIS"_zmta_T"$trunc".nc"     \
               ${ftmp}"_"$timerange"_"$varname"_zmta_T"$trunc"_tmp.nc"

           p17std="100000,92500,85000,70000,60000,50000,40000,30000,25000,20000,15000,10000,7000,5000,3000,2000,1000"
           plevs=${plevs:=$p17std}
           cdo $silence ml2pl,$plevs \
               ${ftmp}"_"$timerange"_"$varname"_zmta_T"$trunc"_tmp.nc" \
               ${ftmp}"_"$timerange"_"$varname"_zmta_T"$trunc"_pres.nc"

           rm  ${ftmp}"_"$timerange"_"$varname"_zmta_T"$trunc"_tmp.nc"
           check_error $? "Vertical interpolation ($plevs Pa)"
        fi 
      ;;
      esac 

   fi # do_computation -eq 1

   #-----------------------------
   # Plotting
   #-----------------------------
   if [ $make_plot -eq 1 ] ; then

        if [ $varname == "PS" ] || [ $varname == "PHIS" ] ; then
           echo PS and PHIS - skip plotting
        else
           export resolution ref_resolution
           export timerange  ref_timerange
           export LongName=${longname[$ie]}
           export Scale=${plotscale[$ie]}
           export Min=${plotmin[$ie]}
           export Max=${plotmax[$ie]}
           export Int=${plotint[$ie]}
           export DiffMax=${diffmax[$ie]}
           export DiffInt=${diffint[$ie]}
           export ColorMap=${colormap[$ie]}
           export ColorStart=${colorstart[$ie]}
           export ColorEnd=${colorend[$ie]}
           export DiffColorMap=${diffcolormap[$ie]}
           export DiffColorStart=${diffcolorstart[$ie]}
           export DiffColorEnd=${diffcolorend[$ie]}

           case $Model in 
           "ICOHAM" | "ECHAM")

             export YAxis="pressure"
             export DataFile=${ftmp}"_"$timerange"_"$varname"_zmta_T"$trunc"_pres.nc"
             export DataFile2=$ref_data_path"/"$ref_exp_name"_"$ref_resolution
             export DataFile2=$DataFile2"_"$ref_timerange"_"$varname"_zmta_T"$trunc"_pres.nc"
           ;;
           "ICONAM") 

             export YAxis="height"
             export DataFile=${ftmp}"_"$timerange"_"$varname"_zmta_T"$trunc".nc"
             export DataFile2=$ref_data_path"/"$ref_exp_name"_"$ref_resolution
             export DataFile2=$DataFile2"_"$ref_timerange"_"$varname"_zmta_T"$trunc".nc"
           ;;
           esac 

           export PlotFile=${plot_file_path}${EXP}"_"${resolution}"_"$timerange
           export PlotFile=${PlotFile}"_"$varname"_zmta_T"$trunc
          
           ncl plot_lat-pz.ncl >ncl_output.log

           r1=$?
           r2=`grep fatal ncl_output.log` ;  echo "$r2"
           check_error $r1 "=== Plotting zonal mean using plot_lat-pz.ncl"
           echo
        fi
   fi
fi

#========================================================================
# Clean up
#========================================================================

echo
echo "=== Plots can be found in "${plot_file_path}

if [ $rm_tmp_files -eq 1 ]; then

   rm ${tmp_data_path}/${EXP}_${resolution}*.nc 

   if [ `ls ${tmp_data_path} |wc -l` -eq 0 ]; then
      rm -rf ${tmp_data_path}
   fi 
   echo "=== Temporary data have been removed."

else
   echo "=== Temporary data can be found in "${tmp_data_path}
fi

exit

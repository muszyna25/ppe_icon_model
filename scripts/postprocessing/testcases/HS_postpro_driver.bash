#!/bin/bash
#
#==========================================================================
#      Driver script for postprocessing and visulization for the 
#                        Held-Suarez test 
#==========================================================================
#
# History: 
# Initial version by Hui Wan (MPI-M, 2010-07)
# Pilar Ripodas (DWD, 2010-10), options for the Non Hydrostatic model
# Marco Giorgetta (MPI-M, 2017-04), changed for non-hydrostatic exp.atm_heldsuarez
#
# Short description:
# This script 
#
# Software needed:
# - CDO (Climate Data Operators, www.mpimet.mpg.de/cdo) 
#   for interplation and for the spectral transform;
# - NCL (NCAR Command Language, www.ncl.ucar.edu)
#   for visualization.
#
#==============================================================================
#
check_error()
{

    # Check if the first parameter (return status) is not OK 

    if [ $1 -ne 0 ] 
    then

	# Stop running this script and return the error status
	echo "ERROR: $2"
	exit $1
    fi
}

#==========================================================================
#                          USER'S SPECIFICATIONS 
#--------------------------------------------------------------------------

#--------------------------------------------------------------------------
# 1. About the model output
#--------------------------------------------------------------------------

# 1.1 What is the experiment ID? 
# The experiment ID is the first part of the file name of your model output, 
# which is followed by information on hor. and vert. resolution (cf. 1.5),
# and a date/time stamp.
exp="atm_heldsuarez"  

# 1.2 Spatial resolution?
horizontal_resolution="160km"
vertical_resolution="L47"

# 1.3 The experiment identifier that will appear in the plots
config_string="$exp $horizontal_resolution $vertical_resolution"

# 1.4 Base directory?
base_path="$HOME/git/icon-aes"

# 1.5 Model data directory?
model_data_path="$base_path/experiments/${exp}"


#--------------------------------------------------------------------------
# 2. Decide what to do
#--------------------------------------------------------------------------
# A complete set of the contour plots includes
#
# a. evolution of zonal temperature variance at 750 hPa/level;
# b. the zonal mean "climate" computed for the user-specified period, including
#    > time and zonal mean temperature, u-wind, and v-wind,
#    > meridional flux of heat and zonal momentum caused by eddy activities,
#    > eddy kinetic energy.
# c. temporal evolution of the surface pressure global mean
#
# If you want to have data or plot of (a), set the following variable to 1

diag_evolution=1

# If you want to have data or plot of (b), set the following variable to 1

diag_climate=1

# If you want to have data or plot of (c), set the following variable to 1

diag_evolution_ps=1

# This script assumes that the output has been split into a series of monthly
# files. The first file is named "${exp}_ml_00010â‰¤101T000000Z.nc",the second one
# "${exp}_ml_00010201T000000Z.nc", and so on. Now specify the date/time stamps
# of the first and last file to be used for plot (a)
# (see above)

first_datetime_a=0000-01-01T00:00:00Z
 last_datetime_a=0005-12-30T23:59:59Z

# Specify the date/time stamps of the first and last file for plot (b):

first_datetime_b=0001-01-01T00:00:00Z
 last_datetime_b=0010-12-30T23:59:59Z

# Specify the date/time stamps of the first and last file for plot (c):

first_datetime_c=0000-01-01T00:00:00Z
 last_datetime_c=0010-12-30T23:59:59Z

# If you want to obtain plots, set the following variable to 1 

make_plot=1

# What format do you want, pdf, eps or ps?

export plot_file_format="pdf"

# Before plotting, interpolation and statistics computation is needed. 
# If you have already done that and stored the data, turn this step off.

do_computation=1    # (1=ON,0=OFF)

# To diagnose the zonal mean "climate", the ICON model output 
# on the geodesic grid needs to be interpolated to a Gaussian grid. 
# Choose the Gaussian grid by specifying the triangular truncation:

export trunc=85

# For the horizontal interpolation from the ICON grid to Gaussian grid,
# a large part of the time will be spent on calculating the remapping 
# weights. This may take very long when the resolution is high.
# Therefore we suggest calculating the weights only once and store them 
# for later use. 

compute_remap_weights=1   # (1=ON,0=OFF)

# The remapping weights file generated by this script will be named, 
# e.g., icon_cell_to_T63.nc 
# If the weights are already available, specify the location:
# (Don't forget the trailing "/")

remap_weights_path="$model_data_path/remap_weights"

# Remove these files after finishing the diagnoses? 
# (1=REMOVE,0=SAVE FOR LATER USE)

rm_tmp_files=0

# Where should the plot files be located? Don't forget the trailing "/".

plot_file_path="$model_data_path/plots"

#--------------------------------------------------------------------------
# Now specify the directory in which the intermediate files 
# (excluding the remapping weights) should be placed. 
# Don't forget the trailing "/".

tmp_data_path="$model_data_path/tmp"

#--------------------------------------------------------------------------
# Do you want CDO to run in silence mode, or to report everything
# it is doing?

cdo_silence=0   #( 1 = silence mode; 0 = detailed report )

#--------------------------------------------------------------------------
#                    END OF USER'S SPECIFICATIONS 
#==========================================================================

echo
echo "**********************************************************"
echo "***       ICON Tool Kit for Idealized Test Cases       ***"
echo "**********************************************************"
echo 
echo "=== Postprocessing started for the Held-Suarez test."

# Temporary variables

export script_path=`pwd`"/HS_postpro_scripts"
#
# directory with the NCL colomap files
# - on Mistral:
export NCARG_COLORMAPS=/sw/rhel6-x64/ncl-6.4.0-gccsys/lib/ncarg/colormaps

if [ $cdo_silence -eq 1 ]; then
    silence='-s'
else
    silence=''
fi

# The directories for intermediate data and plots will be created, if 
# not already there

if [ ! -d ${plot_file_path} ]; then
    mkdir -p ${plot_file_path} 
fi
if [ ! -d ${tmp_data_path} ]; then
    mkdir -p ${tmp_data_path} 
fi

#==========================================================================
# Prepare remappping weights
#==========================================================================
weights=${remap_weights_path}/"icon_cell_to_t"${trunc}"grid.nc"

# compute weights

if [ ${compute_remap_weights} -eq 1 ]; then

    if [ ! -d ${remap_weights_path} ]; then
	mkdir -p ${remap_weights_path} 
    fi

    echo
    echo "=== Computing remapping weights (ICON to Gaussian) ..."

    fori=$model_data_path/${exp}_ml
    file=`ls ${fori}_????????T??????Z.nc|head -1`
    cdo $silence gendis,t${trunc}grid -seltimestep,1 -selname,ps ${file} ${weights}

    check_error $? "In script atm_heldsuarez_postpro_driver.bash: part 'Computing remapping weights (ICON to Gaussian)'"
    echo "=== Done."
fi

#====================================================================================================
# Compute the zonal temperature variance at 750 hPa; make plot.
#====================================================================================================
if [ ${diag_evolution} -eq 1 ]; then

   if [ ${do_computation} -eq 1 ]; then

      echo
      echo "=== Zonal variance of model temperature at 750 hPa ..."

      fori=$model_data_path/${exp}_pl
      ftmp=$tmp_data_path/${exp}_pl

      rm -f ${ftmp}_t${trunc}grid_zonvar.nc
      for file in ${fori}_????????T??????Z.nc; do
	  cdo -r $silence  cat                                      \
	      -zonvar                                               \
	      -remap,t${trunc}grid,${weights}                       \
              -seldate,${first_datetime_a},${last_datetime_a} $file \
              ${ftmp}_t${trunc}grid_zonvar.nc
      done

      echo "=== Done."

   fi

   if [ ${make_plot} -eq 1 ]; then

      export DataPath=${tmp_data_path}/
      export DataID=${exp}_pl_t${trunc}grid_zonvar
      export PlotPath=${plot_file_path}/
      export ConfigStr=${config_string}
      export VarName="ta"

      echo "=== Plotting temperature variance ..."
      ncl ${script_path}/HS_plot_T-var_time_series.ncl 
      check_error $? "In scripte atm_heldsuarez_postpro_driver.bash: part 'Plotting temperature variance'"
      echo "=== Done."
   fi
fi

#========================================================================
# Diagnose the zonal mean climate; make plot
#========================================================================
if [ $diag_climate -eq 1 ]; then

   if [ $do_computation -eq 1 ]; then

      echo
      echo "=== Computing statistics ..."

      #------------------
      # Select variables 
      #------------------

      fori=$model_data_path/${exp}_hl
      ftmp=$tmp_data_path/${exp}_hl

      rm -f ${ftmp}_ta_ua_va_wa.nc
      for file in ${fori}_????????T??????Z.nc; do
	  cdo -r $silence  cat                                      \
	      -selname,ta,ua,va,wa                                  \
              -seldate,${first_datetime_b},${last_datetime_b} $file \
              ${ftmp}_ta_ua_va_wa.nc
      done

      cdo splitname ${ftmp}_ta_ua_va_wa.nc ${ftmp}_
      rm ${ftmp}_ta_ua_va_wa.nc

      #-----------------------------------------
      # vertical wind: m/s --> cm/s
      #-----------------------------------------

      cdo mulc,100 ${ftmp}_wa.nc ${ftmp}_wa_2.nc
      rm ${ftmp}_wa.nc
      mv ${ftmp}_wa_2.nc ${ftmp}_wa.nc

      #-----------------------------------------
      # Compute mean and variances
      #-----------------------------------------
      for varname in ta ua va wa; do
	  for opr in timavg timvar ; do
              cdo $silence $opr ${ftmp}_$varname.nc ${ftmp}_${varname}_${opr}.nc
	  done
      done

      #-----------------------------------------
      # Eddy kinetic energy
      #-----------------------------------------

      cdo $silence mulc,0.5 -add ${ftmp}_ua_timvar.nc ${ftmp}_va_timvar.nc \
                                 ${ftmp}_eke.nc

      #-----------------------------------------
      # Eddy momentum/heat flux
      #-----------------------------------------

      for varname in ta ua ; do

	  # (xa*va)a = time average of xa*va, at all points
          cdo $silence timavg -mul ${ftmp}_${varname}.nc ${ftmp}_va.nc \
                                   ${ftmp}_${varname}va_a_timavg.nc

	  # xaa*vaa = (time average of xa) * (time average of va), at all points
          cdo $silence mul ${ftmp}_${varname}_timavg.nc ${ftmp}_va_timavg.nc \
                           ${ftmp}_${varname}avaa.nc

	  # xap*vap = (xa*va)a - xaa*vaa
          cdo $silence sub ${ftmp}_${varname}va_a_timavg.nc \
                           ${ftmp}_${varname}avaa.nc      \
                           ${ftmp}_${varname}pvap.nc

          rm ${ftmp}_${varname}va_a_timavg.nc
          rm ${ftmp}_${varname}avaa.nc

      done

      for varname in ua ; do

	  # (xa*va)a = time average of xa*wa, at all points
          cdo $silence timavg -mul ${ftmp}_${varname}.nc ${ftmp}_wa.nc \
                                   ${ftmp}_${varname}wa_a_timavg.nc

	  # xaa*waa = (time average of xa) * (time average of wa), at all points
          cdo $silence mul ${ftmp}_${varname}_timavg.nc ${ftmp}_wa_timavg.nc \
                           ${ftmp}_${varname}awaa.nc

	  # xap*wap = (xa*wa)a - xaa*waa
          cdo $silence sub ${ftmp}_${varname}wa_a_timavg.nc \
                           ${ftmp}_${varname}awaa.nc      \
                           ${ftmp}_${varname}pwap.nc

          rm ${ftmp}_${varname}wa_a_timavg.nc
          rm ${ftmp}_${varname}awaa.nc

      done

      #rm ${ftmp}_ta.nc
      #rm ${ftmp}_ua.nc
      #rm ${ftmp}_va.nc
      #rm ${ftmp}_wa.nc

      #-------------------------------------------------
      # Interpolate to Gauss grid and compute zonal mean
      #-------------------------------------------------

      varlabel1=("ua_timavg" "va_timavg" "wa_timavg" "ta_timavg" "ua_timvar" "va_timvar" "wa_timvar" "ta_timvar" "uapvap"    "uapwap"    "tapvap"    "eke"   )
      varlabel2=("ua_ta"     "va_ta"     "wa_ta"     "ta_ta"     "ua_tv"     "va_tv"     "wa_tv"     "ta_tv"     "uapvap_ta" "uapwap_ta" "tapvap_ta" "eke_ta")

      nvar=${#varlabel1[*]} 
      ivar=0

      while [ $ivar -lt $nvar ]; do

          cdo $silence zonavg                                                \
	      -remap,t${trunc}grid,${weights} ${ftmp}_${varlabel1[$ivar]}.nc \
              ${ftmp}_${varlabel2[$ivar]}_t${trunc}grid.nc

          rm ${ftmp}_${varlabel1[$ivar]}.nc

	  ivar=` expr $ivar + 1 `
      done
      echo "=== Done."
   fi

   if [ $make_plot -eq 1 ]; then

       export DataPath=${tmp_data_path}/
       export DataID=${exp}_hl_
       export PlotPath=${plot_file_path}/
       export ConfigStr=${config_string}
       export trunc

       export PlotTop=22 # km
       ncl ${script_path}/HS_plot_climate_colored.ncl

       export PlotTop=80 # km
       ncl ${script_path}/HS_plot_climate_colored.ncl
   fi
fi

#====================================================================================================
# Compute surface pressure global mean ; make plot.
#====================================================================================================
if [ ${diag_evolution_ps} -eq 1 ]; then

    if [ ${do_computation} -eq 1 ]; then

	echo
	echo "===  Global mean surface pressure ..."

	#----------------------------------
	# select PS and calculate global mean

	fori=$model_data_path/${exp}_ml
	ftmp=$tmp_data_path/${exp}_ml

	rm -f ${ftmp}_ps_fldmean.nc
	for file in ${fori}_????????T??????Z.nc; do
	    cdo -r $silence  cat                                      \
		-fldmean                                              \
		-selname,ps                                           \
		-seldate,${first_datetime_c},${last_datetime_c} $file \
		${ftmp}_ps_fldmean.nc
        done

        echo "=== Done."
   
   fi

   if [ ${make_plot} -eq 1 ]; then

      export DataPath=${tmp_data_path}/
      export DataID=${exp}_ml_ps_fldmean
      export PlotPath=${plot_file_path}/
      export ConfigStr=${config_string}
      export VarName="ps"

      echo "=== Plotting Surface Pressure evolution ..."
      ncl ${script_path}/HS_plot_PS-mean_time_series.ncl 
      check_error $? "In scripte atm_heldsuarez_postpro_driver.bash: part 'Plotting Surface Pressure global mean'"
      echo "=== Done."
   fi

fi

#------------------------------------------------------------------------
# Clean up
#------------------------------------------------------------------------

echo 
echo "=== Postprocessing finished for the Held-Suarez test."
echo "=== The plots can be found in "${plot_file_path}

if [ $rm_tmp_files -eq 1 ]; then

   rm ${tmp_data_path}/${exp}_${resolution}*.nc 

   if [ `ls ${tmp_data_path} |wc -l` -eq 0 ]; then
      rm -rf ${tmp_data_path}
   fi 
   echo "=== The temporary data have been removed."

else
   echo "=== The pressure level data and spectral coefficients can be found in "${tmp_data_path}
fi

# Source file directory:
SRC_DIR=@srcdir@/src

# Build directories:
DEP_DIR=.deps
OBJ_DIR=.objs
MOD_DIR=.mods
BIN_DIR=bin

# Bundled libraries
BUNDLED_LIBS=support/libicon_support.a@BUNDLED_LIBS@
SUBDIRS=support@subdirs_extra@

# Install command and directories:
INSTALL=@INSTALL@
prefix=@prefix@
exec_prefix=@exec_prefix@

# Compiler and flags:
FC=@FC@
FCFLAGS=@FC_MODINC@$(MOD_DIR) @FC_MODOUT@$(MOD_DIR) -I$(SRC_DIR)/include @BUNDLED_FCFLAGS@ @OPTION_FCFLAGS@ @FCFLAGS@
LDFLAGS=@LDFLAGS@
LIBS=@LIBS@

# List of external modules for the dependency generation:
EXTERNAL_MODS=@EXTERNAL_MODS@

# Dependency generation command:
DEPGEN=@PYTHON@ @top_srcdir@/utils/mkhelper/depgen.py $< @depgen.f90.config \
       -o $@ --obj-name $(OBJ_DIR)/$(<F:.f90=.o) --src-name $(<F) \
       --fc-external-mods='$(EXTERNAL_MODS)' -- @DEPGEN_DEFS@

# Dependency listing command:
DEPLIST=@PYTHON@ @top_srcdir@/utils/mkhelper/deplist.py

# List of the dependency files:
SRC_FILES=$(notdir $(shell find $(SRC_DIR) -name '*.f90'))
DEP_FILES=$(addprefix $(DEP_DIR)/, $(SRC_FILES:.f90=.f90.d))
DEP_FILES+=$(DEP_DIR)/_undetectable.d

# List of the required object files:
OBJ_FILES=$(shell $(DEPLIST) -p '*.o' -t $(OBJ_DIR)/icon.o -f $(DEP_DIR)/*.d)

# Source file selective search paths:
vpath %.f90 $(shell find $(SRC_DIR) -type d)

# Disable built-in suffix rules:
.SUFFIXES:
# Targets not associated with files:
.PHONY: all depend clean distclean maintainer-clean install
# Call make inside the subdirectories unconditionally:
.PHONY: $(SUBDIRS)
# Keep sentinel files of created directories:
.PRECIOUS: %/.dirstamp

# User interface rules:
all: $(BIN_DIR)/icon

depend: $(DEP_FILES)

clean: $(SUBDIRS)
	rm -rf $(DEP_DIR) $(OBJ_DIR) $(MOD_DIR) $(BIN_DIR)

distclean: clean
	rm -f config.log config.status Makefile depgen.f90.config

maintainer-clean: distclean
	rm -rf autom4te.cache $(shell find ./utils/mkhelper -name '*.pyc' -o -name '*.pyo' -o -name '__pycache__')

install: all
	$(INSTALL) -d @bindir@
	$(INSTALL) $(BIN_DIR)/icon @bindir@/icon

# Main building rules:
$(BIN_DIR)/icon: $(OBJ_DIR)/icon.o $(OBJ_FILES) $(BUNDLED_LIBS) | $(BIN_DIR)/.dirstamp
	$(FC) $(FCFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)

$(OBJ_DIR)/%.o: %.f90 | $(SUBDIRS) $(MOD_DIR)/.dirstamp $(OBJ_DIR)/.dirstamp
	$(FC) -c $(FCFLAGS) -o $@ @FCFLAGS_f90@ $<

# Auxiliary building rules:
$(MOD_DIR)/%.@FC_MODULE_EXT@:
	@if test -z $<; then \
	  echo "Cannot find Fortran source file providing module '$(basename $(@F))'."; \
	elif test ! -f $@; then \
	  rm -f $<; $(MAKE) $<; \
	fi

# Some old versions of GNU Make strip the trailing slash when
# searching for pattern rules, which is why we have to
# create sentinel files inside the created directories:
%/.dirstamp:
	@echo "Creating directory '$(@D)'..."; mkdir $(@D); touch $@

# Dependency generation rule:
$(DEP_DIR)/%.f90.d: %.f90 | $(DEP_DIR)/.dirstamp
	@$(DEPGEN) $(FCFLAGS)

# Undetectable dependencies:
$(DEP_DIR)/_undetectable.d: | $(DEP_DIR)/.dirstamp
	@echo $(OBJ_DIR)/mo_interface_echam_car.o: $(OBJ_DIR)/lcariolle_pres_intp_li.o $(OBJ_DIR)/lcariolle_lat_intp_li.o $(OBJ_DIR)/lcariolle_do3dt.o >> $@ && \
	echo $(OBJ_DIR)/mo_hydro_ocean_run.o: $(OBJ_DIR)/bgc_icon.o $(OBJ_DIR)/ini_bgc_icon.o >> $@ && \
	echo $(OBJ_DIR)/mo_echam_phy_init.o: $(OBJ_DIR)/lcariolle_pres_intp_li.o $(OBJ_DIR)/lcariolle_lat_intp_li.o $(OBJ_DIR)/lcariolle_init_o3.o $(OBJ_DIR)/lcariolle_init.o >> $@ && \
	echo $(OBJ_DIR)/lcariolle_do3dt.o: $(OBJ_DIR)/lcariolle_o3_column.o >> $@ && \
	echo $(OBJ_DIR)/bgc_icon.o: $(OBJ_DIR)/swr_absorption.o $(OBJ_DIR)/chemcon.o $(OBJ_DIR)/ocprod.o $(OBJ_DIR)/sedshi.o >> $@

# Make bundled libraries:
$(SUBDIRS):
	@$(MAKE) -C $@ $(filter $(MAKECMDGOALS), clean distclean maintainer-clean)

$(BUNDLED_LIBS): $(SUBDIRS);

ifeq (,$(filter $(MAKECMDGOALS), depend clean distclean maintainer-clean))
-include $(DEP_FILES)
endif

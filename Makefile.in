# Source file directory:
srcdir:= @srcdir@

# Source file subdirectories:
subdirs:= src support

# Installation directories:
prefix:= @prefix@
exec_prefix:= @exec_prefix@

# Fortran module file directory:
moddir:= mod

# Compilers and flags:
FC= @FC@
FCFLAGS= @FCFLAGS@
LDFLAGS= @LDFLAGS@
LIBS= @LIBS@
config_FCFLAGS:= @FC_MOD_IN@$(moddir) @FC_MOD_OUT@$(moddir) -I@srcdir@/src/include @BUNDLED_FCFLAGS@ @OPTION_FCFLAGS@

CC= @CC@
CFLAGS= @CFLAGS@
CPPFLAGS= @CPPFLAGS@
config_CPPFLAGS:= -I. @DEFS@

# Other utilities:
INSTALL= @INSTALL@
PYTHON= @PYTHON@
DEPLIST= $(PYTHON) $(srcdir)/utils/mkhelper/deplist.py
DEPGEN= $(PYTHON) $(srcdir)/utils/mkhelper/depgen.py
PERL= @PERL@

# Silent rule prefixes:
V= @DEFAULT_VERBOSITY@
ifeq ($(V), 0)
silent_FCLD=   @echo "  FCLD    " $@;
silent_FC=     @echo "  FC      " $@;
silent_CC=     @echo "  CC      " $@;
silent_GEN=    @echo "  GEN     " $@;
silent_MKDIR=  @echo "  MKDIR   " $(@D);
silent_DEPGEN= @echo "  DEPGEN  " $@;
endif

# Bundled libraries and their root source directories:
bundled_LIBS:=@BUNDLED_LIBS@
bundled_subdirs:=@subdirs_extra@

# Source files:
FC_srcs:= $(shell find $(addprefix $(srcdir)/, $(subdirs)) -name '*.f90')
C_srcs:= $(shell find $(addprefix $(srcdir)/, $(subdirs)) -name '*.c')

# Stamp files of the build directories:
dirstamps:= $(patsubst $(srcdir)/%, %.dirstamp, $(sort $(dir $(FC_srcs) $(C_srcs)))) $(moddir)/.dirstamp

# Dependency files:
depfiles:= $(patsubst $(srcdir)/%, %.d, $(FC_srcs) $(C_srcs))

# List of the required object files:
rootobj:= src/drivers/icon.o
objs:= $(rootobj) $(shell $(DEPLIST) -t $(rootobj) -p '*.o' --inc-oo -f $(depfiles) Makefile)

# Source file selective search paths:
vpath %.f90 $(srcdir)
vpath %.c $(srcdir)

# Disable built-in suffix rules:
.SUFFIXES:
# Targets not associated with files:
.PHONY: all depend clean distclean maintainer-clean install force-create-version
# Call make inside the subdirectories unconditionally:
.PHONY: $(bundled_subdirs)

# User interface rules:
all: icon

depend: $(depfiles)

clean: $(bundled_subdirs)
	rm -f icon version.o $(patsubst $(srcdir)/%.c, %.o, $(C_srcs)) $(patsubst $(srcdir)/%.f90, %.o, $(FC_srcs))
	rm -f $(moddir)/*.@FC_MOD_FILE_EXT@

distclean: clean
	rm -f config.log config.status Makefile config.h version.c
	rm -f depgen.f90.config depgen.c.config $(depfiles)
	rm -rf $(dirstamps) $(shell find . -name '*.pyc' -o -name '*.pyo' -o -name '__pycache__')
	@for dir in $(subdirs) $(moddir) externals; do \
	  echo "find '$$dir' -type d -empty -delete"; \
	  find "$$dir" -type d -empty -delete; \
	done

maintainer-clean: distclean
	rm -rf autom4te.cache config.h.in~

install: all
	$(INSTALL) -d @bindir@ && $(INSTALL) icon @bindir@/icon

# Main building rules:
icon: $(objs) $(bundled_LIBS)
	$(silent_FCLD)$(FC) -o $@ $(config_FCFLAGS) $(FCFLAGS) $(LDFLAGS) $^ $(LIBS)

%.o: %.f90 | $(dirstamps) $(bundled_subdirs)
	$(silent_FC)$(FC) -o $@ -c $(config_FCFLAGS) $(FCFLAGS) @FCFLAGS_f90@ $<

%.o: %.c | $(dirstamps)
	$(silent_CC)$(CC) -o $@ -c $(CFLAGS) $(config_CPPFLAGS) $(CPPFLAGS) $<

# Fortran module file tracking rule:
$(moddir)/%.@FC_MOD_FILE_EXT@:
	@if test -z $<; then \
	  echo "Cannot find Fortran source file providing module '$(basename $(@F))'."; \
	elif test ! -f $@; then \
	  rm -f $<; $(MAKE) $<; \
	fi

# Version source file generation rule:
version.c: force-create-version
	$(silent_GEN)$(PERL) $(srcdir)/utils/pvcs.pl --srcdir $(srcdir)

$(dirstamps):
	$(silent_MKDIR)@MKDIR_P@ $(@D) && touch $@

# Dependency generation rules:
%.f90.d: %.f90 | $(dirstamps)
	$(silent_DEPGEN)$(DEPGEN) @depgen.f90.config -o $@ --obj-name $(@:.f90.d=.o) $< -- @DEPGEN_DEFS@ $(config_FCFLAGS) $(FCFLAGS)

%.c.d: %.c | $(dirstamps)
	$(silent_DEPGEN)$(DEPGEN) @depgen.c.config -o $@ --obj-name $(@:.c.d=.o) $< -- $(CFLAGS) $(config_CPPFLAGS) $(CPPFLAGS)

# Make bundled libraries:
$(bundled_subdirs):
	@$(MAKE) -C $@ $(filter $(MAKECMDGOALS), clean distclean maintainer-clean) V=$(V)

# Build the bundled mtime before the bundled yac
# (currently redundant since yac is a static library):
externals/yac: $(filter externals/mtime, $(bundled_subdirs))

$(bundled_LIBS): $(bundled_subdirs);

# Fortran to C dependencies (see $(objfiles)):
src/atm_dyn_icoham/mo_hierarchy_management.o:| support/util_timer.o
src/io/restart/mo_c_restart_util.o:| support/util_multifile_restart.o
src/io/shared/mo_output_event_handler.o:| support/util_string.o
src/io/shared/mo_util_file.o:| support/util_file.o
src/io/shared/mo_util_nml.o:| support/nml_annotate.o
src/shared/mo_exception.o:| support/util_backtrace.o support/util_system.o
src/shared/mo_expression.o:| support/util_arithmetic_expr.o
src/shared/mo_fortran_tools.o:| support/util_stride.o
src/shared/mo_real_timer.o:| support/util_timer.o
src/shared/mo_util_hash.o:| support/util_hash.o
src/shared/mo_util_string_parse.o:| support/util_string_parse.o
src/shared/mo_util_sysinfo.o:| support/util_sysinfo.o
src/shared/mo_util_uuid.o:| support/util_uuid.o
src/shared/mo_util_vcs.o:| version.o

# Undetectable Fortran dependencies (see $(objfiles)):
src/atm_chem_cariolle/lcariolle_do3dt.o:|      \
  src/atm_chem_cariolle/lcariolle_o3_column.o

src/atm_phy_echam/mo_echam_phy_init.o:|          \
  src/atm_chem_cariolle/lcariolle_init.o         \
  src/atm_chem_cariolle/lcariolle_init_o3.o      \
  src/atm_chem_cariolle/lcariolle_lat_intp_li.o  \
  src/atm_chem_cariolle/lcariolle_pres_intp_li.o

src/atm_phy_echam/mo_interface_echam_car.o:|     \
  src/atm_chem_cariolle/lcariolle_do3dt.o        \
  src/atm_chem_cariolle/lcariolle_lat_intp_li.o  \
  src/atm_chem_cariolle/lcariolle_pres_intp_li.o

src/hamocc/icon_specific/bgc_icon.o:| \
  src/hamocc/common/chemcon.o         \
  src/hamocc/common/ocprod.o          \
  src/hamocc/common/sedshi.o          \
  src/hamocc/common/swr_absorption.o

src/ocean/drivers/mo_hydro_ocean_run.o:|  \
  src/hamocc/icon_specific/bgc_icon.o     \
  src/hamocc/icon_specific/ini_bgc_icon.o

ifeq (,$(filter $(MAKECMDGOALS), depend clean distclean maintainer-clean))
-include $(depfiles)
endif

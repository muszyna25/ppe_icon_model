#! /bin/bash
#________________________________________________________________________________________________
#
# Luis Kornblueh, MPI-M, 2013-12-03
#
# - cmake $(pwd) is doing in-source build for the time being
# - out-of-source has been tested
# - need proper working command line options and usage()
# - rewrite in perl or python
# - need a list of src files for each executable (extra script with ifdef/ifndef capability)
#________________________________________________________________________________________________
# set bash code checkings available
#
set -eu
#__________________________________________________________________________________________________
# select Fortran compiler:
#
fortran_compiler=gcc
#fortran_compiler=intel
#fortran_compiler=nag
#fortran_compiler=cray
#fortran_compiler=pgi
#fortran_compiler=ibm
#__________________________________________________________________________________________________
# function definitions:
#
# set color constants
red=$(tput setaf 1) 
green=$(tput setaf 2)
blue=$(tput setaf 4) 
#
bgcolor=$(tput sgr0)
#
# Argument:
#    $1 = text to write out
redln() { echo "${red}${1}${bgcolor}"; }
blueln() { echo "${blue}${1}${bgcolor}"; }
greenln() { echo "${green}${1}${bgcolor}"; }
#
os() { echo $(uname -s); }
#
fqdn() { echo $(perl -l -mNet::Domain -e 'print Net::Domain::hostfqdn()'); }
#
# Argument:
#    $1 = ICON base dir 
system() { echo $(${1}/config/config.guess); }
#________________________________________________________________________________________________
# purpose:
echo
blueln "Configuration of ICON:"
echo
#________________________________________________________________________________________________
# get site/machine:
#
site=$(fqdn); site=${site#*.};
target=$(fqdn); target=${target%%.*} 
config_guess=$(system $(pwd))
#
greenln "   Site   : $site"
greenln "   Target : $target"
greenln "   System : $config_guess"
#________________________________________________________________________________________________
# cleanup old stuff
#
echo
blueln "** Cleaning up CMake caches and CMake files directories:"
echo
#
ret=0
find . -name CMakeCache.txt -print -exec rm -f {} \; > /dev/null 2>&1 || ret=$?
if [[ $ret ]]
then
   greenln "   removed cache files ..."
else
   redln   "   find CMakeCache.txt failed ..."
   exit 1
fi
#
ret=0
find . -name CMakeFiles -print -exec rm -rf {} \; > /dev/null 2>&1 || ret=$?
if [[ $ret ]]
then
   greenln "   removed file directories ..."
else
   redln   "ERROR: find CMakeFiles failed ..."
   exit 1
fi
#________________________________________________________________________________________________
# initialize environment
#
CC=""; CFLAGS=""; CFORTRAN_DEF="";
#
FC=""; FFLAGS=""; F77FLAGS="";
FC_CPP=""; FC_LANG=""; FC_WARN=""; FC_DEBUG=""; FC_OPTIMIZE=""; FC_OMP=""; 
DEFOPT=""; MODOPT=""; MODDIR="";
#
NETCDFROOT=""; NETCDFFROOT="";
#
cc_version=""; fc_version="";
#
site_known=1   # site_known set to false
#________________________________________________________________________________________________
# get setup from site, target, config_guess
#
echo
blueln "Select setup:" 
echo
#
case $config_guess in
    *-ibm-aix*)
	blueln "   Target: IBM power AIX"
	;;
    x86_64-*-linux*)
	blueln "   Target: INTEL x86_64 Linux"
	echo
	if [[ $(grep -c avx /proc/cpuinfo) -gt 0 ]]
	then
	    hw="avx"
	else
	    hw="sse2"
	fi
	greenln "   -- Supported hardware: ${hw}"
	#
	ret=0
	which lsb_release > /dev/null 2>&1 || ret=$?
	if [[ $ret ]]
	then
	    dist_codename=$(lsb_release -cs)
	else
	    dist_codename="unknown"
	fi
	greenln "   -- Linux distribution: ${dist_codename}"
	echo
	;;
    *-apple-darwin*)
	blueln "   Target: INTEL x86_64 Darwin"
	hw=no-avx    # as 1.38, used in Darwin, cannot handle avx instructions 
	;;
    *)
	redln "This configuration is not supported. Please create a valid entry for ${config_guess}."
	exit 1
	;;
esac
#
c_compiler=${c_compiler:-$fortran_compiler}
case $c_compiler in
    cray)
	CC=cc
	CFLAGS="-O3 -DHAVE_LIBNETCDF -DHAVE_CF_INTERFACE -DHAVE_LIBGRIB -DHAVE_LIBGRIB_API"
	cc_Version=$($CC -V 2>&1 | awk 'NR==1{print $1,$2,$5}')
	;;
    ibm)
	CC=xlc_r
	CFLAGS="-qlanglvl=stdc99 -DHAVE_LIBNETCDF -DHAVE_CF_INTERFACE"
	cc_version=$($CC -qversion | awk 'NR%2{printf "%s, ",$[]0;next}{printf "(build %s)\n",$[]2;}')
	;;
    gcc|nag|intel|pgi)
	CC=gcc
	CFLAGS="-std=gnu99 -march=native -O2 -DHAVE_LIBNETCDF -DHAVE_CF_INTERFACE"
	cc_version=$($CC --version | awk 'NR==1')
	;;
    *)
	redln "The C compiler $c_compiler is not supported yet."
	exit 1
	;;
esac
# 
case $fortran_compiler in
    default|gcc)
	CFORTRAN_DEF="-DpgiFortran"
	FC=gfortran
	FC_CPP="-cpp"
        FC_LANG="-std=f2003 -fmodule-private -fimplicit-none -fmax-identifier-length=63 -ffree-line-length-132"
        FC_WARN="-Wall -Wcharacter-truncation -Wconversion -Wunderflow -Wunused-parameter"
        FC_DEBUG="-g -fbacktrace -fbounds-check -finit-real=nan -finit-integer=-2147483648 -finit-character=127"
	if [[ "x$hw" = "x-no-avx" ]]
	then
            FC_OPTIMIZE="-march=native -m${hw} -O3 -ffast-math -D__LOOP_EXCHANGE"
	else
            FC_OPTIMIZE="-march=native -O3 -ffast-math -D__LOOP_EXCHANGE"
	fi
        FC_OMP="-fopenmp"
        DEFOPT="-D"
        MODOPT="-I"
        MODDIR="-J"
	fc_version=$($FC --version | awk 'NR==1')
	;;
    nag)
	CFORTRAN_DEmoreF="-DNAGf90Fortran"
	FC=nagfor
	FC_CPP="-fpp"
        FC_LANG="-f2003"
	MISMATCH="-wmismatch=mpi_get,mpi_win_create,mpi_send,mpi_isend,mpi_recv,mpi_irecv,mpi_bcast,mpi_alltoall,mpi_alltoallv,mpi_allreduce,mpi_reduce,mpi_gather,mpi_gatherv,mpi_scatterv,mpi_allgather,mpi_pack,mpi_unpack,mpi_type_extent,mpi_type_struct,mpi_type_commit,mpi_op_create,nf_get_att_double,nf_put_att_double,nf_def_var,nf_get_att_int,nf_put_att_int,nf_put_vara_int,nf_get_vara_int,nf_put_vara_double,psmile_bsend" 
        FC_WARN="-colour -gline -C=all ${MISMATCH}"
        FC_DEBUG="-g -nan "
        FC_OPTIMIZE="-float-store -O0"
        FC_OMP=""
	F77FLAGS="-w=obs -O -dcfuns -mismatch_all"
        DEFOPT="-D"
        MODOPT="-I"
        MODDIR="-mdir"
	fc_version=$($FC -V 2>&1 | awk 'NR==1')
	;;
    cray)
	CFORTRAN_DEF="-Df2cFortran"
	FC=ftn
	FC_CPP="-eZ"
        FC_LANG="-em"       # -em enables creating module files
        FC_WARN=""
        FC_DEBUG="-g -Rabc"
        FC_OPTIMIZE="-hflex_mp=conservative -hfp1 -hadd_paren -D__LOOP_EXCHANGE"
        FC_OMP="-mp"
        DEFOPT="-D"
        MODOPT="-p"
        MODDIR="-J"
	fc_version=$($FC -V 2>&1 | awk 'NR==1{print $1,$2,$5}')
	;;
    intel)
	CFORTRAN_DEF="-DpgiFortran"
	FC=ifort
	FC_CPP="-fpp"
        FC_LANG=""
        FC_WARN="-check bounds -check pointers -check uninit"
        FC_DEBUG="-g -debug -traceback"
        FC_OPTIMIZE="-O2 -m${hw} -pc64 -fltconsistency -D__LOOP_EXCHANGE"
        FC_OMP="-openmp"
        DEFOPT="-D"
        MODOPT="-I"
        MODDIR="-module"
	fc_version=$($FC --version 2>&1 | awk 'NR==1')
	;;
    pgi)
	CFORTRAN_DEF="-DpgiFortran"
	FC=pgfortran
	FC_CPP="-Mpreprocess"
        FC_LANG="-Mstandard"
        FC_WARN="-Mbounds -Mchkptr -Mchkstk  -Mdclchk"
        FC_DEBUG="-g -gopt"
        FC_OPTIMIZE="-Mrecursive -Mallocatable=03 -O -D__LOOP_EXCHANGE"
        FC_OMP="-mp"
        DEFOPT="-D"
        MODOPT="-I"
        MODDIR="-module"
	fc_version=$($FC -V | awk 'NR==2')
	;;
    ibm)
	CFORTRAN_DEF="-Dextname" # assuming -qextname for the Fortran options (default at DKRZ and ECMWF)
	FC=
	FC_CPP=
        FC_LANG=
        FC_WARN=
        FC_DEBUG=
        FC_OPTIMIZE=
        FC_OMP=
        DEFOPT=
        MODOPT=
        MODDIR=	
	fc_version=$($FC -qversion | awk 'NR%2{printf "%s, ",$[]0;next}{printf "(build %s)\n",$[]2;}')
	;;
    *)
	redln "The Fortran compiler $fortran_compiler is not supported yet."
	exit 1
	;;
esac

# update CFLAGS with cfortran interface information/define
CFLAGS="${CFORTRAN_DEF} ${CFLAGS}"

# update F77FLAGS
F77FLAGS=${F77FLAGS:-"${FC_DEBUG}  ${FC_OPTIMIZE}"}
# update FFLAGS
FFLAGS="${FC_CPP} ${FC_LANG}  ${FC_WARN}  ${FC_DEBUG}  ${FC_OPTIMIZE}  ${FC_OMP}"

case $site in
    cscs.ch)
	blueln "   Site: cscs.ch"
	;;
    dkrz.de)
	blueln "   Site: dkrz.de"
	;;
    dwd.de)
	blueln "   Site: dwd.de"
        case $(hostname) in
            xct*)
	        # enable loading of modules on thunder, must switch of undefined check because of 
                # problem in the called script
                module use -a /t/rhome/software/packages/modulefiles

                case "$fortran_compiler" in
                    intel*)
			module load PrgEnv-intel/5.0.41 netcdf cray-mpich/6.1.1
			CC=cc
			CFLAGS="-std=gnu99 -march=native -O2 -DHAVE_LIBNETCDF -DHAVE_CF_INTERFACE"
			cc_version=$($CC --version | awk 'NR==1')
			FFLAGS=${FFLAGS}
			F77FLAGS="$FFLAGS"
			LIBS=-lirng
			;;
                    cray)
			module load PrgEnv-cray netcdf grib_api 
			;;
                    default|gcc)
			module load PrgEnv-gnu netcdf grib_api cray-mpich/6.1.1
			FFLAGS=${FFLAGS}
			;;
                esac
		NETCDFROOT=$NETCDF_DIR
		NETCDFFROOT=$NETCDF_DIR
                PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-GRIB_API/lib/pkgconfig}
		site_known=0
                ;;
	esac
	;;
    ecmwf.int)
	blueln "   Site: ecmwf.int"
	;;
    lrz.de)
	blueln "   Site: lrz.de"
	;;
    *.zmaw.de|mpimet.mpg.de)
	blueln "   Site: zmaw.de/mpimet.mpg.de"
	case $fortran_compiler in
	    default|gcc)
		compiler_suffix=$(gfortran --version | awk 'NR==1{split($NF,v,"."); printf("gcc%1d%1d", v[1], v[2])}')
		;;
	    nag)
		compiler_suffix=$(nagfor -v 2>&1 | awk 'NR==1{split($5,v,"."); printf("nag%1d%1d", v[1],substr(v[2],1,1))}')
		;;
	    intel)
		compiler_suffix=$(ifort -V 2>&1 | awk -F "," 'NR==1{split($2,v," "); printf("intel%d",v[2])}')
		;;
	    pgi)
		compiler_suffix=$(pgfortran -V | awk 'NR==2{split($2,v,"."); printf("pgi%1d", v[1])}')
		;;
	esac	    

        case $(hostname) in
	    thunder*)
		software_tree=/sw/$dist_codename-x64
	        # enable loading of modules on thunder, must switch of undefined check because of 
                # problem in the called script
		set +u
		. /sw/share/Modules/init/bash
		set -u
                # make MPI wrapper calls available
		module load mvapich2/1.9b-static-$compiler_suffix
                # set netcdf library to be used
		NETCDFROOT=$software_tree/netcdf-4.2.1.1-static
		NETCDFFROOT=$software_tree/netcdf_fortran-4.2-static-$compiler_suffix
                #
		site_known=0
		;;
	    wanglung*)
		NETCDFROOT=/opt/local
		NETCDFFROOT=/opt/local
                #
		site_known=0
		;;
	    thingol*)
		NETCDFROOT=/usr
		NETCDFFROOT=/usr
                #
		site_known=0
		;;
	esac
	;;
    *)
	redln "ERROR: site $site unknown ..."
	;;
esac
#
if [[ $site_known ]]
then

    echo
    blueln "** Calling cmake ..."
    echo
    greenln "  Selected compiler:"
    echo
    greenln "      Fortran : ${fc_version}"
    greenln "      C       : ${cc_version}"
    echo
    greenln "  Use environment:"
    echo
    greenln "      CC         : $CC"
    greenln "      CFLAGS     : $CFLAGS"
    greenln "      FC         : $FC"
    greenln "      FFLAGS     : $FFLAGS"
    greenln "      F77FLAGS   : $F77FLAGS"
    greenln "      NETCDFROOT : $NETCDFROOT"
    greenln "      NETCDFFROOT: $NETCDFFROOT"

    # setup environment:
    CC=$CC CFLAGS=$CFLAGS \
    FC=$FC F77FLAGS=$F77FLAGS FFLAGS=$FFLAGS \
    NETCDFFROOT=$NETCDFFROOT NETCDFROOT=$NETCDFROOT \

    cwd=$(pwd -P)

    cd ../build

    cmake $cwd

else

    redln  "ERROR: site/host dependend setup not available ..."
    exit 1

fi
#________________________________________________________________________________________________
# select machine specifics
echo
blueln "** Now run make to build ICON ..."
echo
#________________________________________________________________________________________________


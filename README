 README file for ICON           Marco Giorgetta, MPI-M,  2011-01-27
 ====================           Modified: D. Reinert, F. Prill (DWD, 2014-06-04)
                                Modified: R. Mueller (DKRZ,11/2019)

Table of Contents:
A) Building the ICON model
B) Run experiments
C) Running other real-data tests (DWD example scripts)

#===============================================================================
A) Building the model

0. out-of-source vs. in-source builds
--------------------------------------------------------------------------------
In-source-building is the way the old ICON building worked: you have a single
working copy and in there the user has to decide how to build ICON. Multiple
builds require multiple working copies of ICON. For people doing experiments
only, this can be sufficient.
An out-of-source build offers the flexibility to build software in different
ways (e.g. compilers, flags, features) from a single source code. Hence it is
possible to change something in the source code and test this change in
different builds because these build do NOT interfere with each other. For ICON
developers this should be the default.

1. Create a directory for your desired build
% mkdir gcc_debug && cd gcc_debug

2. Call the configure script with options or one of the example wrapper
% $HOME/src/icon/config/archlinux/gcc.openmpi #or
% $HOME/src/icon/configure \
    CC=mpicc \
    FC=mpif90 \
    LIBS='-leccodes -lsz -laec -lnetcdff -lnetcdf -lopenblas -llapack -lxml2 -lz -llzma -licui18n -licuuc -licudata -lm -ldl' \
    CFLAGS="$CFLAGS" --enable-grib2 --prefix=$HOME/local/icon

3. If not already include in the build-wrapper, call
% make

4. If not part of the build wrapper, sync with the runscript templating of ICON
% rsync -avz --exclude='*in' --exclude='.*' ${HOME}/src/icon/run .
% test -d data || ln -sf ${HOME}/src/icon/data
% test -f make_runscripts || cp ${HOME}/src/icon/make_runscripts .
% ./config.status --file=run/create_target_header --file=run/exec.iconrun --file=run/add_run_routines --file=run/set-up.info

1. Configure the build
--------------------------------------------------
The Autoconf configuration system is used to analyze the computer architecture
(hardware and software) and to set user specified preferences. These
preferences are all read from the command line and the environment. For
readability please use the commandline. However configure was called, it will
be saved into 'config.log' in the top building directory. If you are unsure
what you did last time, please have a look into this file.

'config/mh-<OS>' (where <OS> is the identified operating system) is no longer present.

The new 'configure' script offers a wide range of options and variables. All of
them are documented. Use

% ./configure --help

and read README.md for in-detail information about these options and the
dependencies of ICON.

For all known systems there are example scripts in the repository. These scripts
set variables and call 'configure' in the correct way and can be found in './config/examples'
All of them can be used for out-of-source builds.
Another valuable set of examples are the scripts running by buildbot. These can
be found in './config/buildbot' and are names like the builders they are used by. But: buildbot does in-source-builds at the moment'

After the successful configuration of the build just call this with an appropriate N

% make -jN

This will create an icon binary at './bin/icon'. All make targets are documented with

% make help

#=============================================================================== 
B) Run experiments

B.1) how to get ICON grids

Official grids can be downloaded from http://icon-downloads.zmaw.de

The grid generator is no longer a part of ICON, see https://code.mpimet.mpg.de/projects/icon-grid-generator for more information.

The ICON horizontal spherical grid is based on the projection of the icosahedron
on the sphere. The initial icosahedron grid is refined by <n>-secting the edges,
and further refinement is obtained by iteratively bisecting the created edges.
The grid produced at the <k> refining iteration is named "R<n>B<k>", and the
corresponding netcdf file is iconR<n>B<k>-grid.nc.

All grids should have a UUID, that is also used for reference in ICON output files.

B.2) Create a runscript
--------------------

Runscripts can be created in a hand-written manner for a single HPC-system or
via ICONs templating mechanism. This mechanism is not further handled by the
building system.

-- preparation --
For in-source builds call

% ./config.status --file=run/create_target_header --file=run/exec.iconrun --file=run/add_run_routines --file=run/set-up.info

For out-of-source builds call (with ICON_DIR being the path to the ICON source code you just built)

% rsync -avz --exclude='*in' --exclude='.*' ${ICON_DIR}/run .
% test -d data || ln -sf ${ICON_DIR}/data
% test -f make_runscripts || cp ${ICON_DIR}/make_runscripts .

Runscripts and templates reside below the './run' directory. The easies way to
create runscripts from runscript templates is 

% ./make_runscripts

This process will create the run scripts for running model experiments, for
which experiment descriptor files exist in the run/ directory. Experiment
templates files are named "exp.<name>". For templates in subdirectories of
'./run' there has to be a copy or symlink be created directly in the './run'
directory.
Single templates can be created with

% ./make_runscripts -s <name>

Please edit the runscript header according to your needs regarding accounting, number on nodes and so on.

For a more sophisticated runscript generation, the wrapper
'./config/make_target_runscript' is mode suitable. It supports many different
variables that otherwise must be set manually. E.g. for setting the wall clock
limit and the number of nodes, you can call from the ICON-root directory:

cd run && ln -sf ./checksuite.ocean_internal/omip/exp.ocean_omip_long exp.ocean_omip_long
./config/make_target_runscript in_script=exp.ocean_omip_long in_script=exec.iconrun EXPNAME=ocean_omip_long cpu_time=08:00:00 no_of_nodes=20

#===============================================================================
C) Run the ICON model 

The model executable, the grid and the run script exist now. 
Start the run by ether submitting it on a HPC system (here with slurm)

% cd run
% sbatch exp.<name>.run

or by starting the script on workstation

% cd run
% ./exp.<name>.run

This produces a number of files in the experiment directory located in
'./experiments/<name>'. But this configurable during the runscript creation
with ./config/make_target_runscript'.


And if you don't already know what to do with this, please stop reading

#==============================================================================
D) Running other real-data tests

Further information can be found on
  https://code.mpimet.mpg.de/projects/iconpublic/wiki/Documentation

Best practice settings for a real-data test case have been collected
in the experiment file "run/exp.nh_oper".  This run script is intended
to be used like in Section C.

Further stand-alone example scripts that contain basic namelist
settings as well as batch queuing settings for the DWD Cray XC30
platform can be found in the subdirectory './run/checksuite.xce.dwd.de/'.
See the comments in these run scripts for details.



